
rgb_led103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c8  080047c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047c8  080047c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c8  080047c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001184  2000000c  080047dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001190  080047dc  00021190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c573  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f18  00000000  00000000  0002c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0002f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001743f  00000000  00000000  0002fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d933  00000000  00000000  00047217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898d3  00000000  00000000  00054b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de41d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  000de470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004790 	.word	0x08004790

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004790 	.word	0x08004790

0800014c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
 8000154:	2108      	movs	r1, #8
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000158:	f003 fc86 	bl	8003a68 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800015e:	2201      	movs	r2, #1
 8000160:	601a      	str	r2, [r3, #0]
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	200000c8 	.word	0x200000c8
 8000170:	20000320 	.word	0x20000320

08000174 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
 8000180:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	b2d9      	uxtb	r1, r3
 8000186:	4a10      	ldr	r2, [pc, #64]	; (80001c8 <Set_LED+0x54>)
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	b2d9      	uxtb	r1, r3
 8000192:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <Set_LED+0x54>)
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	4413      	add	r3, r2
 800019a:	460a      	mov	r2, r1
 800019c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	b2d9      	uxtb	r1, r3
 80001a2:	4a09      	ldr	r2, [pc, #36]	; (80001c8 <Set_LED+0x54>)
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	4413      	add	r3, r2
 80001aa:	460a      	mov	r2, r1
 80001ac:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2d9      	uxtb	r1, r3
 80001b2:	4a05      	ldr	r2, [pc, #20]	; (80001c8 <Set_LED+0x54>)
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	70da      	strb	r2, [r3, #3]
}
 80001be:	bf00      	nop
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	200001f8 	.word	0x200001f8

080001cc <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
	...

080001e0 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
 80001ee:	e036      	b.n	800025e <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80001f0:	4a2e      	ldr	r2, [pc, #184]	; (80002ac <WS2812_Send+0xcc>)
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	4413      	add	r3, r2
 80001f8:	785b      	ldrb	r3, [r3, #1]
 80001fa:	041a      	lsls	r2, r3, #16
 80001fc:	492b      	ldr	r1, [pc, #172]	; (80002ac <WS2812_Send+0xcc>)
 80001fe:	693b      	ldr	r3, [r7, #16]
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	440b      	add	r3, r1
 8000204:	789b      	ldrb	r3, [r3, #2]
 8000206:	021b      	lsls	r3, r3, #8
 8000208:	431a      	orrs	r2, r3
 800020a:	4928      	ldr	r1, [pc, #160]	; (80002ac <WS2812_Send+0xcc>)
 800020c:	693b      	ldr	r3, [r7, #16]
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	440b      	add	r3, r1
 8000212:	78db      	ldrb	r3, [r3, #3]
 8000214:	4313      	orrs	r3, r2
 8000216:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8000218:	2317      	movs	r3, #23
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e019      	b.n	8000252 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 800021e:	2201      	movs	r2, #1
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	fa02 f303 	lsl.w	r3, r2, r3
 8000226:	461a      	mov	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4013      	ands	r3, r2
 800022c:	2b00      	cmp	r3, #0
 800022e:	d005      	beq.n	800023c <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000230:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <WS2812_Send+0xd0>)
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	213c      	movs	r1, #60	; 0x3c
 8000236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800023a:	e004      	b.n	8000246 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 800023c:	4a1c      	ldr	r2, [pc, #112]	; (80002b0 <WS2812_Send+0xd0>)
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	211e      	movs	r1, #30
 8000242:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	3301      	adds	r3, #1
 800024a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	3b01      	subs	r3, #1
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	2b00      	cmp	r3, #0
 8000256:	dae2      	bge.n	800021e <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	3301      	adds	r3, #1
 800025c:	613b      	str	r3, [r7, #16]
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b49      	cmp	r3, #73	; 0x49
 8000262:	ddc5      	ble.n	80001f0 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
 8000268:	e00a      	b.n	8000280 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <WS2812_Send+0xd0>)
 800026c:	697b      	ldr	r3, [r7, #20]
 800026e:	2100      	movs	r1, #0
 8000270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	3301      	adds	r3, #1
 8000278:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	3301      	adds	r3, #1
 800027e:	60bb      	str	r3, [r7, #8]
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	2b31      	cmp	r3, #49	; 0x31
 8000284:	ddf1      	ble.n	800026a <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	b29b      	uxth	r3, r3
 800028a:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <WS2812_Send+0xd0>)
 800028c:	2108      	movs	r1, #8
 800028e:	4809      	ldr	r0, [pc, #36]	; (80002b4 <WS2812_Send+0xd4>)
 8000290:	f003 fa56 	bl	8003740 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000294:	bf00      	nop
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <WS2812_Send+0xd8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <WS2812_Send+0xb6>
	datasentflag = 0;
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <WS2812_Send+0xd8>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200001f8 	.word	0x200001f8
 80002b0:	20000324 	.word	0x20000324
 80002b4:	200000c8 	.word	0x200000c8
 80002b8:	20000320 	.word	0x20000320

080002bc <Reset_LED>:


void Reset_LED (void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED; i++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e01a      	b.n	80002fe <Reset_LED+0x42>
	{
		LED_Data[i][0] = i;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	b2d9      	uxtb	r1, r3
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <Reset_LED+0x54>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 80002d4:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <Reset_LED+0x54>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4413      	add	r3, r2
 80002dc:	2200      	movs	r2, #0
 80002de:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 80002e0:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <Reset_LED+0x54>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	4413      	add	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 80002ec:	4a08      	ldr	r2, [pc, #32]	; (8000310 <Reset_LED+0x54>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	70da      	strb	r2, [r3, #3]
	for (int i=0; i<MAX_LED; i++)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b49      	cmp	r3, #73	; 0x49
 8000302:	dde1      	ble.n	80002c8 <Reset_LED+0xc>
	}
}
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	200001f8 	.word	0x200001f8

08000314 <right_signal>:
  if(effStep >= 14) {effStep = 0; return 0x03; }
  else effStep++;
  return 0x01;
}

void right_signal(){
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	for(int i=RIGHT_SIGNAL;i<MAX_LED;i++){
 800031a:	233b      	movs	r3, #59	; 0x3b
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	e00d      	b.n	800033c <right_signal+0x28>
			  Set_LED(i, 250, 50, 0);
 8000320:	2300      	movs	r3, #0
 8000322:	2232      	movs	r2, #50	; 0x32
 8000324:	21fa      	movs	r1, #250	; 0xfa
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f7ff ff24 	bl	8000174 <Set_LED>
//				  if(j==i||j==i-1 || j==i-2){
//				  }else{
//					 // Set_LED(j, 0, 0, 0);
//				  }
//			  }
			  WS2812_Send();
 800032c:	f7ff ff58 	bl	80001e0 <WS2812_Send>
			  HAL_Delay(20);
 8000330:	2014      	movs	r0, #20
 8000332:	f001 f83f 	bl	80013b4 <HAL_Delay>
	for(int i=RIGHT_SIGNAL;i<MAX_LED;i++){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3301      	adds	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b49      	cmp	r3, #73	; 0x49
 8000340:	ddee      	ble.n	8000320 <right_signal+0xc>
		  }
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <stop_signal>:

void stop_signal(){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
	for(int i=14;i<74-15;i++){
 8000352:	230e      	movs	r3, #14
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e008      	b.n	800036a <stop_signal+0x1e>
		Set_LED(i, 250, 0, 0);
 8000358:	2300      	movs	r3, #0
 800035a:	2200      	movs	r2, #0
 800035c:	21fa      	movs	r1, #250	; 0xfa
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ff08 	bl	8000174 <Set_LED>
	for(int i=14;i<74-15;i++){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3301      	adds	r3, #1
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2b3a      	cmp	r3, #58	; 0x3a
 800036e:	ddf3      	ble.n	8000358 <stop_signal+0xc>
	}
	WS2812_Send();
 8000370:	f7ff ff36 	bl	80001e0 <WS2812_Send>
	HAL_Delay(100);
 8000374:	2064      	movs	r0, #100	; 0x64
 8000376:	f001 f81d 	bl	80013b4 <HAL_Delay>
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <left_signal>:

void left_signal(){
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
	for(int i=14;i>=0;i--){
 8000388:	230e      	movs	r3, #14
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	e01e      	b.n	80003cc <left_signal+0x4a>
		Set_LED(i, 250, 50, 0);
 800038e:	2300      	movs	r3, #0
 8000390:	2232      	movs	r2, #50	; 0x32
 8000392:	21fa      	movs	r1, #250	; 0xfa
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f7ff feed 	bl	8000174 <Set_LED>
		for(int j=14;j>=0;j--){
 800039a:	230e      	movs	r3, #14
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	e00a      	b.n	80003b6 <left_signal+0x34>
		if(j==i || j==i+1 || j==i+2){
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d003      	beq.n	80003b0 <left_signal+0x2e>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	683a      	ldr	r2, [r7, #0]
 80003ae:	429a      	cmp	r2, r3
		for(int j=14;j>=0;j--){
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	daf1      	bge.n	80003a0 <left_signal+0x1e>
		}else{
		    //Set_LED(j, 0, 0, 0);
		}
		}
		WS2812_Send();
 80003bc:	f7ff ff10 	bl	80001e0 <WS2812_Send>
		HAL_Delay(20);
 80003c0:	2014      	movs	r0, #20
 80003c2:	f000 fff7 	bl	80013b4 <HAL_Delay>
	for(int i=14;i>=0;i--){
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	dadd      	bge.n	800038e <left_signal+0xc>
	}
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <stop_w_left>:

void stop_w_left(){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 80003e2:	230f      	movs	r3, #15
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	e008      	b.n	80003fa <stop_w_left+0x1e>
			Set_LED(i, 250, 0, 0);
 80003e8:	2300      	movs	r3, #0
 80003ea:	2200      	movs	r2, #0
 80003ec:	21fa      	movs	r1, #250	; 0xfa
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff fec0 	bl	8000174 <Set_LED>
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3301      	adds	r3, #1
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b3a      	cmp	r3, #58	; 0x3a
 80003fe:	ddf3      	ble.n	80003e8 <stop_w_left+0xc>
	}
	for(int i=14;i>=0;i--){
 8000400:	230e      	movs	r3, #14
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	e00d      	b.n	8000422 <stop_w_left+0x46>
		Set_LED(i, 250, 120, 0);
 8000406:	2300      	movs	r3, #0
 8000408:	2278      	movs	r2, #120	; 0x78
 800040a:	21fa      	movs	r1, #250	; 0xfa
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f7ff feb1 	bl	8000174 <Set_LED>
//		if(j==i || j==i+1 || j==i+2){
//		}else{
//			 Set_LED(j, 0, 0, 0);
//		}
//		}
		WS2812_Send();
 8000412:	f7ff fee5 	bl	80001e0 <WS2812_Send>
		HAL_Delay(25);
 8000416:	2019      	movs	r0, #25
 8000418:	f000 ffcc 	bl	80013b4 <HAL_Delay>
	for(int i=14;i>=0;i--){
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	daee      	bge.n	8000406 <stop_w_left+0x2a>
	}
}
 8000428:	bf00      	nop
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <stop_w_right>:
void stop_w_right(){
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 8000438:	230f      	movs	r3, #15
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	e008      	b.n	8000450 <stop_w_right+0x1e>
				Set_LED(i, 250, 0, 0);
 800043e:	2300      	movs	r3, #0
 8000440:	2200      	movs	r2, #0
 8000442:	21fa      	movs	r1, #250	; 0xfa
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff fe95 	bl	8000174 <Set_LED>
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3301      	adds	r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b3a      	cmp	r3, #58	; 0x3a
 8000454:	ddf3      	ble.n	800043e <stop_w_right+0xc>
		}
		for(int i=74-15;i<74;i++){
 8000456:	233b      	movs	r3, #59	; 0x3b
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	e00d      	b.n	8000478 <stop_w_right+0x46>
		Set_LED(i, 250, 120, 0);
 800045c:	2300      	movs	r3, #0
 800045e:	2278      	movs	r2, #120	; 0x78
 8000460:	21fa      	movs	r1, #250	; 0xfa
 8000462:	6838      	ldr	r0, [r7, #0]
 8000464:	f7ff fe86 	bl	8000174 <Set_LED>
//			if(j==i || j==i-1 ||j==i-2){
//			}else{
//				 Set_LED(j, 0, 0, 0);
//			}
//			}
			WS2812_Send();
 8000468:	f7ff feba 	bl	80001e0 <WS2812_Send>
			HAL_Delay(25);
 800046c:	2019      	movs	r0, #25
 800046e:	f000 ffa1 	bl	80013b4 <HAL_Delay>
		for(int i=74-15;i<74;i++){
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	2b49      	cmp	r3, #73	; 0x49
 800047c:	ddee      	ble.n	800045c <stop_w_right+0x2a>
		}
}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <all>:
			}

		}
}

void all(){
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
	int k=0;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
	int reset_p=59;
 8000492:	233b      	movs	r3, #59	; 0x3b
 8000494:	61bb      	str	r3, [r7, #24]
	int indexes=2;
 8000496:	2302      	movs	r3, #2
 8000498:	617b      	str	r3, [r7, #20]
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 800049a:	230f      	movs	r3, #15
 800049c:	613b      	str	r3, [r7, #16]
 800049e:	e008      	b.n	80004b2 <all+0x2a>
			Set_LED(i, 250, 0, 0);
 80004a0:	2300      	movs	r3, #0
 80004a2:	2200      	movs	r2, #0
 80004a4:	21fa      	movs	r1, #250	; 0xfa
 80004a6:	6938      	ldr	r0, [r7, #16]
 80004a8:	f7ff fe64 	bl	8000174 <Set_LED>
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	3301      	adds	r3, #1
 80004b0:	613b      	str	r3, [r7, #16]
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	2b3a      	cmp	r3, #58	; 0x3a
 80004b6:	ddf3      	ble.n	80004a0 <all+0x18>
	}
	for(int i=14;i>=0;i--){
 80004b8:	230e      	movs	r3, #14
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	e057      	b.n	800056e <all+0xe6>
		Set_LED(i, 250, 50, 0);
 80004be:	2300      	movs	r3, #0
 80004c0:	2232      	movs	r2, #50	; 0x32
 80004c2:	21fa      	movs	r1, #250	; 0xfa
 80004c4:	68f8      	ldr	r0, [r7, #12]
 80004c6:	f7ff fe55 	bl	8000174 <Set_LED>
		for(int j=14;j>=0;j--){
 80004ca:	230e      	movs	r3, #14
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	e016      	b.n	80004fe <all+0x76>

			if(j==i || j==i+1 || j==i+2 ){}
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d00f      	beq.n	80004f8 <all+0x70>
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	3301      	adds	r3, #1
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d00a      	beq.n	80004f8 <all+0x70>
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3302      	adds	r3, #2
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d005      	beq.n	80004f8 <all+0x70>
				else{
					Set_LED(j, 0, 0, 0);
 80004ec:	2300      	movs	r3, #0
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	68b8      	ldr	r0, [r7, #8]
 80004f4:	f7ff fe3e 	bl	8000174 <Set_LED>
		for(int j=14;j>=0;j--){
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dae5      	bge.n	80004d0 <all+0x48>
				}
		}

		int led_nu = (i*4)+indexes+1;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	009a      	lsls	r2, r3, #2
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	4413      	add	r3, r2
 800050c:	3301      	adds	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
		Set_LED(led_nu, 250, 50, 0);
 8000510:	2300      	movs	r3, #0
 8000512:	2232      	movs	r2, #50	; 0x32
 8000514:	21fa      	movs	r1, #250	; 0xfa
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff fe2c 	bl	8000174 <Set_LED>
		k++;
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	3301      	adds	r3, #1
 8000520:	61fb      	str	r3, [r7, #28]
		indexes+=5;
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3305      	adds	r3, #5
 8000526:	617b      	str	r3, [r7, #20]
		if(k>3){
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	2b03      	cmp	r3, #3
 800052c:	dd08      	ble.n	8000540 <all+0xb8>
			Set_LED(reset_p, 0, 0, 0);
 800052e:	2300      	movs	r3, #0
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	69b8      	ldr	r0, [r7, #24]
 8000536:	f7ff fe1d 	bl	8000174 <Set_LED>
			reset_p++;
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	3301      	adds	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
		}
		if(i==0){
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d105      	bne.n	8000552 <all+0xca>
			Set_LED(73, 250, 50, 0);
 8000546:	2300      	movs	r3, #0
 8000548:	2232      	movs	r2, #50	; 0x32
 800054a:	21fa      	movs	r1, #250	; 0xfa
 800054c:	2049      	movs	r0, #73	; 0x49
 800054e:	f7ff fe11 	bl	8000174 <Set_LED>
		}

		WS2812_Send();
 8000552:	f7ff fe45 	bl	80001e0 <WS2812_Send>
		Set_LED(0, 0, 0, 0);
 8000556:	2300      	movs	r3, #0
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe09 	bl	8000174 <Set_LED>
		HAL_Delay(15);
 8000562:	200f      	movs	r0, #15
 8000564:	f000 ff26 	bl	80013b4 <HAL_Delay>
	for(int i=14;i>=0;i--){
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3b01      	subs	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	daa4      	bge.n	80004be <all+0x36>
	}
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	3720      	adds	r7, #32
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <left_right>:

void left_right(){
 800057e:	b580      	push	{r7, lr}
 8000580:	b086      	sub	sp, #24
 8000582:	af00      	add	r7, sp, #0
	int k=0;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
	int reset_p=59;
 8000588:	233b      	movs	r3, #59	; 0x3b
 800058a:	613b      	str	r3, [r7, #16]
	int indexes=2;
 800058c:	2302      	movs	r3, #2
 800058e:	60fb      	str	r3, [r7, #12]

	for(int i=14;i>=0;i--){
 8000590:	230e      	movs	r3, #14
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	e057      	b.n	8000646 <left_right+0xc8>
		Set_LED(i, 250, 50, 0);
 8000596:	2300      	movs	r3, #0
 8000598:	2232      	movs	r2, #50	; 0x32
 800059a:	21fa      	movs	r1, #250	; 0xfa
 800059c:	68b8      	ldr	r0, [r7, #8]
 800059e:	f7ff fde9 	bl	8000174 <Set_LED>
		for(int j=14;j>=0;j--){
 80005a2:	230e      	movs	r3, #14
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e016      	b.n	80005d6 <left_right+0x58>

			if(j==i || j==i+1 || j==i+2 ){}
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d00f      	beq.n	80005d0 <left_right+0x52>
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	3301      	adds	r3, #1
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d00a      	beq.n	80005d0 <left_right+0x52>
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	3302      	adds	r3, #2
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d005      	beq.n	80005d0 <left_right+0x52>
				else{
					Set_LED(j, 0, 0, 0);
 80005c4:	2300      	movs	r3, #0
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff fdd2 	bl	8000174 <Set_LED>
		for(int j=14;j>=0;j--){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dae5      	bge.n	80005a8 <left_right+0x2a>
				}
		}

		int led_nu = (i*4)+indexes+1;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	009a      	lsls	r2, r3, #2
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	3301      	adds	r3, #1
 80005e6:	603b      	str	r3, [r7, #0]
		Set_LED(led_nu, 250, 50, 0);
 80005e8:	2300      	movs	r3, #0
 80005ea:	2232      	movs	r2, #50	; 0x32
 80005ec:	21fa      	movs	r1, #250	; 0xfa
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	f7ff fdc0 	bl	8000174 <Set_LED>
		k++;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3301      	adds	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
		indexes+=5;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3305      	adds	r3, #5
 80005fe:	60fb      	str	r3, [r7, #12]
		if(k>3){
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	2b03      	cmp	r3, #3
 8000604:	dd08      	ble.n	8000618 <left_right+0x9a>
			Set_LED(reset_p, 0, 0, 0);
 8000606:	2300      	movs	r3, #0
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	6938      	ldr	r0, [r7, #16]
 800060e:	f7ff fdb1 	bl	8000174 <Set_LED>
			reset_p++;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	3301      	adds	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
		}
		if(i==0){
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d105      	bne.n	800062a <left_right+0xac>
			Set_LED(73, 250, 50, 0);
 800061e:	2300      	movs	r3, #0
 8000620:	2232      	movs	r2, #50	; 0x32
 8000622:	21fa      	movs	r1, #250	; 0xfa
 8000624:	2049      	movs	r0, #73	; 0x49
 8000626:	f7ff fda5 	bl	8000174 <Set_LED>
		}

		WS2812_Send();
 800062a:	f7ff fdd9 	bl	80001e0 <WS2812_Send>
		Set_LED(0, 0, 0, 0);
 800062e:	2300      	movs	r3, #0
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff fd9d 	bl	8000174 <Set_LED>
		HAL_Delay(20);
 800063a:	2014      	movs	r0, #20
 800063c:	f000 feba 	bl	80013b4 <HAL_Delay>
	for(int i=14;i>=0;i--){
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	3b01      	subs	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	daa4      	bge.n	8000596 <left_right+0x18>
	}
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <opening_sim>:
int value=0;
void opening_sim(){
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
	int k=0;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
	int reset_p=37;
 8000662:	2325      	movs	r3, #37	; 0x25
 8000664:	613b      	str	r3, [r7, #16]
	int adım_say=1;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
	while(1){
	for(int i=36;i>=value;i--){
 800066a:	2324      	movs	r3, #36	; 0x24
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	e047      	b.n	8000700 <opening_sim+0xa8>
		Set_LED(i, 250, 0, 0);
 8000670:	2300      	movs	r3, #0
 8000672:	2200      	movs	r2, #0
 8000674:	21fa      	movs	r1, #250	; 0xfa
 8000676:	68b8      	ldr	r0, [r7, #8]
 8000678:	f7ff fd7c 	bl	8000174 <Set_LED>
		for(int j=36;j>=value+2;j--){
 800067c:	2324      	movs	r3, #36	; 0x24
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	e016      	b.n	80006b0 <opening_sim+0x58>
			if(j==i || j==i+1 || j==i+2){}
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	429a      	cmp	r2, r3
 8000688:	d00f      	beq.n	80006aa <opening_sim+0x52>
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	3301      	adds	r3, #1
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	d00a      	beq.n	80006aa <opening_sim+0x52>
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	3302      	adds	r3, #2
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	429a      	cmp	r2, r3
 800069c:	d005      	beq.n	80006aa <opening_sim+0x52>
			else{
				Set_LED(j, 0, 0, 0);
 800069e:	2300      	movs	r3, #0
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fd65 	bl	8000174 <Set_LED>
		for(int j=36;j>=value+2;j--){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <opening_sim+0xdc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dce2      	bgt.n	8000682 <opening_sim+0x2a>
			}
		}
	Set_LED(i+adım_say, 250, 0, 0);
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	18d0      	adds	r0, r2, r3
 80006c2:	2300      	movs	r3, #0
 80006c4:	2200      	movs	r2, #0
 80006c6:	21fa      	movs	r1, #250	; 0xfa
 80006c8:	f7ff fd54 	bl	8000174 <Set_LED>
	adım_say+=2;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3302      	adds	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
	k++;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
	if(k>3){
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	dd08      	ble.n	80006f0 <opening_sim+0x98>
		Set_LED(reset_p, 0, 0, 0);
 80006de:	2300      	movs	r3, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	6938      	ldr	r0, [r7, #16]
 80006e6:	f7ff fd45 	bl	8000174 <Set_LED>
		reset_p++;
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3301      	adds	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
	}
	WS2812_Send();
 80006f0:	f7ff fd76 	bl	80001e0 <WS2812_Send>
	HAL_Delay(5);
 80006f4:	2005      	movs	r0, #5
 80006f6:	f000 fe5d 	bl	80013b4 <HAL_Delay>
	for(int i=36;i>=value;i--){
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <opening_sim+0xdc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	429a      	cmp	r2, r3
 8000708:	dab2      	bge.n	8000670 <opening_sim+0x18>
	}
	k=0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
	reset_p=37;
 800070e:	2325      	movs	r3, #37	; 0x25
 8000710:	613b      	str	r3, [r7, #16]
	adım_say=1;
 8000712:	2301      	movs	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
	value+=2;
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <opening_sim+0xdc>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3302      	adds	r3, #2
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <opening_sim+0xdc>)
 800071e:	6013      	str	r3, [r2, #0]

	if(value>36){break;}
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <opening_sim+0xdc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b24      	cmp	r3, #36	; 0x24
 8000726:	dc00      	bgt.n	800072a <opening_sim+0xd2>
	for(int i=36;i>=value;i--){
 8000728:	e79f      	b.n	800066a <opening_sim+0x12>
	if(value>36){break;}
 800072a:	bf00      	nop
	}
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20001168 	.word	0x20001168

08000738 <to_visibilty>:

void to_visibilty(){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

	int r=250;
 800073e:	23fa      	movs	r3, #250	; 0xfa
 8000740:	607b      	str	r3, [r7, #4]
	while(1){
		for(int i=0;i<75;i++){
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	e008      	b.n	800075a <to_visibilty+0x22>
			Set_LED(i, r, 0,0);
 8000748:	2300      	movs	r3, #0
 800074a:	2200      	movs	r2, #0
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	6838      	ldr	r0, [r7, #0]
 8000750:	f7ff fd10 	bl	8000174 <Set_LED>
		for(int i=0;i<75;i++){
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b4a      	cmp	r3, #74	; 0x4a
 800075e:	ddf3      	ble.n	8000748 <to_visibilty+0x10>
		}
		HAL_Delay(15);
 8000760:	200f      	movs	r0, #15
 8000762:	f000 fe27 	bl	80013b4 <HAL_Delay>
		//Set_Brightness(45);
		WS2812_Send();
 8000766:	f7ff fd3b 	bl	80001e0 <WS2812_Send>
		r--;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3b01      	subs	r3, #1
 800076e:	607b      	str	r3, [r7, #4]

		if(r==0){Reset_LED();WS2812_Send();HAL_Delay(200);break;}
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1e5      	bne.n	8000742 <to_visibilty+0xa>
 8000776:	f7ff fda1 	bl	80002bc <Reset_LED>
 800077a:	f7ff fd31 	bl	80001e0 <WS2812_Send>
 800077e:	20c8      	movs	r0, #200	; 0xc8
 8000780:	f000 fe18 	bl	80013b4 <HAL_Delay>
 8000784:	bf00      	nop
	}
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <all_reset>:
void all_reset(){
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
	Reset_LED();WS2812_Send();
 8000792:	f7ff fd93 	bl	80002bc <Reset_LED>
 8000796:	f7ff fd23 	bl	80001e0 <WS2812_Send>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <decimal_to_bin>:
		LED_Data[i][3] = b;
	}
}

int dest[8];
void decimal_to_bin(uint8_t number){
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
    for(int i=0;i<8;i++){
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e00c      	b.n	80007ca <decimal_to_bin+0x2a>
        dest[i] = number%2;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 0201 	and.w	r2, r3, #1
 80007b6:	4909      	ldr	r1, [pc, #36]	; (80007dc <decimal_to_bin+0x3c>)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        number/=2;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	71fb      	strb	r3, [r7, #7]
    for(int i=0;i<8;i++){
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b07      	cmp	r3, #7
 80007ce:	ddef      	ble.n	80007b0 <decimal_to_bin+0x10>
    }
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	2000116c 	.word	0x2000116c

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fd84 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f8f6 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 fafe 	bl	8000dec <MX_GPIO_Init>
  MX_DMA_Init();
 80007f0:	f000 fad6 	bl	8000da0 <MX_DMA_Init>
  MX_TIM1_Init();
 80007f4:	f000 f9c0 	bl	8000b78 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007f8:	f000 fa5e 	bl	8000cb8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80007fc:	f000 f948 	bl	8000a90 <MX_ADC1_Init>
  MX_CAN_Init();
 8000800:	f000 f984 	bl	8000b0c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

          //can comm.

          HAL_CAN_Start(&hcan);   //start can communication
 8000804:	486e      	ldr	r0, [pc, #440]	; (80009c0 <main+0x1e0>)
 8000806:	f001 f9ce 	bl	8001ba6 <HAL_CAN_Start>

        // HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);  // enable interrupt
          pTxHeader.DLC = 1;
 800080a:	4b6e      	ldr	r3, [pc, #440]	; (80009c4 <main+0x1e4>)
 800080c:	2201      	movs	r2, #1
 800080e:	611a      	str	r2, [r3, #16]
          pTxHeader.IDE = CAN_ID_STD;
 8000810:	4b6c      	ldr	r3, [pc, #432]	; (80009c4 <main+0x1e4>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
          pTxHeader.RTR = CAN_RTR_DATA;
 8000816:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <main+0x1e4>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
          pTxHeader.StdId = 0x13;
 800081c:	4b69      	ldr	r3, [pc, #420]	; (80009c4 <main+0x1e4>)
 800081e:	2213      	movs	r2, #19
 8000820:	601a      	str	r2, [r3, #0]

          //set filter parameters
          sFilterConfig.FilterActivation = ENABLE;
 8000822:	4b69      	ldr	r3, [pc, #420]	; (80009c8 <main+0x1e8>)
 8000824:	2201      	movs	r2, #1
 8000826:	621a      	str	r2, [r3, #32]
          sFilterConfig.FilterBank = 0;
 8000828:	4b67      	ldr	r3, [pc, #412]	; (80009c8 <main+0x1e8>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
          sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800082e:	4b66      	ldr	r3, [pc, #408]	; (80009c8 <main+0x1e8>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
          sFilterConfig.FilterIdHigh = 0x10 << 5;
 8000834:	4b64      	ldr	r3, [pc, #400]	; (80009c8 <main+0x1e8>)
 8000836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083a:	601a      	str	r2, [r3, #0]
          sFilterConfig.FilterIdLow = 0x10 << 5;
 800083c:	4b62      	ldr	r3, [pc, #392]	; (80009c8 <main+0x1e8>)
 800083e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000842:	605a      	str	r2, [r3, #4]
          sFilterConfig.FilterMaskIdHigh = 0xFF << 5;
 8000844:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <main+0x1e8>)
 8000846:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
 800084a:	609a      	str	r2, [r3, #8]
          sFilterConfig.FilterMaskIdLow = 0xFF<< 5;
 800084c:	4b5e      	ldr	r3, [pc, #376]	; (80009c8 <main+0x1e8>)
 800084e:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
 8000852:	60da      	str	r2, [r3, #12]
          sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000854:	4b5c      	ldr	r3, [pc, #368]	; (80009c8 <main+0x1e8>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
          sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800085a:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <main+0x1e8>)
 800085c:	2201      	movs	r2, #1
 800085e:	61da      	str	r2, [r3, #28]


          HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000860:	4959      	ldr	r1, [pc, #356]	; (80009c8 <main+0x1e8>)
 8000862:	4857      	ldr	r0, [pc, #348]	; (80009c0 <main+0x1e0>)
 8000864:	f001 f8d6 	bl	8001a14 <HAL_CAN_ConfigFilter>


  Reset_LED();
 8000868:	f7ff fd28 	bl	80002bc <Reset_LED>
 WS2812_Send();
 800086c:	f7ff fcb8 	bl	80001e0 <WS2812_Send>
 Set_Brightness(45);
 8000870:	202d      	movs	r0, #45	; 0x2d
 8000872:	f7ff fcab 	bl	80001cc <Set_Brightness>
 opening_sim();
 8000876:	f7ff feef 	bl	8000658 <opening_sim>
  to_visibilty();
 800087a:	f7ff ff5d 	bl	8000738 <to_visibilty>
  Reset_LED();
 800087e:	f7ff fd1d 	bl	80002bc <Reset_LED>
  WS2812_Send();
 8000882:	f7ff fcad 	bl	80001e0 <WS2812_Send>
  HAL_Delay(200);
 8000886:	20c8      	movs	r0, #200	; 0xc8
 8000888:	f000 fd94 	bl	80013b4 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

   HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, RxData);
 800088c:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <main+0x1ec>)
 800088e:	4a50      	ldr	r2, [pc, #320]	; (80009d0 <main+0x1f0>)
 8000890:	2100      	movs	r1, #0
 8000892:	484b      	ldr	r0, [pc, #300]	; (80009c0 <main+0x1e0>)
 8000894:	f001 f9cb 	bl	8001c2e <HAL_CAN_GetRxMessage>
	       // HAL_Delay(75);
            } */

	//INPUTS: 1-stop; 2-dörtlü; 3-sol; 4-sag; 5-far; 6-silecek; 7-korna; 8-switch;
	//OUTPUTS : 1-?; 2-sol; 3-?; 4-far; 5-silecek; 6-korna; 7-? 8-sag;
   if(pRxHeader.StdId == 0x12){   //röle id
 8000898:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <main+0x1f0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b12      	cmp	r3, #18
 800089e:	d1f5      	bne.n	800088c <main+0xac>
	  if(RxData[0]==0){
 80008a0:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <main+0x1ec>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <main+0xd2>
		   Reset_LED();
 80008a8:	f7ff fd08 	bl	80002bc <Reset_LED>
		   WS2812_Send();
 80008ac:	f7ff fc98 	bl	80001e0 <WS2812_Send>
		   continue;
 80008b0:	e084      	b.n	80009bc <main+0x1dc>
	  }
	  decimal_to_bin(RxData[0]);
 80008b2:	4b46      	ldr	r3, [pc, #280]	; (80009cc <main+0x1ec>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff72 	bl	80007a0 <decimal_to_bin>
	  //sol-sag-stop-dortlu aktif gelirse hepsi yanıyor
	  if((dest[0] && dest[1] && dest[2] && dest[3]) || (dest[0] && dest[1] && dest[2]) || (dest[0] && dest[1] && dest[3]) || (dest[0] && dest[1]) || (dest[0] && dest[2] && dest[3])){ // stop
 80008bc:	4b45      	ldr	r3, [pc, #276]	; (80009d4 <main+0x1f4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d00b      	beq.n	80008dc <main+0xfc>
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <main+0x1f4>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d007      	beq.n	80008dc <main+0xfc>
 80008cc:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <main+0x1f4>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d003      	beq.n	80008dc <main+0xfc>
 80008d4:	4b3f      	ldr	r3, [pc, #252]	; (80009d4 <main+0x1f4>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d12b      	bne.n	8000934 <main+0x154>
 80008dc:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <main+0x1f4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d007      	beq.n	80008f4 <main+0x114>
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <main+0x1f4>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d003      	beq.n	80008f4 <main+0x114>
 80008ec:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <main+0x1f4>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d11f      	bne.n	8000934 <main+0x154>
 80008f4:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <main+0x1f4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d007      	beq.n	800090c <main+0x12c>
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <main+0x1f4>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <main+0x12c>
 8000904:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <main+0x1f4>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d113      	bne.n	8000934 <main+0x154>
 800090c:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <main+0x1f4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d003      	beq.n	800091c <main+0x13c>
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <main+0x1f4>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10b      	bne.n	8000934 <main+0x154>
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <main+0x1f4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00c      	beq.n	800093e <main+0x15e>
 8000924:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <main+0x1f4>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d008      	beq.n	800093e <main+0x15e>
 800092c:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <main+0x1f4>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d004      	beq.n	800093e <main+0x15e>
		   stop_left_right;
 8000934:	f7ff fda8 	bl	8000488 <all>
		   all_reset;
 8000938:	f7ff ff29 	bl	800078e <all_reset>
		   continue;
 800093c:	e03e      	b.n	80009bc <main+0x1dc>
	  }
	  else if(dest[0] && dest[2]){ // stop-sol
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <main+0x1f4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d008      	beq.n	8000958 <main+0x178>
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <main+0x1f4>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <main+0x178>
		   stop_w_left;
 800094e:	f7ff fd45 	bl	80003dc <stop_w_left>
		   all_reset;
 8000952:	f7ff ff1c 	bl	800078e <all_reset>
		   continue;
 8000956:	e031      	b.n	80009bc <main+0x1dc>
	  }
	  else if(dest[0] && dest[3]){ // stop-sag
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <main+0x1f4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d008      	beq.n	8000972 <main+0x192>
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <main+0x1f4>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d004      	beq.n	8000972 <main+0x192>
		   stop_w_right;
 8000968:	f7ff fd63 	bl	8000432 <stop_w_right>
		   all_reset;
 800096c:	f7ff ff0f 	bl	800078e <all_reset>
		   continue;
 8000970:	e024      	b.n	80009bc <main+0x1dc>
	  }
	  else if(dest[0]){ // stop
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <main+0x1f4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <main+0x1a4>
		   stop;
 800097a:	f7ff fce7 	bl	800034c <stop_signal>
		   all_reset;
 800097e:	f7ff ff06 	bl	800078e <all_reset>
		   continue;
 8000982:	e01b      	b.n	80009bc <main+0x1dc>
	  }
	  else if(dest[2]){ // sol
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <main+0x1f4>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d004      	beq.n	8000996 <main+0x1b6>
		   left;
 800098c:	f7ff fcf9 	bl	8000382 <left_signal>
		   all_reset;
 8000990:	f7ff fefd 	bl	800078e <all_reset>
		   continue;
 8000994:	e012      	b.n	80009bc <main+0x1dc>
	  }
	  else if(dest[3]){ // sag
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <main+0x1f4>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <main+0x1c8>
		   right;
 800099e:	f7ff fcb9 	bl	8000314 <right_signal>
		   all_reset;
 80009a2:	f7ff fef4 	bl	800078e <all_reset>
		   continue;
 80009a6:	e009      	b.n	80009bc <main+0x1dc>
	  }
	  else if(dest[1]){ // dortlu
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <main+0x1f4>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f43f af6d 	beq.w	800088c <main+0xac>
		   left_right;
 80009b2:	f7ff fde4 	bl	800057e <left_right>
		   all_reset;
 80009b6:	f7ff feea 	bl	800078e <all_reset>
		   continue;
 80009ba:	bf00      	nop
   HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, RxData);
 80009bc:	e766      	b.n	800088c <main+0xac>
 80009be:	bf00      	nop
 80009c0:	20000058 	.word	0x20000058
 80009c4:	20000198 	.word	0x20000198
 80009c8:	200001cc 	.word	0x200001cc
 80009cc:	200001f4 	.word	0x200001f4
 80009d0:	200001b0 	.word	0x200001b0
 80009d4:	2000116c 	.word	0x2000116c

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e2:	2228      	movs	r2, #40	; 0x28
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 feca 	bl	8004780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a16:	2301      	movs	r3, #1
 8000a18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a24:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 f940 	bl	8002cb4 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a3a:	f000 fa2f 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fbac 	bl	80031b8 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a66:	f000 fa19 	bl	8000e9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a72:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fd04 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a82:	f000 fa0b 	bl	8000e9c <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <MX_ADC1_Init+0x78>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000aba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000abe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000ace:	f000 fc95 	bl	80013fc <HAL_ADC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ad8:	f000 f9e0 	bl	8000e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_ADC1_Init+0x74>)
 8000aee:	f000 fd5d 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000af8:	f000 f9d0 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000028 	.word	0x20000028
 8000b08:	40012400 	.word	0x40012400

08000b0c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b12:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <MX_CAN_Init+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b2e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b36:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_CAN_Init+0x64>)
 8000b5e:	f000 fe5e 	bl	800181e <HAL_CAN_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000b68:	f000 f998 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000058 	.word	0x20000058
 8000b74:	40006400 	.word	0x40006400

08000b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b096      	sub	sp, #88	; 0x58
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
 8000ba6:	615a      	str	r2, [r3, #20]
 8000ba8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2220      	movs	r2, #32
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fde5 	bl	8004780 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb6:	4b3e      	ldr	r3, [pc, #248]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000bb8:	4a3e      	ldr	r2, [pc, #248]	; (8000cb4 <MX_TIM1_Init+0x13c>)
 8000bba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bbc:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 8000bc8:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000bca:	2247      	movs	r2, #71	; 0x47
 8000bcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd4:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be0:	4833      	ldr	r0, [pc, #204]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000be2:	f002 fd05 	bl	80035f0 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000bec:	f000 f956 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	482c      	ldr	r0, [pc, #176]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000bfe:	f003 f8af 	bl	8003d60 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c08:	f000 f948 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c0c:	4828      	ldr	r0, [pc, #160]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000c0e:	f002 fd3e 	bl	800368e <HAL_TIM_PWM_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c18:	f000 f940 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4821      	ldr	r0, [pc, #132]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000c2c:	f003 fcda 	bl	80045e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000c36:	f000 f931 	bl	8000e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3a:	2360      	movs	r3, #96	; 0x60
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000c60:	f002 ffc0 	bl	8003be4 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000c6a:	f000 f917 	bl	8000e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000c92:	f003 fcff 	bl	8004694 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000c9c:	f000 f8fe 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <MX_TIM1_Init+0x138>)
 8000ca2:	f000 fa4b 	bl	800113c <HAL_TIM_MspPostInit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3758      	adds	r7, #88	; 0x58
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000080 	.word	0x20000080
 8000cb4:	40012c00 	.word	0x40012c00

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72-1;
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000cfe:	2247      	movs	r2, #71	; 0x47
 8000d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d0e:	4823      	ldr	r0, [pc, #140]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000d10:	f002 fc6e 	bl	80035f0 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000d1a:	f000 f8bf 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481c      	ldr	r0, [pc, #112]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000d2c:	f003 f818 	bl	8003d60 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d36:	f000 f8b1 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000d3c:	f002 fca7 	bl	800368e <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d46:	f000 f8a9 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	4619      	mov	r1, r3
 8000d58:	4810      	ldr	r0, [pc, #64]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000d5a:	f003 fc43 	bl	80045e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000d64:	f000 f89a 	bl	8000e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d68:	2360      	movs	r3, #96	; 0x60
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000d80:	f002 ff30 	bl	8003be4 <HAL_TIM_PWM_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000d8a:	f000 f887 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM2_Init+0xe4>)
 8000d90:	f000 f9d4 	bl	800113c <HAL_TIM_MspPostInit>

}
 8000d94:	bf00      	nop
 8000d96:	3738      	adds	r7, #56	; 0x38
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000c8 	.word	0x200000c8

08000da0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_DMA_Init+0x48>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <MX_DMA_Init+0x48>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <MX_DMA_Init+0x48>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	200b      	movs	r0, #11
 8000dc4:	f001 fb47 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dc8:	200b      	movs	r0, #11
 8000dca:	f001 fb60 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200c      	movs	r0, #12
 8000dd4:	f001 fb3f 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dd8:	200c      	movs	r0, #12
 8000dda:	f001 fb58 	bl	800248e <HAL_NVIC_EnableIRQ>

}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0310 	and.w	r3, r3, #16
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e1e:	f043 0320 	orr.w	r3, r3, #32
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_GPIO_Init+0xa8>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_GPIO_Init+0xac>)
 8000e68:	f001 ff0c 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_GPIO_Init+0xac>)
 8000e86:	f001 fd81 	bl	800298c <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40011000 	.word	0x40011000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6193      	str	r3, [r2, #24]
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_MspInit+0x60>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_MspInit+0x60>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000

08000f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_ADC_MspInit+0x6c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d121      	bne.n	8000f70 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_ADC_MspInit+0x70>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_ADC_MspInit+0x70>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_ADC_MspInit+0x70>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_ADC_MspInit+0x70>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_ADC_MspInit+0x70>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_ADC_MspInit+0x70>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_ADC_MspInit+0x74>)
 8000f6c:	f001 fd0e 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40012400 	.word	0x40012400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010800 	.word	0x40010800

08000f84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a20      	ldr	r2, [pc, #128]	; (8001020 <HAL_CAN_MspInit+0x9c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d139      	bne.n	8001018 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <HAL_CAN_MspInit+0xa0>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <HAL_CAN_MspInit+0xa0>)
 8000faa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fae:	61d3      	str	r3, [r2, #28]
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_CAN_MspInit+0xa0>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_CAN_MspInit+0xa0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <HAL_CAN_MspInit+0xa0>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_CAN_MspInit+0xa0>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480f      	ldr	r0, [pc, #60]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fea:	f001 fccf 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8001004:	f001 fcc2 	bl	800298c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2014      	movs	r0, #20
 800100e:	f001 fa22 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001012:	2014      	movs	r0, #20
 8001014:	f001 fa3b 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40006400 	.word	0x40006400
 8001024:	40021000 	.word	0x40021000
 8001028:	40010800 	.word	0x40010800

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a3a      	ldr	r2, [pc, #232]	; (8001124 <HAL_TIM_Base_MspInit+0xf8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d134      	bne.n	80010a8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <HAL_TIM_Base_MspInit+0xfc>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a39      	ldr	r2, [pc, #228]	; (8001128 <HAL_TIM_Base_MspInit+0xfc>)
 8001044:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HAL_TIM_Base_MspInit+0xfc>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 8001058:	4a35      	ldr	r2, [pc, #212]	; (8001130 <HAL_TIM_Base_MspInit+0x104>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800105c:	4b33      	ldr	r3, [pc, #204]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 800105e:	2210      	movs	r2, #16
 8001060:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 8001070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001074:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 8001078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800108a:	4828      	ldr	r0, [pc, #160]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 800108c:	f001 fa1a 	bl	80024c4 <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001096:	f7ff ff01 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
 80010a0:	4a22      	ldr	r2, [pc, #136]	; (800112c <HAL_TIM_Base_MspInit+0x100>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010a6:	e038      	b.n	800111a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b0:	d133      	bne.n	800111a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_TIM_Base_MspInit+0xfc>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <HAL_TIM_Base_MspInit+0xfc>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_TIM_Base_MspInit+0xfc>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <HAL_TIM_Base_MspInit+0x10c>)
 80010ce:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 80010d2:	2210      	movs	r2, #16
 80010d4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 80010e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 8001100:	f001 f9e0 	bl	80024c4 <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 800110a:	f7ff fec7 	bl	8000e9c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_TIM_Base_MspInit+0x108>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6253      	str	r3, [r2, #36]	; 0x24
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40012c00 	.word	0x40012c00
 8001128:	40021000 	.word	0x40021000
 800112c:	20000110 	.word	0x20000110
 8001130:	4002001c 	.word	0x4002001c
 8001134:	20000154 	.word	0x20000154
 8001138:	40020008 	.word	0x40020008

0800113c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <HAL_TIM_MspPostInit+0xbc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d119      	bne.n	8001190 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_TIM_MspPostInit+0xc0>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a26      	ldr	r2, [pc, #152]	; (80011fc <HAL_TIM_MspPostInit+0xc0>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_TIM_MspPostInit+0xc0>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2302      	movs	r3, #2
 8001180:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <HAL_TIM_MspPostInit+0xc4>)
 800118a:	f001 fbff 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800118e:	e02f      	b.n	80011f0 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001198:	d12a      	bne.n	80011f0 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_TIM_MspPostInit+0xc0>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_TIM_MspPostInit+0xc0>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_TIM_MspPostInit+0xc0>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <HAL_TIM_MspPostInit+0xc8>)
 80011c8:	f001 fbe0 	bl	800298c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_TIM_MspPostInit+0xcc>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_TIM_MspPostInit+0xcc>)
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	6053      	str	r3, [r2, #4]
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40012c00 	.word	0x40012c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800
 8001204:	40010c00 	.word	0x40010c00
 8001208:	40010000 	.word	0x40010000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 f893 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <DMA1_Channel1_IRQHandler+0x10>)
 8001262:	f001 fa5f 	bl	8002724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000154 	.word	0x20000154

08001270 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA1_Channel2_IRQHandler+0x10>)
 8001276:	f001 fa55 	bl	8002724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000110 	.word	0x20000110

08001284 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800128a:	f000 fde1 	bl	8001e50 <HAL_CAN_IRQHandler>
	    CanReceive=1;

  } */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000058 	.word	0x20000058

08001298 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <Reset_Handler>:
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <LoopFillZerobss+0x12>)
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <LoopFillZerobss+0x16>)
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <LoopFillZerobss+0x1a>)
 80012aa:	2300      	movs	r3, #0
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:
 80012ae:	58d4      	ldr	r4, [r2, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:
 80012b4:	18c4      	adds	r4, r0, r3
 80012b6:	428c      	cmp	r4, r1
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopFillZerobss+0x1e>)
 80012bc:	4c0a      	ldr	r4, [pc, #40]	; (80012e8 <LoopFillZerobss+0x22>)
 80012be:	2300      	movs	r3, #0
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:
 80012c6:	42a2      	cmp	r2, r4
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>
 80012ca:	f7ff ffe5 	bl	8001298 <SystemInit>
 80012ce:	f003 fa33 	bl	8004738 <__libc_init_array>
 80012d2:	f7ff fa85 	bl	80007e0 <main>
 80012d6:	4770      	bx	lr
 80012d8:	20000000 	.word	0x20000000
 80012dc:	2000000c 	.word	0x2000000c
 80012e0:	080047d0 	.word	0x080047d0
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	20001190 	.word	0x20001190

080012ec <ADC1_2_IRQHandler>:
 80012ec:	e7fe      	b.n	80012ec <ADC1_2_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x28>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f001 f89d 	bl	8002440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	200f      	movs	r0, #15
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fdcc 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f001 f8b5 	bl	80024aa <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f001 f87d 	bl	8002456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000000 	.word	0x20000000
 8001374:	20000008 	.word	0x20000008
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x1c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x20>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_IncTick+0x20>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000008 	.word	0x20000008
 800139c:	2000118c 	.word	0x2000118c

080013a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_GetTick+0x10>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	2000118c 	.word	0x2000118c

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff fff0 	bl	80013a0 <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffe0 	bl	80013a0 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008

080013fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0be      	b.n	800159c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	2b00      	cmp	r3, #0
 800142a:	d109      	bne.n	8001440 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fd66 	bl	8000f0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f9ab 	bl	800179c <ADC_ConversionStop_Disable>
 8001446:	4603      	mov	r3, r0
 8001448:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	f040 8099 	bne.w	800158a <HAL_ADC_Init+0x18e>
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 8095 	bne.w	800158a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001468:	f023 0302 	bic.w	r3, r3, #2
 800146c:	f043 0202 	orr.w	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800147c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7b1b      	ldrb	r3, [r3, #12]
 8001482:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001484:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	4313      	orrs	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001494:	d003      	beq.n	800149e <HAL_ADC_Init+0xa2>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <HAL_ADC_Init+0xa8>
 800149e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a2:	e000      	b.n	80014a6 <HAL_ADC_Init+0xaa>
 80014a4:	2300      	movs	r3, #0
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7d1b      	ldrb	r3, [r3, #20]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d119      	bne.n	80014e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7b1b      	ldrb	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	035a      	lsls	r2, r3, #13
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	e00b      	b.n	80014e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	f043 0220 	orr.w	r2, r3, #32
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_ADC_Init+0x1a8>)
 8001504:	4013      	ands	r3, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	430b      	orrs	r3, r1
 800150e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001518:	d003      	beq.n	8001522 <HAL_ADC_Init+0x126>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d104      	bne.n	800152c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	3b01      	subs	r3, #1
 8001528:	051b      	lsls	r3, r3, #20
 800152a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	430a      	orrs	r2, r1
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_ADC_Init+0x1ac>)
 8001548:	4013      	ands	r3, r2
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	429a      	cmp	r2, r3
 800154e:	d10b      	bne.n	8001568 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f023 0303 	bic.w	r3, r3, #3
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001566:	e018      	b.n	800159a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	f023 0312 	bic.w	r3, r3, #18
 8001570:	f043 0210 	orr.w	r2, r3, #16
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001588:	e007      	b.n	800159a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	f043 0210 	orr.w	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800159a:	7dfb      	ldrb	r3, [r7, #23]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	ffe1f7fd 	.word	0xffe1f7fd
 80015a8:	ff1f0efe 	.word	0xff1f0efe

080015ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x20>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e0dc      	b.n	8001786 <HAL_ADC_ConfigChannel+0x1da>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b06      	cmp	r3, #6
 80015da:	d81c      	bhi.n	8001616 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b05      	subs	r3, #5
 80015ee:	221f      	movs	r2, #31
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4019      	ands	r1, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b05      	subs	r3, #5
 8001608:	fa00 f203 	lsl.w	r2, r0, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	635a      	str	r2, [r3, #52]	; 0x34
 8001614:	e03c      	b.n	8001690 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d81c      	bhi.n	8001658 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3b23      	subs	r3, #35	; 0x23
 8001630:	221f      	movs	r2, #31
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	4019      	ands	r1, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3b23      	subs	r3, #35	; 0x23
 800164a:	fa00 f203 	lsl.w	r2, r0, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
 8001656:	e01b      	b.n	8001690 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	3b41      	subs	r3, #65	; 0x41
 800166a:	221f      	movs	r2, #31
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	4019      	ands	r1, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	3b41      	subs	r3, #65	; 0x41
 8001684:	fa00 f203 	lsl.w	r2, r0, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b09      	cmp	r3, #9
 8001696:	d91c      	bls.n	80016d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68d9      	ldr	r1, [r3, #12]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	3b1e      	subs	r3, #30
 80016aa:	2207      	movs	r2, #7
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4019      	ands	r1, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	6898      	ldr	r0, [r3, #8]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	3b1e      	subs	r3, #30
 80016c4:	fa00 f203 	lsl.w	r2, r0, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	e019      	b.n	8001706 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6919      	ldr	r1, [r3, #16]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	2207      	movs	r2, #7
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4019      	ands	r1, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6898      	ldr	r0, [r3, #8]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	fa00 f203 	lsl.w	r2, r0, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b10      	cmp	r3, #16
 800170c:	d003      	beq.n	8001716 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001712:	2b11      	cmp	r3, #17
 8001714:	d132      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_ADC_ConfigChannel+0x1e4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d125      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d126      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800173c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b10      	cmp	r3, #16
 8001744:	d11a      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_ADC_ConfigChannel+0x1e8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <HAL_ADC_ConfigChannel+0x1ec>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9a      	lsrs	r2, r3, #18
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800175c:	e002      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	3b01      	subs	r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f9      	bne.n	800175e <HAL_ADC_ConfigChannel+0x1b2>
 800176a:	e007      	b.n	800177c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40012400 	.word	0x40012400
 8001794:	20000000 	.word	0x20000000
 8001798:	431bde83 	.word	0x431bde83

0800179c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d12e      	bne.n	8001814 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017c6:	f7ff fdeb 	bl	80013a0 <HAL_GetTick>
 80017ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017cc:	e01b      	b.n	8001806 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017ce:	f7ff fde7 	bl	80013a0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d914      	bls.n	8001806 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d10d      	bne.n	8001806 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	f043 0210 	orr.w	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e007      	b.n	8001816 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d0dc      	beq.n	80017ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0ed      	b.n	8001a0c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fba1 	bl	8000f84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001852:	f7ff fda5 	bl	80013a0 <HAL_GetTick>
 8001856:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001858:	e012      	b.n	8001880 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800185a:	f7ff fda1 	bl	80013a0 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b0a      	cmp	r3, #10
 8001866:	d90b      	bls.n	8001880 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2205      	movs	r2, #5
 8001878:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0c5      	b.n	8001a0c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0e5      	beq.n	800185a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0202 	bic.w	r2, r2, #2
 800189c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800189e:	f7ff fd7f 	bl	80013a0 <HAL_GetTick>
 80018a2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018a4:	e012      	b.n	80018cc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018a6:	f7ff fd7b 	bl	80013a0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b0a      	cmp	r3, #10
 80018b2:	d90b      	bls.n	80018cc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2205      	movs	r2, #5
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e09f      	b.n	8001a0c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1e5      	bne.n	80018a6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7e1b      	ldrb	r3, [r3, #24]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d108      	bne.n	80018f4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e007      	b.n	8001904 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001902:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7e5b      	ldrb	r3, [r3, #25]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d108      	bne.n	800191e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e007      	b.n	800192e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7e9b      	ldrb	r3, [r3, #26]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d108      	bne.n	8001948 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0220 	orr.w	r2, r2, #32
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e007      	b.n	8001958 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0220 	bic.w	r2, r2, #32
 8001956:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7edb      	ldrb	r3, [r3, #27]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d108      	bne.n	8001972 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0210 	bic.w	r2, r2, #16
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e007      	b.n	8001982 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0210 	orr.w	r2, r2, #16
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7f1b      	ldrb	r3, [r3, #28]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d108      	bne.n	800199c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0208 	orr.w	r2, r2, #8
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e007      	b.n	80019ac <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0208 	bic.w	r2, r2, #8
 80019aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7f5b      	ldrb	r3, [r3, #29]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0204 	orr.w	r2, r2, #4
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e007      	b.n	80019d6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0204 	bic.w	r2, r2, #4
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	ea42 0103 	orr.w	r1, r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	1e5a      	subs	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a2c:	7cfb      	ldrb	r3, [r7, #19]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d003      	beq.n	8001a3a <HAL_CAN_ConfigFilter+0x26>
 8001a32:	7cfb      	ldrb	r3, [r7, #19]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	f040 80aa 	bne.w	8001b8e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	2201      	movs	r2, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	401a      	ands	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d123      	bne.n	8001abc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3248      	adds	r2, #72	; 0x48
 8001a9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ab0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab2:	6979      	ldr	r1, [r7, #20]
 8001ab4:	3348      	adds	r3, #72	; 0x48
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d122      	bne.n	8001b0a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ae4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3248      	adds	r2, #72	; 0x48
 8001aea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001afe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b00:	6979      	ldr	r1, [r7, #20]
 8001b02:	3348      	adds	r3, #72	; 0x48
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b24:	e007      	b.n	8001b36 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b50:	e007      	b.n	8001b62 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b80:	f023 0201 	bic.w	r2, r3, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e006      	b.n	8001b9c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d12e      	bne.n	8001c18 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bd2:	f7ff fbe5 	bl	80013a0 <HAL_GetTick>
 8001bd6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bd8:	e012      	b.n	8001c00 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bda:	f7ff fbe1 	bl	80013a0 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b0a      	cmp	r3, #10
 8001be6:	d90b      	bls.n	8001c00 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e012      	b.n	8001c26 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e5      	bne.n	8001bda <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e006      	b.n	8001c26 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b087      	sub	sp, #28
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c42:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d003      	beq.n	8001c52 <HAL_CAN_GetRxMessage+0x24>
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	f040 80f3 	bne.w	8001e38 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10e      	bne.n	8001c76 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0e7      	b.n	8001e46 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0d8      	b.n	8001e46 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	331b      	adds	r3, #27
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	4413      	add	r3, r2
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0204 	and.w	r2, r3, #4
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	331b      	adds	r3, #27
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0d5b      	lsrs	r3, r3, #21
 8001cc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	331b      	adds	r3, #27
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	08db      	lsrs	r3, r3, #3
 8001cdc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	331b      	adds	r3, #27
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4413      	add	r3, r2
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0202 	and.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	331b      	adds	r3, #27
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4413      	add	r3, r2
 8001d06:	3304      	adds	r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 020f 	and.w	r2, r3, #15
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	331b      	adds	r3, #27
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	331b      	adds	r3, #27
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0a1a      	lsrs	r2, r3, #8
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0c1a      	lsrs	r2, r3, #16
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	3302      	adds	r3, #2
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0e1a      	lsrs	r2, r3, #24
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3303      	adds	r3, #3
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	3304      	adds	r3, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0a1a      	lsrs	r2, r3, #8
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	3305      	adds	r3, #5
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0c1a      	lsrs	r2, r3, #16
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3306      	adds	r3, #6
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0e1a      	lsrs	r2, r3, #24
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3307      	adds	r3, #7
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d108      	bne.n	8001e24 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	e007      	b.n	8001e34 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0220 	orr.w	r2, r2, #32
 8001e32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e006      	b.n	8001e46 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
  }
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d07c      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f983 	bl	80021be <HAL_CAN_TxMailbox0CompleteCallback>
 8001eb8:	e016      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ecc:	e00c      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee0:	e002      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f986 	bl	80021f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f962 	bl	80021d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f0c:	e016      	b.n	8001f3c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	e00c      	b.n	8001f3c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e002      	b.n	8001f3c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f965 	bl	8002206 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d024      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f941 	bl	80021e2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f60:	e016      	b.n	8001f90 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
 8001f74:	e00c      	b.n	8001f90 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	e002      	b.n	8001f90 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f944 	bl	8002218 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2208      	movs	r2, #8
 8001fce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f933 	bl	800223c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f91b 	bl	800222a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2210      	movs	r2, #16
 8002016:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2208      	movs	r2, #8
 8002032:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f913 	bl	8002260 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8fb 	bl	800224e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2210      	movs	r2, #16
 8002072:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f8fc 	bl	8002272 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00b      	beq.n	800209c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2208      	movs	r2, #8
 8002094:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8f4 	bl	8002284 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d07b      	beq.n	800219e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d072      	beq.n	8002196 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210a:	2b00      	cmp	r3, #0
 800210c:	d043      	beq.n	8002196 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	d03e      	beq.n	8002196 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800211e:	2b60      	cmp	r3, #96	; 0x60
 8002120:	d02b      	beq.n	800217a <HAL_CAN_IRQHandler+0x32a>
 8002122:	2b60      	cmp	r3, #96	; 0x60
 8002124:	d82e      	bhi.n	8002184 <HAL_CAN_IRQHandler+0x334>
 8002126:	2b50      	cmp	r3, #80	; 0x50
 8002128:	d022      	beq.n	8002170 <HAL_CAN_IRQHandler+0x320>
 800212a:	2b50      	cmp	r3, #80	; 0x50
 800212c:	d82a      	bhi.n	8002184 <HAL_CAN_IRQHandler+0x334>
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	d019      	beq.n	8002166 <HAL_CAN_IRQHandler+0x316>
 8002132:	2b40      	cmp	r3, #64	; 0x40
 8002134:	d826      	bhi.n	8002184 <HAL_CAN_IRQHandler+0x334>
 8002136:	2b30      	cmp	r3, #48	; 0x30
 8002138:	d010      	beq.n	800215c <HAL_CAN_IRQHandler+0x30c>
 800213a:	2b30      	cmp	r3, #48	; 0x30
 800213c:	d822      	bhi.n	8002184 <HAL_CAN_IRQHandler+0x334>
 800213e:	2b10      	cmp	r3, #16
 8002140:	d002      	beq.n	8002148 <HAL_CAN_IRQHandler+0x2f8>
 8002142:	2b20      	cmp	r3, #32
 8002144:	d005      	beq.n	8002152 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002146:	e01d      	b.n	8002184 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002150:	e019      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800215a:	e014      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	f043 0320 	orr.w	r3, r3, #32
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002164:	e00f      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800216e:	e00a      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002178:	e005      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002182:	e000      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            break;
 8002184:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002194:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2204      	movs	r2, #4
 800219c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f870 	bl	8002296 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4906      	ldr	r1, [pc, #24]	; (8002340 <__NVIC_EnableIRQ+0x34>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d301      	bcc.n	8002412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2301      	movs	r3, #1
 8002410:	e00f      	b.n	8002432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SysTick_Config+0x40>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241a:	210f      	movs	r1, #15
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f7ff ff90 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <SysTick_Config+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <SysTick_Config+0x40>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000e010 	.word	0xe000e010

08002440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff2d 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff42 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff90 	bl	8002398 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5f 	bl	8002344 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff35 	bl	800230c <__NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffa2 	bl	80023fc <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e043      	b.n	8002562 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_DMA_Init+0xa8>)
 80024e2:	4413      	add	r3, r2
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_DMA_Init+0xac>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	009a      	lsls	r2, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_DMA_Init+0xb0>)
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800250e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002512:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	bffdfff8 	.word	0xbffdfff8
 8002570:	cccccccd 	.word	0xcccccccd
 8002574:	40020000 	.word	0x40020000

08002578 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Start_IT+0x20>
 8002594:	2302      	movs	r3, #2
 8002596:	e04a      	b.n	800262e <HAL_DMA_Start_IT+0xb6>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d13a      	bne.n	8002620 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f9ae 	bl	8002930 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 020e 	orr.w	r2, r2, #14
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e00f      	b.n	800260e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0204 	bic.w	r2, r2, #4
 80025fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 020a 	orr.w	r2, r2, #10
 800260c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e005      	b.n	800262c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800262c:	7dfb      	ldrb	r3, [r7, #23]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800264a:	2b02      	cmp	r3, #2
 800264c:	d005      	beq.n	800265a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	e051      	b.n	80026fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 020e 	bic.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a22      	ldr	r2, [pc, #136]	; (8002708 <HAL_DMA_Abort_IT+0xd0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d029      	beq.n	80026d8 <HAL_DMA_Abort_IT+0xa0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <HAL_DMA_Abort_IT+0xd4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d022      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x9c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_DMA_Abort_IT+0xd8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d01a      	beq.n	80026ce <HAL_DMA_Abort_IT+0x96>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_DMA_Abort_IT+0xdc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d012      	beq.n	80026c8 <HAL_DMA_Abort_IT+0x90>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_DMA_Abort_IT+0xe0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00a      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x8a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_DMA_Abort_IT+0xe4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d102      	bne.n	80026bc <HAL_DMA_Abort_IT+0x84>
 80026b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ba:	e00e      	b.n	80026da <HAL_DMA_Abort_IT+0xa2>
 80026bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c0:	e00b      	b.n	80026da <HAL_DMA_Abort_IT+0xa2>
 80026c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c6:	e008      	b.n	80026da <HAL_DMA_Abort_IT+0xa2>
 80026c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026cc:	e005      	b.n	80026da <HAL_DMA_Abort_IT+0xa2>
 80026ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d2:	e002      	b.n	80026da <HAL_DMA_Abort_IT+0xa2>
 80026d4:	2310      	movs	r3, #16
 80026d6:	e000      	b.n	80026da <HAL_DMA_Abort_IT+0xa2>
 80026d8:	2301      	movs	r3, #1
 80026da:	4a11      	ldr	r2, [pc, #68]	; (8002720 <HAL_DMA_Abort_IT+0xe8>)
 80026dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
    } 
  }
  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40020008 	.word	0x40020008
 800270c:	4002001c 	.word	0x4002001c
 8002710:	40020030 	.word	0x40020030
 8002714:	40020044 	.word	0x40020044
 8002718:	40020058 	.word	0x40020058
 800271c:	4002006c 	.word	0x4002006c
 8002720:	40020000 	.word	0x40020000

08002724 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2204      	movs	r2, #4
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d04f      	beq.n	80027ec <HAL_DMA_IRQHandler+0xc8>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d04a      	beq.n	80027ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0204 	bic.w	r2, r2, #4
 8002772:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a66      	ldr	r2, [pc, #408]	; (8002914 <HAL_DMA_IRQHandler+0x1f0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d029      	beq.n	80027d2 <HAL_DMA_IRQHandler+0xae>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a65      	ldr	r2, [pc, #404]	; (8002918 <HAL_DMA_IRQHandler+0x1f4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d022      	beq.n	80027ce <HAL_DMA_IRQHandler+0xaa>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a63      	ldr	r2, [pc, #396]	; (800291c <HAL_DMA_IRQHandler+0x1f8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01a      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xa4>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a62      	ldr	r2, [pc, #392]	; (8002920 <HAL_DMA_IRQHandler+0x1fc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d012      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x9e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a60      	ldr	r2, [pc, #384]	; (8002924 <HAL_DMA_IRQHandler+0x200>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00a      	beq.n	80027bc <HAL_DMA_IRQHandler+0x98>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5f      	ldr	r2, [pc, #380]	; (8002928 <HAL_DMA_IRQHandler+0x204>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d102      	bne.n	80027b6 <HAL_DMA_IRQHandler+0x92>
 80027b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027b4:	e00e      	b.n	80027d4 <HAL_DMA_IRQHandler+0xb0>
 80027b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027ba:	e00b      	b.n	80027d4 <HAL_DMA_IRQHandler+0xb0>
 80027bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027c0:	e008      	b.n	80027d4 <HAL_DMA_IRQHandler+0xb0>
 80027c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027c6:	e005      	b.n	80027d4 <HAL_DMA_IRQHandler+0xb0>
 80027c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027cc:	e002      	b.n	80027d4 <HAL_DMA_IRQHandler+0xb0>
 80027ce:	2340      	movs	r3, #64	; 0x40
 80027d0:	e000      	b.n	80027d4 <HAL_DMA_IRQHandler+0xb0>
 80027d2:	2304      	movs	r3, #4
 80027d4:	4a55      	ldr	r2, [pc, #340]	; (800292c <HAL_DMA_IRQHandler+0x208>)
 80027d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8094 	beq.w	800290a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80027ea:	e08e      	b.n	800290a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2202      	movs	r2, #2
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d056      	beq.n	80028aa <HAL_DMA_IRQHandler+0x186>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d051      	beq.n	80028aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 020a 	bic.w	r2, r2, #10
 8002822:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_DMA_IRQHandler+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d029      	beq.n	800288a <HAL_DMA_IRQHandler+0x166>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a37      	ldr	r2, [pc, #220]	; (8002918 <HAL_DMA_IRQHandler+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_DMA_IRQHandler+0x162>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a35      	ldr	r2, [pc, #212]	; (800291c <HAL_DMA_IRQHandler+0x1f8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01a      	beq.n	8002880 <HAL_DMA_IRQHandler+0x15c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a34      	ldr	r2, [pc, #208]	; (8002920 <HAL_DMA_IRQHandler+0x1fc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d012      	beq.n	800287a <HAL_DMA_IRQHandler+0x156>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a32      	ldr	r2, [pc, #200]	; (8002924 <HAL_DMA_IRQHandler+0x200>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00a      	beq.n	8002874 <HAL_DMA_IRQHandler+0x150>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_DMA_IRQHandler+0x204>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d102      	bne.n	800286e <HAL_DMA_IRQHandler+0x14a>
 8002868:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800286c:	e00e      	b.n	800288c <HAL_DMA_IRQHandler+0x168>
 800286e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002872:	e00b      	b.n	800288c <HAL_DMA_IRQHandler+0x168>
 8002874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002878:	e008      	b.n	800288c <HAL_DMA_IRQHandler+0x168>
 800287a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287e:	e005      	b.n	800288c <HAL_DMA_IRQHandler+0x168>
 8002880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002884:	e002      	b.n	800288c <HAL_DMA_IRQHandler+0x168>
 8002886:	2320      	movs	r3, #32
 8002888:	e000      	b.n	800288c <HAL_DMA_IRQHandler+0x168>
 800288a:	2302      	movs	r3, #2
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_DMA_IRQHandler+0x208>)
 800288e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	2b00      	cmp	r3, #0
 800289e:	d034      	beq.n	800290a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028a8:	e02f      	b.n	800290a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2208      	movs	r2, #8
 80028b0:	409a      	lsls	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d028      	beq.n	800290c <HAL_DMA_IRQHandler+0x1e8>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d023      	beq.n	800290c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 020e 	bic.w	r2, r2, #14
 80028d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
    }
  }
  return;
 800290a:	bf00      	nop
 800290c:	bf00      	nop
}
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40020008 	.word	0x40020008
 8002918:	4002001c 	.word	0x4002001c
 800291c:	40020030 	.word	0x40020030
 8002920:	40020044 	.word	0x40020044
 8002924:	40020058 	.word	0x40020058
 8002928:	4002006c 	.word	0x4002006c
 800292c:	40020000 	.word	0x40020000

08002930 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	2101      	movs	r1, #1
 8002948:	fa01 f202 	lsl.w	r2, r1, r2
 800294c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b10      	cmp	r3, #16
 800295c:	d108      	bne.n	8002970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800296e:	e007      	b.n	8002980 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
	...

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b08b      	sub	sp, #44	; 0x2c
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299e:	e161      	b.n	8002c64 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029a0:	2201      	movs	r2, #1
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	f040 8150 	bne.w	8002c5e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a97      	ldr	r2, [pc, #604]	; (8002c20 <HAL_GPIO_Init+0x294>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d05e      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029c8:	4a95      	ldr	r2, [pc, #596]	; (8002c20 <HAL_GPIO_Init+0x294>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d875      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029ce:	4a95      	ldr	r2, [pc, #596]	; (8002c24 <HAL_GPIO_Init+0x298>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d058      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029d4:	4a93      	ldr	r2, [pc, #588]	; (8002c24 <HAL_GPIO_Init+0x298>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d86f      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029da:	4a93      	ldr	r2, [pc, #588]	; (8002c28 <HAL_GPIO_Init+0x29c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d052      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029e0:	4a91      	ldr	r2, [pc, #580]	; (8002c28 <HAL_GPIO_Init+0x29c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d869      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029e6:	4a91      	ldr	r2, [pc, #580]	; (8002c2c <HAL_GPIO_Init+0x2a0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d04c      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029ec:	4a8f      	ldr	r2, [pc, #572]	; (8002c2c <HAL_GPIO_Init+0x2a0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d863      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029f2:	4a8f      	ldr	r2, [pc, #572]	; (8002c30 <HAL_GPIO_Init+0x2a4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d046      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029f8:	4a8d      	ldr	r2, [pc, #564]	; (8002c30 <HAL_GPIO_Init+0x2a4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d85d      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029fe:	2b12      	cmp	r3, #18
 8002a00:	d82a      	bhi.n	8002a58 <HAL_GPIO_Init+0xcc>
 8002a02:	2b12      	cmp	r3, #18
 8002a04:	d859      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <HAL_GPIO_Init+0x80>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a87 	.word	0x08002a87
 8002a10:	08002a61 	.word	0x08002a61
 8002a14:	08002a73 	.word	0x08002a73
 8002a18:	08002ab5 	.word	0x08002ab5
 8002a1c:	08002abb 	.word	0x08002abb
 8002a20:	08002abb 	.word	0x08002abb
 8002a24:	08002abb 	.word	0x08002abb
 8002a28:	08002abb 	.word	0x08002abb
 8002a2c:	08002abb 	.word	0x08002abb
 8002a30:	08002abb 	.word	0x08002abb
 8002a34:	08002abb 	.word	0x08002abb
 8002a38:	08002abb 	.word	0x08002abb
 8002a3c:	08002abb 	.word	0x08002abb
 8002a40:	08002abb 	.word	0x08002abb
 8002a44:	08002abb 	.word	0x08002abb
 8002a48:	08002abb 	.word	0x08002abb
 8002a4c:	08002abb 	.word	0x08002abb
 8002a50:	08002a69 	.word	0x08002a69
 8002a54:	08002a7d 	.word	0x08002a7d
 8002a58:	4a76      	ldr	r2, [pc, #472]	; (8002c34 <HAL_GPIO_Init+0x2a8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a5e:	e02c      	b.n	8002aba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	623b      	str	r3, [r7, #32]
          break;
 8002a66:	e029      	b.n	8002abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	623b      	str	r3, [r7, #32]
          break;
 8002a70:	e024      	b.n	8002abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	3308      	adds	r3, #8
 8002a78:	623b      	str	r3, [r7, #32]
          break;
 8002a7a:	e01f      	b.n	8002abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	330c      	adds	r3, #12
 8002a82:	623b      	str	r3, [r7, #32]
          break;
 8002a84:	e01a      	b.n	8002abc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	623b      	str	r3, [r7, #32]
          break;
 8002a92:	e013      	b.n	8002abc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	611a      	str	r2, [r3, #16]
          break;
 8002aa6:	e009      	b.n	8002abc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	615a      	str	r2, [r3, #20]
          break;
 8002ab2:	e003      	b.n	8002abc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
          break;
 8002ab8:	e000      	b.n	8002abc <HAL_GPIO_Init+0x130>
          break;
 8002aba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2bff      	cmp	r3, #255	; 0xff
 8002ac0:	d801      	bhi.n	8002ac6 <HAL_GPIO_Init+0x13a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	e001      	b.n	8002aca <HAL_GPIO_Init+0x13e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2bff      	cmp	r3, #255	; 0xff
 8002ad0:	d802      	bhi.n	8002ad8 <HAL_GPIO_Init+0x14c>
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	e002      	b.n	8002ade <HAL_GPIO_Init+0x152>
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	3b08      	subs	r3, #8
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	210f      	movs	r1, #15
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	401a      	ands	r2, r3
 8002af0:	6a39      	ldr	r1, [r7, #32]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	431a      	orrs	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80a9 	beq.w	8002c5e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b0c:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <HAL_GPIO_Init+0x2ac>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	4a49      	ldr	r2, [pc, #292]	; (8002c38 <HAL_GPIO_Init+0x2ac>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6193      	str	r3, [r2, #24]
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_GPIO_Init+0x2ac>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b24:	4a45      	ldr	r2, [pc, #276]	; (8002c3c <HAL_GPIO_Init+0x2b0>)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a3d      	ldr	r2, [pc, #244]	; (8002c40 <HAL_GPIO_Init+0x2b4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00d      	beq.n	8002b6c <HAL_GPIO_Init+0x1e0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a3c      	ldr	r2, [pc, #240]	; (8002c44 <HAL_GPIO_Init+0x2b8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <HAL_GPIO_Init+0x1dc>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <HAL_GPIO_Init+0x2bc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_GPIO_Init+0x1d8>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e004      	b.n	8002b6e <HAL_GPIO_Init+0x1e2>
 8002b64:	2303      	movs	r3, #3
 8002b66:	e002      	b.n	8002b6e <HAL_GPIO_Init+0x1e2>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_GPIO_Init+0x1e2>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b70:	f002 0203 	and.w	r2, r2, #3
 8002b74:	0092      	lsls	r2, r2, #2
 8002b76:	4093      	lsls	r3, r2
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b7e:	492f      	ldr	r1, [pc, #188]	; (8002c3c <HAL_GPIO_Init+0x2b0>)
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d006      	beq.n	8002ba6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	492b      	ldr	r1, [pc, #172]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ba6:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	4927      	ldr	r1, [pc, #156]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc0:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	4921      	ldr	r1, [pc, #132]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bce:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	491d      	ldr	r1, [pc, #116]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4917      	ldr	r1, [pc, #92]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4913      	ldr	r1, [pc, #76]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01f      	beq.n	8002c50 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	490d      	ldr	r1, [pc, #52]	; (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
 8002c1c:	e01f      	b.n	8002c5e <HAL_GPIO_Init+0x2d2>
 8002c1e:	bf00      	nop
 8002c20:	10320000 	.word	0x10320000
 8002c24:	10310000 	.word	0x10310000
 8002c28:	10220000 	.word	0x10220000
 8002c2c:	10210000 	.word	0x10210000
 8002c30:	10120000 	.word	0x10120000
 8002c34:	10110000 	.word	0x10110000
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40010800 	.word	0x40010800
 8002c44:	40010c00 	.word	0x40010c00
 8002c48:	40011000 	.word	0x40011000
 8002c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_GPIO_Init+0x2f4>)
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	4909      	ldr	r1, [pc, #36]	; (8002c80 <HAL_GPIO_Init+0x2f4>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	3301      	adds	r3, #1
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f47f ae96 	bne.w	80029a0 <HAL_GPIO_Init+0x14>
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	372c      	adds	r7, #44	; 0x2c
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	40010400 	.word	0x40010400

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ca0:	e003      	b.n	8002caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e272      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8087 	beq.w	8002de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd4:	4b92      	ldr	r3, [pc, #584]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d00c      	beq.n	8002cfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ce0:	4b8f      	ldr	r3, [pc, #572]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d112      	bne.n	8002d12 <HAL_RCC_OscConfig+0x5e>
 8002cec:	4b8c      	ldr	r3, [pc, #560]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf8:	d10b      	bne.n	8002d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfa:	4b89      	ldr	r3, [pc, #548]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d06c      	beq.n	8002de0 <HAL_RCC_OscConfig+0x12c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d168      	bne.n	8002de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e24c      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1a:	d106      	bne.n	8002d2a <HAL_RCC_OscConfig+0x76>
 8002d1c:	4b80      	ldr	r3, [pc, #512]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7f      	ldr	r2, [pc, #508]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e02e      	b.n	8002d88 <HAL_RCC_OscConfig+0xd4>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x98>
 8002d32:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a77      	ldr	r2, [pc, #476]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e01d      	b.n	8002d88 <HAL_RCC_OscConfig+0xd4>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0xbc>
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a71      	ldr	r2, [pc, #452]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6e      	ldr	r2, [pc, #440]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0xd4>
 8002d70:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a6a      	ldr	r2, [pc, #424]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a67      	ldr	r2, [pc, #412]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe fb06 	bl	80013a0 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fe fb02 	bl	80013a0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e200      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0xe4>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe faf2 	bl	80013a0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe faee 	bl	80013a0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e1ec      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x10c>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d063      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dee:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dfa:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d11c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x18c>
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d116      	bne.n	8002e40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_RCC_OscConfig+0x176>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e1c0      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4939      	ldr	r1, [pc, #228]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	e03a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d020      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4e:	f7fe faa7 	bl	80013a0 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e56:	f7fe faa3 	bl	80013a0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1a1      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4927      	ldr	r1, [pc, #156]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	e015      	b.n	8002eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fa86 	bl	80013a0 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e98:	f7fe fa82 	bl	80013a0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e180      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03a      	beq.n	8002f38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d019      	beq.n	8002efe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fa66 	bl	80013a0 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed8:	f7fe fa62 	bl	80013a0 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e160      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f000 faa6 	bl	8003448 <RCC_Delay>
 8002efc:	e01c      	b.n	8002f38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_RCC_OscConfig+0x274>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f04:	f7fe fa4c 	bl	80013a0 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0c:	f7fe fa48 	bl	80013a0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d908      	bls.n	8002f2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e146      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	42420000 	.word	0x42420000
 8002f28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	4b92      	ldr	r3, [pc, #584]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e9      	bne.n	8002f0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80a6 	beq.w	8003092 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4a:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]
 8002f62:	4b85      	ldr	r3, [pc, #532]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b82      	ldr	r3, [pc, #520]	; (800317c <HAL_RCC_OscConfig+0x4c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d118      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7e:	4b7f      	ldr	r3, [pc, #508]	; (800317c <HAL_RCC_OscConfig+0x4c8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7e      	ldr	r2, [pc, #504]	; (800317c <HAL_RCC_OscConfig+0x4c8>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fa09 	bl	80013a0 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f92:	f7fe fa05 	bl	80013a0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b64      	cmp	r3, #100	; 0x64
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e103      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	4b75      	ldr	r3, [pc, #468]	; (800317c <HAL_RCC_OscConfig+0x4c8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x312>
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a6e      	ldr	r2, [pc, #440]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6213      	str	r3, [r2, #32]
 8002fc4:	e02d      	b.n	8003022 <HAL_RCC_OscConfig+0x36e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x334>
 8002fce:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4a69      	ldr	r2, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6213      	str	r3, [r2, #32]
 8002fda:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4a66      	ldr	r2, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6213      	str	r3, [r2, #32]
 8002fe6:	e01c      	b.n	8003022 <HAL_RCC_OscConfig+0x36e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b05      	cmp	r3, #5
 8002fee:	d10c      	bne.n	800300a <HAL_RCC_OscConfig+0x356>
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a60      	ldr	r2, [pc, #384]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4a5d      	ldr	r2, [pc, #372]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6213      	str	r3, [r2, #32]
 8003008:	e00b      	b.n	8003022 <HAL_RCC_OscConfig+0x36e>
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	6213      	str	r3, [r2, #32]
 8003016:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	f023 0304 	bic.w	r3, r3, #4
 8003020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d015      	beq.n	8003056 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7fe f9b9 	bl	80013a0 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7fe f9b5 	bl	80013a0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0b1      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ee      	beq.n	8003032 <HAL_RCC_OscConfig+0x37e>
 8003054:	e014      	b.n	8003080 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7fe f9a3 	bl	80013a0 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fe f99f 	bl	80013a0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	; 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e09b      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003074:	4b40      	ldr	r3, [pc, #256]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ee      	bne.n	800305e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003086:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4a3b      	ldr	r2, [pc, #236]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003090:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8087 	beq.w	80031aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800309c:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d061      	beq.n	800316c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d146      	bne.n	800313e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b0:	4b33      	ldr	r3, [pc, #204]	; (8003180 <HAL_RCC_OscConfig+0x4cc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe f973 	bl	80013a0 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe f96f 	bl	80013a0 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e06d      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d108      	bne.n	80030f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4921      	ldr	r1, [pc, #132]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f8:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a19      	ldr	r1, [r3, #32]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	430b      	orrs	r3, r1
 800310a:	491b      	ldr	r1, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x4cc>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe f943 	bl	80013a0 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe f93f 	bl	80013a0 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e03d      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x46a>
 800313c:	e035      	b.n	80031aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_RCC_OscConfig+0x4cc>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe f92c 	bl	80013a0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe f928 	bl	80013a0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e026      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x498>
 800316a:	e01e      	b.n	80031aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e019      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
 8003178:	40021000 	.word	0x40021000
 800317c:	40007000 	.word	0x40007000
 8003180:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x500>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	429a      	cmp	r2, r3
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0d0      	b.n	800336e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031cc:	4b6a      	ldr	r3, [pc, #424]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d910      	bls.n	80031fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b67      	ldr	r3, [pc, #412]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 0207 	bic.w	r2, r3, #7
 80031e2:	4965      	ldr	r1, [pc, #404]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b63      	ldr	r3, [pc, #396]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b59      	ldr	r3, [pc, #356]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a58      	ldr	r2, [pc, #352]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800321e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800322c:	4b53      	ldr	r3, [pc, #332]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a52      	ldr	r2, [pc, #328]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	494d      	ldr	r1, [pc, #308]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d040      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d115      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07f      	b.n	800336e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	4b41      	ldr	r3, [pc, #260]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e073      	b.n	800336e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e06b      	b.n	800336e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003296:	4b39      	ldr	r3, [pc, #228]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f023 0203 	bic.w	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4936      	ldr	r1, [pc, #216]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a8:	f7fe f87a 	bl	80013a0 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b0:	f7fe f876 	bl	80013a0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e053      	b.n	800336e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 020c 	and.w	r2, r3, #12
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d1eb      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d210      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	4922      	ldr	r1, [pc, #136]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e032      	b.n	800336e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4916      	ldr	r1, [pc, #88]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	490e      	ldr	r1, [pc, #56]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003346:	f000 f821 	bl	800338c <HAL_RCC_GetSysClockFreq>
 800334a:	4602      	mov	r2, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	490a      	ldr	r1, [pc, #40]	; (8003380 <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	5ccb      	ldrb	r3, [r1, r3]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_RCC_ClockConfig+0x1cc>)
 8003360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_RCC_ClockConfig+0x1d0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd ffd8 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40022000 	.word	0x40022000
 800337c:	40021000 	.word	0x40021000
 8003380:	080047b8 	.word	0x080047b8
 8003384:	20000000 	.word	0x20000000
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	b490      	push	{r4, r7}
 800338e:	b08a      	sub	sp, #40	; 0x28
 8003390:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_RCC_GetSysClockFreq+0xac>)
 8003394:	1d3c      	adds	r4, r7, #4
 8003396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800339c:	f240 2301 	movw	r3, #513	; 0x201
 80033a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033b6:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_RCC_GetSysClockFreq+0xb0>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x40>
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x46>
 80033ca:	e02b      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ce:	623b      	str	r3, [r7, #32]
      break;
 80033d0:	e02b      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	0c9b      	lsrs	r3, r3, #18
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3328      	adds	r3, #40	; 0x28
 80033dc:	443b      	add	r3, r7
 80033de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_RCC_GetSysClockFreq+0xb0>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	0c5b      	lsrs	r3, r3, #17
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	3328      	adds	r3, #40	; 0x28
 80033fa:	443b      	add	r3, r7
 80033fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003400:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003406:	fb03 f202 	mul.w	r2, r3, r2
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	e004      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	623b      	str	r3, [r7, #32]
      break;
 8003422:	e002      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003426:	623b      	str	r3, [r7, #32]
      break;
 8003428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342a:	6a3b      	ldr	r3, [r7, #32]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3728      	adds	r7, #40	; 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bc90      	pop	{r4, r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	080047a8 	.word	0x080047a8
 800343c:	40021000 	.word	0x40021000
 8003440:	007a1200 	.word	0x007a1200
 8003444:	003d0900 	.word	0x003d0900

08003448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <RCC_Delay+0x34>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <RCC_Delay+0x38>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0a5b      	lsrs	r3, r3, #9
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003464:	bf00      	nop
  }
  while (Delay --);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <RCC_Delay+0x1c>
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	20000000 	.word	0x20000000
 8003480:	10624dd3 	.word	0x10624dd3

08003484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d07d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d118      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d8:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e4:	f7fd ff5c 	bl	80013a0 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	e008      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ec:	f7fd ff58 	bl	80013a0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e06d      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350a:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	429a      	cmp	r2, r3
 8003526:	d027      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003528:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d014      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fd ff27 	bl	80013a0 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fd ff23 	bl	80013a0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e036      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ee      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4917      	ldr	r1, [pc, #92]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	4313      	orrs	r3, r2
 8003588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	490b      	ldr	r1, [pc, #44]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4904      	ldr	r1, [pc, #16]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42420440 	.word	0x42420440

080035f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e041      	b.n	8003686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fd08 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f000 fd3e 	bl	80040b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e041      	b.n	8003724 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f839 	bl	800372c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f000 fcef 	bl	80040b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_TIM_PWM_Start_DMA+0x28>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e022      	b.n	80037ae <HAL_TIM_PWM_Start_DMA+0x6e>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b04      	cmp	r3, #4
 800376c:	d109      	bne.n	8003782 <HAL_TIM_PWM_Start_DMA+0x42>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e015      	b.n	80037ae <HAL_TIM_PWM_Start_DMA+0x6e>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start_DMA+0x5c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e008      	b.n	80037ae <HAL_TIM_PWM_Start_DMA+0x6e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
 80037b4:	e149      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x30a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start_DMA+0x90>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e022      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0xd6>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d109      	bne.n	80037ea <HAL_TIM_PWM_Start_DMA+0xaa>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e015      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0xd6>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d109      	bne.n	8003804 <HAL_TIM_PWM_Start_DMA+0xc4>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e008      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d024      	beq.n	8003864 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start_DMA+0xea>
 8003820:	887b      	ldrh	r3, [r7, #2]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e10f      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x30a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_TIM_PWM_Start_DMA+0xfa>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003838:	e016      	b.n	8003868 <HAL_TIM_PWM_Start_DMA+0x128>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d104      	bne.n	800384a <HAL_TIM_PWM_Start_DMA+0x10a>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003848:	e00e      	b.n	8003868 <HAL_TIM_PWM_Start_DMA+0x128>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start_DMA+0x11a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003858:	e006      	b.n	8003868 <HAL_TIM_PWM_Start_DMA+0x128>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003862:	e001      	b.n	8003868 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0f0      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x30a>
  }

  switch (Channel)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	f200 80ae 	bhi.w	80039cc <HAL_TIM_PWM_Start_DMA+0x28c>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080039cd 	.word	0x080039cd
 8003880:	080039cd 	.word	0x080039cd
 8003884:	080039cd 	.word	0x080039cd
 8003888:	080038f5 	.word	0x080038f5
 800388c:	080039cd 	.word	0x080039cd
 8003890:	080039cd 	.word	0x080039cd
 8003894:	080039cd 	.word	0x080039cd
 8003898:	0800393d 	.word	0x0800393d
 800389c:	080039cd 	.word	0x080039cd
 80038a0:	080039cd 	.word	0x080039cd
 80038a4:	080039cd 	.word	0x080039cd
 80038a8:	08003985 	.word	0x08003985
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	4a68      	ldr	r2, [pc, #416]	; (8003a54 <HAL_TIM_PWM_Start_DMA+0x314>)
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	4a67      	ldr	r2, [pc, #412]	; (8003a58 <HAL_TIM_PWM_Start_DMA+0x318>)
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	4a66      	ldr	r2, [pc, #408]	; (8003a5c <HAL_TIM_PWM_Start_DMA+0x31c>)
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3334      	adds	r3, #52	; 0x34
 80038d0:	461a      	mov	r2, r3
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	f7fe fe50 	bl	8002578 <HAL_DMA_Start_IT>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0b3      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x30a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f0:	60da      	str	r2, [r3, #12]
      break;
 80038f2:	e06c      	b.n	80039ce <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	4a56      	ldr	r2, [pc, #344]	; (8003a54 <HAL_TIM_PWM_Start_DMA+0x314>)
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	4a55      	ldr	r2, [pc, #340]	; (8003a58 <HAL_TIM_PWM_Start_DMA+0x318>)
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	4a54      	ldr	r2, [pc, #336]	; (8003a5c <HAL_TIM_PWM_Start_DMA+0x31c>)
 800390a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3338      	adds	r3, #56	; 0x38
 8003918:	461a      	mov	r2, r3
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	f7fe fe2c 	bl	8002578 <HAL_DMA_Start_IT>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e08f      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003938:	60da      	str	r2, [r3, #12]
      break;
 800393a:	e048      	b.n	80039ce <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	4a44      	ldr	r2, [pc, #272]	; (8003a54 <HAL_TIM_PWM_Start_DMA+0x314>)
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	4a43      	ldr	r2, [pc, #268]	; (8003a58 <HAL_TIM_PWM_Start_DMA+0x318>)
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	4a42      	ldr	r2, [pc, #264]	; (8003a5c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003952:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	333c      	adds	r3, #60	; 0x3c
 8003960:	461a      	mov	r2, r3
 8003962:	887b      	ldrh	r3, [r7, #2]
 8003964:	f7fe fe08 	bl	8002578 <HAL_DMA_Start_IT>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06b      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003980:	60da      	str	r2, [r3, #12]
      break;
 8003982:	e024      	b.n	80039ce <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	4a32      	ldr	r2, [pc, #200]	; (8003a54 <HAL_TIM_PWM_Start_DMA+0x314>)
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	4a31      	ldr	r2, [pc, #196]	; (8003a58 <HAL_TIM_PWM_Start_DMA+0x318>)
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	4a30      	ldr	r2, [pc, #192]	; (8003a5c <HAL_TIM_PWM_Start_DMA+0x31c>)
 800399a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3340      	adds	r3, #64	; 0x40
 80039a8:	461a      	mov	r2, r3
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	f7fe fde4 	bl	8002578 <HAL_DMA_Start_IT>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e047      	b.n	8003a4a <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039c8:	60da      	str	r2, [r3, #12]
      break;
 80039ca:	e000      	b.n	80039ce <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80039cc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fde0 	bl	800459c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <HAL_TIM_PWM_Start_DMA+0x320>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d107      	bne.n	80039f6 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_TIM_PWM_Start_DMA+0x320>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_TIM_PWM_Start_DMA+0x2d4>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_PWM_Start_DMA+0x2d4>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_TIM_PWM_Start_DMA+0x2f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d010      	beq.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x308>
    {
      __HAL_TIM_ENABLE(htim);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	e007      	b.n	8003a48 <HAL_TIM_PWM_Start_DMA+0x308>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	08003f9f 	.word	0x08003f9f
 8003a58:	08004047 	.word	0x08004047
 8003a5c:	08003f0d 	.word	0x08003f0d
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40000400 	.word	0x40000400

08003a68 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d855      	bhi.n	8003b24 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003b25 	.word	0x08003b25
 8003a88:	08003b25 	.word	0x08003b25
 8003a8c:	08003b25 	.word	0x08003b25
 8003a90:	08003ad1 	.word	0x08003ad1
 8003a94:	08003b25 	.word	0x08003b25
 8003a98:	08003b25 	.word	0x08003b25
 8003a9c:	08003b25 	.word	0x08003b25
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003b25 	.word	0x08003b25
 8003aa8:	08003b25 	.word	0x08003b25
 8003aac:	08003b25 	.word	0x08003b25
 8003ab0:	08003b09 	.word	0x08003b09
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ac2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe fdb5 	bl	8002638 <HAL_DMA_Abort_IT>
      break;
 8003ace:	e02a      	b.n	8003b26 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fda7 	bl	8002638 <HAL_DMA_Abort_IT>
      break;
 8003aea:	e01c      	b.n	8003b26 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fd99 	bl	8002638 <HAL_DMA_Abort_IT>
      break;
 8003b06:	e00e      	b.n	8003b26 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fd8b 	bl	8002638 <HAL_DMA_Abort_IT>
      break;
 8003b22:	e000      	b.n	8003b26 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003b24:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	6839      	ldr	r1, [r7, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fd34 	bl	800459c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d117      	bne.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0x106>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	f240 4344 	movw	r3, #1092	; 0x444
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0x106>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_TIM_PWM_Stop_DMA+0x136>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	f240 4344 	movw	r3, #1092	; 0x444
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d107      	bne.n	8003b9e <HAL_TIM_PWM_Stop_DMA+0x136>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <HAL_TIM_PWM_Stop_DMA+0x146>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bac:	e013      	b.n	8003bd6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Stop_DMA+0x156>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bbc:	e00b      	b.n	8003bd6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Stop_DMA+0x166>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bcc:	e003      	b.n	8003bd6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40012c00 	.word	0x40012c00

08003be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e0ac      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	f200 809f 	bhi.w	8003d4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003d4d 	.word	0x08003d4d
 8003c1c:	08003d4d 	.word	0x08003d4d
 8003c20:	08003d4d 	.word	0x08003d4d
 8003c24:	08003c89 	.word	0x08003c89
 8003c28:	08003d4d 	.word	0x08003d4d
 8003c2c:	08003d4d 	.word	0x08003d4d
 8003c30:	08003d4d 	.word	0x08003d4d
 8003c34:	08003ccb 	.word	0x08003ccb
 8003c38:	08003d4d 	.word	0x08003d4d
 8003c3c:	08003d4d 	.word	0x08003d4d
 8003c40:	08003d4d 	.word	0x08003d4d
 8003c44:	08003d0b 	.word	0x08003d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fa86 	bl	8004160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0208 	orr.w	r2, r2, #8
 8003c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6999      	ldr	r1, [r3, #24]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	619a      	str	r2, [r3, #24]
      break;
 8003c86:	e062      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 facc 	bl	800422c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6999      	ldr	r1, [r3, #24]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	619a      	str	r2, [r3, #24]
      break;
 8003cc8:	e041      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fb15 	bl	8004300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0208 	orr.w	r2, r2, #8
 8003ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0204 	bic.w	r2, r2, #4
 8003cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	61da      	str	r2, [r3, #28]
      break;
 8003d08:	e021      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fb5f 	bl	80043d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69d9      	ldr	r1, [r3, #28]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	021a      	lsls	r2, r3, #8
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	61da      	str	r2, [r3, #28]
      break;
 8003d4a:	e000      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_ConfigClockSource+0x18>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0b3      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x180>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d03e      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0xd0>
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	f200 8087 	bhi.w	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbe:	f000 8085 	beq.w	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d87f      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d01a      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0xa2>
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d87b      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d050      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x116>
 8003dd4:	2b60      	cmp	r3, #96	; 0x60
 8003dd6:	d877      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd8:	2b50      	cmp	r3, #80	; 0x50
 8003dda:	d03c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xf6>
 8003ddc:	2b50      	cmp	r3, #80	; 0x50
 8003dde:	d873      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d058      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x136>
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d86f      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
 8003de8:	2b30      	cmp	r3, #48	; 0x30
 8003dea:	d064      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x156>
 8003dec:	2b30      	cmp	r3, #48	; 0x30
 8003dee:	d86b      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d060      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x156>
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d867      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d05c      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x156>
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d05a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e00:	e062      	b.n	8003ec8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f000 fba4 	bl	800455e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	609a      	str	r2, [r3, #8]
      break;
 8003e2e:	e04e      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6899      	ldr	r1, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f000 fb8d 	bl	800455e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e52:	609a      	str	r2, [r3, #8]
      break;
 8003e54:	e03b      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f000 fb04 	bl	8004470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2150      	movs	r1, #80	; 0x50
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fb5b 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 8003e74:	e02b      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f000 fb22 	bl	80044cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2160      	movs	r1, #96	; 0x60
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fb4b 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 8003e94:	e01b      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f000 fae4 	bl	8004470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2140      	movs	r1, #64	; 0x40
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fb3b 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 8003eb4:	e00b      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f000 fb32 	bl	800452a <TIM_ITRx_SetConfig>
        break;
 8003ec6:	e002      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ec8:	bf00      	nop
 8003eca:	e000      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ecc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d107      	bne.n	8003f34 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f32:	e02a      	b.n	8003f8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d107      	bne.n	8003f4e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2202      	movs	r2, #2
 8003f42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	e01d      	b.n	8003f8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d107      	bne.n	8003f68 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f66:	e010      	b.n	8003f8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d107      	bne.n	8003f82 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2208      	movs	r2, #8
 8003f76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f80:	e003      	b.n	8003f8a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff ffb5 	bl	8003efa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	771a      	strb	r2, [r3, #28]
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d10b      	bne.n	8003fce <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d136      	bne.n	8004032 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fcc:	e031      	b.n	8004032 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d10b      	bne.n	8003ff0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d125      	bne.n	8004032 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fee:	e020      	b.n	8004032 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d10b      	bne.n	8004012 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d114      	bne.n	8004032 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004010:	e00f      	b.n	8004032 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d10a      	bne.n	8004032 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2208      	movs	r2, #8
 8004020:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7fc f88a 	bl	800014c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	771a      	strb	r2, [r3, #28]
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	d103      	bne.n	8004066 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	771a      	strb	r2, [r3, #28]
 8004064:	e019      	b.n	800409a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	d103      	bne.n	8004078 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2202      	movs	r2, #2
 8004074:	771a      	strb	r2, [r3, #28]
 8004076:	e010      	b.n	800409a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	429a      	cmp	r2, r3
 8004080:	d103      	bne.n	800408a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2204      	movs	r2, #4
 8004086:	771a      	strb	r2, [r3, #28]
 8004088:	e007      	b.n	800409a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d102      	bne.n	800409a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2208      	movs	r2, #8
 8004098:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff ff24 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	771a      	strb	r2, [r3, #28]
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a25      	ldr	r2, [pc, #148]	; (8004158 <TIM_Base_SetConfig+0xa8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_Base_SetConfig+0x28>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ce:	d003      	beq.n	80040d8 <TIM_Base_SetConfig+0x28>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a22      	ldr	r2, [pc, #136]	; (800415c <TIM_Base_SetConfig+0xac>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1a      	ldr	r2, [pc, #104]	; (8004158 <TIM_Base_SetConfig+0xa8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0x52>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0x52>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a17      	ldr	r2, [pc, #92]	; (800415c <TIM_Base_SetConfig+0xac>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a07      	ldr	r2, [pc, #28]	; (8004158 <TIM_Base_SetConfig+0xa8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d103      	bne.n	8004148 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	615a      	str	r2, [r3, #20]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40000400 	.word	0x40000400

08004160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 0302 	bic.w	r3, r3, #2
 80041a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <TIM_OC1_SetConfig+0xc8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10c      	bne.n	80041d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0308 	bic.w	r3, r3, #8
 80041c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a13      	ldr	r2, [pc, #76]	; (8004228 <TIM_OC1_SetConfig+0xc8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d111      	bne.n	8004202 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40012c00 	.word	0x40012c00

0800422c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f023 0210 	bic.w	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0320 	bic.w	r3, r3, #32
 8004276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <TIM_OC2_SetConfig+0xd0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d10d      	bne.n	80042a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a14      	ldr	r2, [pc, #80]	; (80042fc <TIM_OC2_SetConfig+0xd0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d113      	bne.n	80042d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	40012c00 	.word	0x40012c00

08004300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <TIM_OC3_SetConfig+0xd0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10d      	bne.n	800437a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <TIM_OC3_SetConfig+0xd0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d113      	bne.n	80043aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	621a      	str	r2, [r3, #32]
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00

080043d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800441e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	031b      	lsls	r3, r3, #12
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0f      	ldr	r2, [pc, #60]	; (800446c <TIM_OC4_SetConfig+0x98>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d109      	bne.n	8004448 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	40012c00 	.word	0x40012c00

08004470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f023 0201 	bic.w	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f023 030a 	bic.w	r3, r3, #10
 80044ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	621a      	str	r2, [r3, #32]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f023 0210 	bic.w	r2, r3, #16
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	031b      	lsls	r3, r3, #12
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004508:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	621a      	str	r2, [r3, #32]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	f043 0307 	orr.w	r3, r3, #7
 800454c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	609a      	str	r2, [r3, #8]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr

0800455e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800455e:	b480      	push	{r7}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004578:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	021a      	lsls	r2, r3, #8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	431a      	orrs	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	609a      	str	r2, [r3, #8]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	2201      	movs	r2, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a1a      	ldr	r2, [r3, #32]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	43db      	mvns	r3, r3
 80045be:	401a      	ands	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e041      	b.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a14      	ldr	r2, [pc, #80]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004648:	d004      	beq.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a10      	ldr	r2, [pc, #64]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10c      	bne.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	4313      	orrs	r3, r2
 8004664:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40000400 	.word	0x40000400

08004694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e03d      	b.n	800472c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
	...

08004738 <__libc_init_array>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	2600      	movs	r6, #0
 800473c:	4d0c      	ldr	r5, [pc, #48]	; (8004770 <__libc_init_array+0x38>)
 800473e:	4c0d      	ldr	r4, [pc, #52]	; (8004774 <__libc_init_array+0x3c>)
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	42a6      	cmp	r6, r4
 8004746:	d109      	bne.n	800475c <__libc_init_array+0x24>
 8004748:	f000 f822 	bl	8004790 <_init>
 800474c:	2600      	movs	r6, #0
 800474e:	4d0a      	ldr	r5, [pc, #40]	; (8004778 <__libc_init_array+0x40>)
 8004750:	4c0a      	ldr	r4, [pc, #40]	; (800477c <__libc_init_array+0x44>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	42a6      	cmp	r6, r4
 8004758:	d105      	bne.n	8004766 <__libc_init_array+0x2e>
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004760:	4798      	blx	r3
 8004762:	3601      	adds	r6, #1
 8004764:	e7ee      	b.n	8004744 <__libc_init_array+0xc>
 8004766:	f855 3b04 	ldr.w	r3, [r5], #4
 800476a:	4798      	blx	r3
 800476c:	3601      	adds	r6, #1
 800476e:	e7f2      	b.n	8004756 <__libc_init_array+0x1e>
 8004770:	080047c8 	.word	0x080047c8
 8004774:	080047c8 	.word	0x080047c8
 8004778:	080047c8 	.word	0x080047c8
 800477c:	080047cc 	.word	0x080047cc

08004780 <memset>:
 8004780:	4603      	mov	r3, r0
 8004782:	4402      	add	r2, r0
 8004784:	4293      	cmp	r3, r2
 8004786:	d100      	bne.n	800478a <memset+0xa>
 8004788:	4770      	bx	lr
 800478a:	f803 1b01 	strb.w	r1, [r3], #1
 800478e:	e7f9      	b.n	8004784 <memset+0x4>

08004790 <_init>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	bf00      	nop
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr

0800479c <_fini>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr
