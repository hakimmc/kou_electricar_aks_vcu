
AKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800f1b0  0800f1b0  0001f1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f908  0800f908  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f908  0800f908  0001f908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f910  0800f910  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f910  0800f910  0001f910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f914  0800f914  0001f914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00004ec8  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200050ac  200050ac  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a9e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041f2  00000000  00000000  00040cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00044ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019e0  00000000  00000000  000469f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ff8  00000000  00000000  000483d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4e9  00000000  00000000  0006e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e95db  00000000  00000000  0008d8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00176e94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008aac  00000000  00000000  00176ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f198 	.word	0x0800f198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800f198 	.word	0x0800f198

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <cf2a>:
	printf("\r%s\n",cf2a(32.33)); //%s
	OUTPUT: A.D for "65.68";

}*/

char* cf2a(float num,char str[4]){//working
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001002:	60b8      	str	r0, [r7, #8]
	num+=33.33;
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff fa9f 	bl	8000548 <__aeabi_f2d>
 800100a:	a326      	add	r3, pc, #152	; (adr r3, 80010a4 <cf2a+0xac>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff f93c 	bl	800028c <__adddf3>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fde4 	bl	8000be8 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	60fb      	str	r3, [r7, #12]
	str[0] = (char)(int)(num);
 8001024:	edd7 7a03 	vldr	s15, [r7, #12]
 8001028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001030:	793a      	ldrb	r2, [r7, #4]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	701a      	strb	r2, [r3, #0]
	str[1] = '0';
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3301      	adds	r3, #1
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	701a      	strb	r2, [r3, #0]
	str[2] = (char) (((int)(num*100.0))-(100*((int)num)));
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff fa82 	bl	8000548 <__aeabi_f2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <cf2a+0xa8>)
 800104a:	f7ff fad5 	bl	80005f8 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fd7f 	bl	8000b58 <__aeabi_d2iz>
 800105a:	4603      	mov	r3, r0
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001066:	edc7 7a01 	vstr	s15, [r7, #4]
 800106a:	793b      	ldrb	r3, [r7, #4]
 800106c:	461a      	mov	r2, r3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4413      	add	r3, r2
 8001072:	461a      	mov	r2, r3
 8001074:	0090      	lsls	r0, r2, #2
 8001076:	461a      	mov	r2, r3
 8001078:	4603      	mov	r3, r0
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3302      	adds	r3, #2
 8001084:	1a8a      	subs	r2, r1, r2
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
	str[3] = '\0';
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3303      	adds	r3, #3
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

	return str;
 8001092:	68bb      	ldr	r3, [r7, #8]
	/*USAGE
	printf("\r%s\n",ci2a("65.68")); //%s
	OUTPUT: A.D for "65.68";
	*/
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	f3af 8000 	nop.w
 80010a0:	40590000 	.word	0x40590000
 80010a4:	70a3d70a 	.word	0x70a3d70a
 80010a8:	4040aa3d 	.word	0x4040aa3d

080010ac <ci2a>:

char ci2a(int num){//working
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	return (char) (num+33);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	3321      	adds	r3, #33	; 0x21
 80010ba:	b2db      	uxtb	r3, r3
	/*USAGE 
	printf("\r%c\n",ci2a(32));  //%c
	OUTPUT: A for "65";
	*/
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <NEXTION_SEND>:
        dest_array[i] = dec%2;
        dec/=2;
    }
}

void NEXTION_SEND(UART_HandleTypeDef huart,int what_do_you_want,char* ID,int variable,char myMessage[50]){
 80010c8:	b084      	sub	sp, #16
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b088      	sub	sp, #32
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80010d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//0 for vis
	//1 for value
	//2 for txt
	int lenx;
	uint8_t cmdEnd[3] = { 0xFF, 0xFF, 0xFF };
 80010d8:	4a30      	ldr	r2, [pc, #192]	; (800119c <NEXTION_SEND+0xd4>)
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	4611      	mov	r1, r2
 80010e2:	8019      	strh	r1, [r3, #0]
 80010e4:	3302      	adds	r3, #2
 80010e6:	0c12      	lsrs	r2, r2, #16
 80010e8:	701a      	strb	r2, [r3, #0]
	int leny;
	char arr[8];
	char x[5];

	switch (what_do_you_want) {
 80010ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d019      	beq.n	8001124 <NEXTION_SEND+0x5c>
 80010f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	dc35      	bgt.n	8001162 <NEXTION_SEND+0x9a>
 80010f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <NEXTION_SEND+0x3c>
 80010fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d008      	beq.n	8001114 <NEXTION_SEND+0x4c>
			leny = sprintf(x, "%d", variable);
			strcat(myMessage,x);
			strcat(myMessage,"\"");
			break;
		default:
			break;
 8001102:	e02e      	b.n	8001162 <NEXTION_SEND+0x9a>
			lenx = sprintf(myMessage, "vis %s,%d", ID,variable);
 8001104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001106:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001108:	4925      	ldr	r1, [pc, #148]	; (80011a0 <NEXTION_SEND+0xd8>)
 800110a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800110c:	f00a fa4e 	bl	800b5ac <siprintf>
 8001110:	61f8      	str	r0, [r7, #28]
			break;
 8001112:	e027      	b.n	8001164 <NEXTION_SEND+0x9c>
			lenx = sprintf(myMessage, "%s.val=%d", ID,variable);
 8001114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001116:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001118:	4922      	ldr	r1, [pc, #136]	; (80011a4 <NEXTION_SEND+0xdc>)
 800111a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800111c:	f00a fa46 	bl	800b5ac <siprintf>
 8001120:	61f8      	str	r0, [r7, #28]
			break;
 8001122:	e01f      	b.n	8001164 <NEXTION_SEND+0x9c>
			lenx = sprintf(myMessage, "%s.txt=\"", ID);
 8001124:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001126:	4920      	ldr	r1, [pc, #128]	; (80011a8 <NEXTION_SEND+0xe0>)
 8001128:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800112a:	f00a fa3f 	bl	800b5ac <siprintf>
 800112e:	61f8      	str	r0, [r7, #28]
			leny = sprintf(x, "%d", variable);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001134:	491d      	ldr	r1, [pc, #116]	; (80011ac <NEXTION_SEND+0xe4>)
 8001136:	4618      	mov	r0, r3
 8001138:	f00a fa38 	bl	800b5ac <siprintf>
 800113c:	61b8      	str	r0, [r7, #24]
			strcat(myMessage,x);
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001144:	f00a fa52 	bl	800b5ec <strcat>
			strcat(myMessage,"\"");
 8001148:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800114a:	f7ff f841 	bl	80001d0 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001154:	4413      	add	r3, r2
 8001156:	4916      	ldr	r1, [pc, #88]	; (80011b0 <NEXTION_SEND+0xe8>)
 8001158:	461a      	mov	r2, r3
 800115a:	460b      	mov	r3, r1
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	8013      	strh	r3, [r2, #0]
			break;
 8001160:	e000      	b.n	8001164 <NEXTION_SEND+0x9c>
			break;
 8001162:	bf00      	nop
	}
	HAL_UART_Transmit(&huart,(uint8_t*)myMessage , strlen(myMessage), 1000);
 8001164:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001166:	f7ff f833 	bl	80001d0 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001174:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001178:	f006 fa9f 	bl	80076ba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, cmdEnd, 3, 1000);
 800117c:	f107 0114 	add.w	r1, r7, #20
 8001180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001184:	2203      	movs	r2, #3
 8001186:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800118a:	f006 fa96 	bl	80076ba <HAL_UART_Transmit>
}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001198:	b004      	add	sp, #16
 800119a:	4770      	bx	lr
 800119c:	0800f200 	.word	0x0800f200
 80011a0:	0800f1d4 	.word	0x0800f1d4
 80011a4:	0800f1e0 	.word	0x0800f1e0
 80011a8:	0800f1ec 	.word	0x0800f1ec
 80011ac:	0800f1f8 	.word	0x0800f1f8
 80011b0:	0800f1fc 	.word	0x0800f1fc

080011b4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f023 030f 	bic.w	r3, r3, #15
 80011c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f043 030c 	orr.w	r3, r3, #12
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	f043 030c 	orr.w	r3, r3, #12
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2304      	movs	r3, #4
 80011fe:	214e      	movs	r1, #78	; 0x4e
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <lcd_send_cmd+0x5c>)
 8001202:	f004 fa3f 	bl	8005684 <HAL_I2C_Master_Transmit>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000052c 	.word	0x2000052c

08001214 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f023 030f 	bic.w	r3, r3, #15
 8001224:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f043 030d 	orr.w	r3, r3, #13
 8001232:	b2db      	uxtb	r3, r3
 8001234:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	f043 0309 	orr.w	r3, r3, #9
 800123c:	b2db      	uxtb	r3, r3
 800123e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	f043 030d 	orr.w	r3, r3, #13
 8001246:	b2db      	uxtb	r3, r3
 8001248:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	f043 0309 	orr.w	r3, r3, #9
 8001250:	b2db      	uxtb	r3, r3
 8001252:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001254:	f107 0208 	add.w	r2, r7, #8
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2304      	movs	r3, #4
 800125e:	214e      	movs	r1, #78	; 0x4e
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <lcd_send_data+0x5c>)
 8001262:	f004 fa0f 	bl	8005684 <HAL_I2C_Master_Transmit>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000052c 	.word	0x2000052c

08001274 <lcd_init>:

void lcd_init (void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff ff9b 	bl	80011b4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800127e:	2028      	movs	r0, #40	; 0x28
 8001280:	f7ff ff98 	bl	80011b4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8001284:	200c      	movs	r0, #12
 8001286:	f7ff ff95 	bl	80011b4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800128a:	2080      	movs	r0, #128	; 0x80
 800128c:	f7ff ff92 	bl	80011b4 <lcd_send_cmd>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	while (*str)
 800129c:	e006      	b.n	80012ac <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffb4 	bl	8001214 <lcd_send_data>
	while (*str)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f4      	bne.n	800129e <lcd_send_string+0xa>
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <lcd_reset>:
void lcd_reset(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 80012c4:	2080      	movs	r0, #128	; 0x80
 80012c6:	f7ff ff75 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("                ");
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <lcd_reset+0x20>)
 80012cc:	f7ff ffe2 	bl	8001294 <lcd_send_string>
	lcd_send_cmd(0xC0);
 80012d0:	20c0      	movs	r0, #192	; 0xc0
 80012d2:	f7ff ff6f 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("                ");
 80012d6:	4802      	ldr	r0, [pc, #8]	; (80012e0 <lcd_reset+0x20>)
 80012d8:	f7ff ffdc 	bl	8001294 <lcd_send_string>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	0800f204 	.word	0x0800f204

080012e4 <prepare_data>:
void start_can(void *argument);
void StartTask04(void *argument);

/* USER CODE BEGIN PFP */
/*______________________________External Functions____________________________*/
int prepare_data(){
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
	sprintf(arr,"%c%c",ecar.RELAY.direction_,ci2a(ecar.DRIVER.vehicle_speed));
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <prepare_data+0xb8>)
 80012ec:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80012f0:	461c      	mov	r4, r3
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <prepare_data+0xb8>)
 80012f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80012f8:	f343 0300 	sbfx	r3, r3, #0, #1
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fed4 	bl	80010ac <ci2a>
 8001304:	4603      	mov	r3, r0
 8001306:	4622      	mov	r2, r4
 8001308:	4925      	ldr	r1, [pc, #148]	; (80013a0 <prepare_data+0xbc>)
 800130a:	4826      	ldr	r0, [pc, #152]	; (80013a4 <prepare_data+0xc0>)
 800130c:	f00a f94e 	bl	800b5ac <siprintf>
	for(int j=0;j<24;j++){
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	e02e      	b.n	8001374 <prepare_data+0x90>
		strcat(arr,cf2a(ecar.BMS.battery_voltage[j],tempp[j]));
 8001316:	4a21      	ldr	r2, [pc, #132]	; (800139c <prepare_data+0xb8>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <prepare_data+0xc4>)
 8001328:	4413      	add	r3, r2
 800132a:	4618      	mov	r0, r3
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f7ff fe62 	bl	8000ff8 <cf2a>
 8001334:	4603      	mov	r3, r0
 8001336:	4619      	mov	r1, r3
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <prepare_data+0xc0>)
 800133a:	f00a f957 	bl	800b5ec <strcat>
		if(j==23){
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b17      	cmp	r3, #23
 8001342:	d114      	bne.n	800136e <prepare_data+0x8a>
			strcat(arr,cf2a((float)ecar.BMS.battery_temparature,tempp[j+1]));
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <prepare_data+0xb8>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <prepare_data+0xc4>)
 8001358:	4413      	add	r3, r2
 800135a:	4618      	mov	r0, r3
 800135c:	eeb0 0a67 	vmov.f32	s0, s15
 8001360:	f7ff fe4a 	bl	8000ff8 <cf2a>
 8001364:	4603      	mov	r3, r0
 8001366:	4619      	mov	r1, r3
 8001368:	480e      	ldr	r0, [pc, #56]	; (80013a4 <prepare_data+0xc0>)
 800136a:	f00a f93f 	bl	800b5ec <strcat>
	for(int j=0;j<24;j++){
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b17      	cmp	r3, #23
 8001378:	ddcd      	ble.n	8001316 <prepare_data+0x32>
		}
	}
	strcat(arr,"1\0");
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <prepare_data+0xc0>)
 800137c:	f7fe ff28 	bl	80001d0 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <prepare_data+0xc0>)
 8001386:	4413      	add	r3, r2
 8001388:	4908      	ldr	r1, [pc, #32]	; (80013ac <prepare_data+0xc8>)
 800138a:	461a      	mov	r2, r3
 800138c:	460b      	mov	r3, r1
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	8013      	strh	r3, [r2, #0]
	return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	2000042c 	.word	0x2000042c
 80013a0:	0800f22c 	.word	0x0800f22c
 80013a4:	20000268 	.word	0x20000268
 80013a8:	20000394 	.word	0x20000394
 80013ac:	0800f234 	.word	0x0800f234

080013b0 <decimal_to_bin>:

int dest[8];
void decimal_to_bin(uint8_t number){ // EX for 255 = [1][1][1][1][1][1][1][1] binary code
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
    for(int i=0;i<8;i++){
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e00c      	b.n	80013da <decimal_to_bin+0x2a>
        dest[i] = number%2;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <decimal_to_bin+0x40>)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        number/=2;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	71fb      	strb	r3, [r7, #7]
    for(int i=0;i<8;i++){
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	ddef      	ble.n	80013c0 <decimal_to_bin+0x10>
    }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200006c0 	.word	0x200006c0

080013f4 <SEND_DATA_TO_LCD>:
		uint16_t adc_vall = HAL_ADC_GetValue(&hadc1);
		temp_of_lcd = (adc_vall*330) / 4095;
	}
}

void SEND_DATA_TO_LCD(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af02      	add	r7, sp, #8

    lcd_init();
 80013fa:	f7ff ff3b 	bl	8001274 <lcd_init>
    lcd_send_cmd(0x80);
 80013fe:	2080      	movs	r0, #128	; 0x80
 8001400:	f7ff fed8 	bl	80011b4 <lcd_send_cmd>
    sprintf(&M[0],"TEMP %cC   : %d%cC", (char)223,ecar.BMS.battery_temparature,(char)223);
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <SEND_DATA_TO_LCD+0x84>)
 8001406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001408:	22df      	movs	r2, #223	; 0xdf
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	22df      	movs	r2, #223	; 0xdf
 800140e:	491b      	ldr	r1, [pc, #108]	; (800147c <SEND_DATA_TO_LCD+0x88>)
 8001410:	481b      	ldr	r0, [pc, #108]	; (8001480 <SEND_DATA_TO_LCD+0x8c>)
 8001412:	f00a f8cb 	bl	800b5ac <siprintf>
    lcd_send_string(&M[0]);
 8001416:	481a      	ldr	r0, [pc, #104]	; (8001480 <SEND_DATA_TO_LCD+0x8c>)
 8001418:	f7ff ff3c 	bl	8001294 <lcd_send_string>
    HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	f002 faeb 	bl	80039f8 <HAL_Delay>

	sprintf(&M[0],"FAN LEVEL : %s", fan_level==0?"----":(fan_level==25?"#---":(fan_level==50?"##--":(fan_level==75?"###-":"####"))));
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <SEND_DATA_TO_LCD+0x90>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d013      	beq.n	8001452 <SEND_DATA_TO_LCD+0x5e>
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <SEND_DATA_TO_LCD+0x90>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b19      	cmp	r3, #25
 8001430:	d00d      	beq.n	800144e <SEND_DATA_TO_LCD+0x5a>
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <SEND_DATA_TO_LCD+0x90>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b32      	cmp	r3, #50	; 0x32
 8001438:	d007      	beq.n	800144a <SEND_DATA_TO_LCD+0x56>
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <SEND_DATA_TO_LCD+0x90>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b4b      	cmp	r3, #75	; 0x4b
 8001440:	d101      	bne.n	8001446 <SEND_DATA_TO_LCD+0x52>
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <SEND_DATA_TO_LCD+0x94>)
 8001444:	e006      	b.n	8001454 <SEND_DATA_TO_LCD+0x60>
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <SEND_DATA_TO_LCD+0x98>)
 8001448:	e004      	b.n	8001454 <SEND_DATA_TO_LCD+0x60>
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <SEND_DATA_TO_LCD+0x9c>)
 800144c:	e002      	b.n	8001454 <SEND_DATA_TO_LCD+0x60>
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <SEND_DATA_TO_LCD+0xa0>)
 8001450:	e000      	b.n	8001454 <SEND_DATA_TO_LCD+0x60>
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <SEND_DATA_TO_LCD+0xa4>)
 8001454:	461a      	mov	r2, r3
 8001456:	4911      	ldr	r1, [pc, #68]	; (800149c <SEND_DATA_TO_LCD+0xa8>)
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <SEND_DATA_TO_LCD+0x8c>)
 800145a:	f00a f8a7 	bl	800b5ac <siprintf>
	lcd_send_cmd(0xC0);
 800145e:	20c0      	movs	r0, #192	; 0xc0
 8001460:	f7ff fea8 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string(&M[0]);
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <SEND_DATA_TO_LCD+0x8c>)
 8001466:	f7ff ff15 	bl	8001294 <lcd_send_string>
	HAL_Delay(100);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f002 fac4 	bl	80039f8 <HAL_Delay>
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000042c 	.word	0x2000042c
 800147c:	0800f238 	.word	0x0800f238
 8001480:	200006e0 	.word	0x200006e0
 8001484:	200006f4 	.word	0x200006f4
 8001488:	0800f24c 	.word	0x0800f24c
 800148c:	0800f254 	.word	0x0800f254
 8001490:	0800f25c 	.word	0x0800f25c
 8001494:	0800f264 	.word	0x0800f264
 8001498:	0800f26c 	.word	0x0800f26c
 800149c:	0800f274 	.word	0x0800f274

080014a0 <WaitForMission>:

int WaitForMission(uint8_t dest_id,uint8_t id,int timeout,uint8_t message){ // can send with feedback func
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	603a      	str	r2, [r7, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	460b      	mov	r3, r1
 80014b0:	71bb      	strb	r3, [r7, #6]
 80014b2:	4613      	mov	r3, r2
 80014b4:	717b      	strb	r3, [r7, #5]
	int t_out=0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
	int r_val;
	//int durum=0;
	while(1){
		HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &message, &pTxMailbox);
 80014ba:	1d7a      	adds	r2, r7, #5
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <WaitForMission+0x74>)
 80014be:	4916      	ldr	r1, [pc, #88]	; (8001518 <WaitForMission+0x78>)
 80014c0:	4816      	ldr	r0, [pc, #88]	; (800151c <WaitForMission+0x7c>)
 80014c2:	f003 f811 	bl	80044e8 <HAL_CAN_AddTxMessage>
		uint8_t rxData[1];
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, rxData);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <WaitForMission+0x80>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	4813      	ldr	r0, [pc, #76]	; (800151c <WaitForMission+0x7c>)
 80014d0:	f003 f8e5 	bl	800469e <HAL_CAN_GetRxMessage>
		if(rxData[0]==id && (dest_id==pRxHeader.StdId || !dest_id)){
 80014d4:	7b3b      	ldrb	r3, [r7, #12]
 80014d6:	79ba      	ldrb	r2, [r7, #6]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d10a      	bne.n	80014f2 <WaitForMission+0x52>
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <WaitForMission+0x80>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d002      	beq.n	80014ec <WaitForMission+0x4c>
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <WaitForMission+0x52>
			r_val = 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
			break;
 80014f0:	e00b      	b.n	800150a <WaitForMission+0x6a>
		}
		t_out++;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f002 fa7d 	bl	80039f8 <HAL_Delay>
		if(t_out==timeout){
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d1d9      	bne.n	80014ba <WaitForMission+0x1a>
			r_val = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
			break;
		}
	}
	return r_val;
 800150a:	693b      	ldr	r3, [r7, #16]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000025c 	.word	0x2000025c
 8001518:	20000200 	.word	0x20000200
 800151c:	20000504 	.word	0x20000504
 8001520:	20000218 	.word	0x20000218

08001524 <CalculateMaxBattery>:
void CalculateMaxBattery(){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
	int max=ecar.BMS.battery_voltage[0];
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <CalculateMaxBattery+0x7c>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	ee17 3a90 	vmov	r3, s15
 8001538:	607b      	str	r3, [r7, #4]
	for(int n=1;n<24;n++){
 800153a:	2301      	movs	r3, #1
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	e01d      	b.n	800157c <CalculateMaxBattery+0x58>
		if(max<ecar.BMS.battery_voltage[n]){max=ecar.BMS.battery_voltage[n];}
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <CalculateMaxBattery+0x7c>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	d50a      	bpl.n	8001576 <CalculateMaxBattery+0x52>
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <CalculateMaxBattery+0x7c>)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001570:	ee17 3a90 	vmov	r3, s15
 8001574:	607b      	str	r3, [r7, #4]
	for(int n=1;n<24;n++){
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b17      	cmp	r3, #23
 8001580:	ddde      	ble.n	8001540 <CalculateMaxBattery+0x1c>
	}
	ecar.BMS.max_battery=max;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <CalculateMaxBattery+0x7c>)
 800158e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2000042c 	.word	0x2000042c

080015a4 <CalculateMinBattery>:
void CalculateMinBattery(){
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
	int min=ecar.BMS.battery_voltage[0];
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <CalculateMinBattery+0x7c>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b4:	ee17 3a90 	vmov	r3, s15
 80015b8:	607b      	str	r3, [r7, #4]
	for(int n=1;n<24;n++){
 80015ba:	2301      	movs	r3, #1
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	e01d      	b.n	80015fc <CalculateMinBattery+0x58>
		if(min>ecar.BMS.battery_voltage[n]){min=ecar.BMS.battery_voltage[n];}
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ca:	4a15      	ldr	r2, [pc, #84]	; (8001620 <CalculateMinBattery+0x7c>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	dd0a      	ble.n	80015f6 <CalculateMinBattery+0x52>
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <CalculateMinBattery+0x7c>)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f0:	ee17 3a90 	vmov	r3, s15
 80015f4:	607b      	str	r3, [r7, #4]
	for(int n=1;n<24;n++){
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b17      	cmp	r3, #23
 8001600:	ddde      	ble.n	80015c0 <CalculateMinBattery+0x1c>
	}
	ecar.BMS.min_battery=min;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <CalculateMinBattery+0x7c>)
 800160e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	2000042c 	.word	0x2000042c

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001628:	f002 f9a4 	bl	8003974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162c:	f000 f896 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f000 fa9c 	bl	8001b6c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001634:	f000 f94e 	bl	80018d4 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8001638:	f000 fa24 	bl	8001a84 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800163c:	f000 fa4c 	bl	8001ad8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001640:	f000 f8f6 	bl	8001830 <MX_ADC1_Init>
  MX_DMA_Init();
 8001644:	f000 fa72 	bl	8001b2c <MX_DMA_Init>
  MX_TIM2_Init();
 8001648:	f000 f9a8 	bl	800199c <MX_TIM2_Init>
  MX_I2C1_Init();
 800164c:	f000 f978 	bl	8001940 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001650:	4830      	ldr	r0, [pc, #192]	; (8001714 <main+0xf0>)
 8001652:	f002 ff05 	bl	8004460 <HAL_CAN_Start>
  HAL_ADC_Start(&hadc1);
 8001656:	4830      	ldr	r0, [pc, #192]	; (8001718 <main+0xf4>)
 8001658:	f002 fa36 	bl	8003ac8 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800165c:	2108      	movs	r1, #8
 800165e:	482f      	ldr	r0, [pc, #188]	; (800171c <main+0xf8>)
 8001660:	f005 f8bc 	bl	80067dc <HAL_TIM_PWM_Start>
  TIM2->CCR3 = 25; // ex pwm signal for fan level
 8001664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001668:	2219      	movs	r2, #25
 800166a:	63da      	str	r2, [r3, #60]	; 0x3c


  ecar.CHARGER.start_charge_state = 'I';
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <main+0xfc>)
 800166e:	2249      	movs	r2, #73	; 0x49
 8001670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  //HAL_UART_Receive_DMA (&huart6, ecar.CHARGER.start_charge_state, 1);

  pTxHeader.DLC = 1;
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <main+0x100>)
 8001676:	2201      	movs	r2, #1
 8001678:	611a      	str	r2, [r3, #16]
  pTxHeader.IDE = CAN_ID_STD;
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <main+0x100>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  pTxHeader.RTR = CAN_RTR_DATA;
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <main+0x100>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  pTxHeader.StdId = 0x10;
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <main+0x100>)
 8001688:	2210      	movs	r2, #16
 800168a:	601a      	str	r2, [r3, #0]

   //set filter parameters
   sFilterConfig.FilterActivation = ENABLE;
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <main+0x104>)
 800168e:	2201      	movs	r2, #1
 8001690:	621a      	str	r2, [r3, #32]
   sFilterConfig.FilterBank = 0;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <main+0x104>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
   sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <main+0x104>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
   sFilterConfig.FilterIdHigh = 0x0000 ;
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <main+0x104>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
   sFilterConfig.FilterIdLow = 0x0000 ;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <main+0x104>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
   sFilterConfig.FilterMaskIdHigh = 0x0000 ;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <main+0x104>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
   sFilterConfig.FilterMaskIdLow = 0x0000 ;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <main+0x104>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <main+0x104>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <main+0x104>)
 80016be:	2201      	movs	r2, #1
 80016c0:	61da      	str	r2, [r3, #28]

   HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80016c2:	4919      	ldr	r1, [pc, #100]	; (8001728 <main+0x104>)
 80016c4:	4813      	ldr	r0, [pc, #76]	; (8001714 <main+0xf0>)
 80016c6:	f002 fdeb 	bl	80042a0 <HAL_CAN_ConfigFilter>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016ca:	f006 fbaf 	bl	8007e2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of nextion */
  nextionHandle = osThreadNew(start_nextion, NULL, &nextion_attributes);
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <main+0x108>)
 80016d0:	2100      	movs	r1, #0
 80016d2:	4817      	ldr	r0, [pc, #92]	; (8001730 <main+0x10c>)
 80016d4:	f006 fbf4 	bl	8007ec0 <osThreadNew>
 80016d8:	4603      	mov	r3, r0
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <main+0x110>)
 80016dc:	6013      	str	r3, [r2, #0]

  /* creation of rf */
  rfHandle = osThreadNew(start_rf, NULL, &rf_attributes);
 80016de:	4a16      	ldr	r2, [pc, #88]	; (8001738 <main+0x114>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4816      	ldr	r0, [pc, #88]	; (800173c <main+0x118>)
 80016e4:	f006 fbec 	bl	8007ec0 <osThreadNew>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a15      	ldr	r2, [pc, #84]	; (8001740 <main+0x11c>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* creation of can */
  canHandle = osThreadNew(start_can, NULL, &can_attributes);
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <main+0x120>)
 80016f0:	2100      	movs	r1, #0
 80016f2:	4815      	ldr	r0, [pc, #84]	; (8001748 <main+0x124>)
 80016f4:	f006 fbe4 	bl	8007ec0 <osThreadNew>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <main+0x128>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* creation of dac */
  dacHandle = osThreadNew(StartTask04, NULL, &dac_attributes);
 80016fe:	4a14      	ldr	r2, [pc, #80]	; (8001750 <main+0x12c>)
 8001700:	2100      	movs	r1, #0
 8001702:	4814      	ldr	r0, [pc, #80]	; (8001754 <main+0x130>)
 8001704:	f006 fbdc 	bl	8007ec0 <osThreadNew>
 8001708:	4603      	mov	r3, r0
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <main+0x134>)
 800170c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800170e:	f006 fbb1 	bl	8007e74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001712:	e7fe      	b.n	8001712 <main+0xee>
 8001714:	20000504 	.word	0x20000504
 8001718:	200004bc 	.word	0x200004bc
 800171c:	20000580 	.word	0x20000580
 8001720:	2000042c 	.word	0x2000042c
 8001724:	20000200 	.word	0x20000200
 8001728:	20000234 	.word	0x20000234
 800172c:	0800f3b0 	.word	0x0800f3b0
 8001730:	08001c49 	.word	0x08001c49
 8001734:	200006b0 	.word	0x200006b0
 8001738:	0800f3d4 	.word	0x0800f3d4
 800173c:	080026a5 	.word	0x080026a5
 8001740:	200006b4 	.word	0x200006b4
 8001744:	0800f3f8 	.word	0x0800f3f8
 8001748:	080026f1 	.word	0x080026f1
 800174c:	200006b8 	.word	0x200006b8
 8001750:	0800f41c 	.word	0x0800f41c
 8001754:	08002d49 	.word	0x08002d49
 8001758:	200006bc 	.word	0x200006bc

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b094      	sub	sp, #80	; 0x50
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	2230      	movs	r2, #48	; 0x30
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f009 f896 	bl	800a89c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <SystemClock_Config+0xcc>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <SystemClock_Config+0xcc>)
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <SystemClock_Config+0xcc>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <SystemClock_Config+0xd0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <SystemClock_Config+0xd0>)
 80017a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <SystemClock_Config+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b8:	2302      	movs	r3, #2
 80017ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017bc:	2301      	movs	r3, #1
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c0:	2310      	movs	r3, #16
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c4:	2302      	movs	r3, #2
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c8:	2300      	movs	r3, #0
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017cc:	2308      	movs	r3, #8
 80017ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017d0:	23a8      	movs	r3, #168	; 0xa8
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017d8:	2304      	movs	r3, #4
 80017da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fa57 	bl	8005c94 <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017ec:	f001 fd2e 	bl	800324c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f0:	230f      	movs	r3, #15
 80017f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	2302      	movs	r3, #2
 80017f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2105      	movs	r1, #5
 800180e:	4618      	mov	r0, r3
 8001810:	f004 fcb8 	bl	8006184 <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800181a:	f001 fd17 	bl	800324c <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3750      	adds	r7, #80	; 0x50
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001844:	4a21      	ldr	r2, [pc, #132]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_ADC1_Init+0x98>)
 800184a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800184e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_ADC1_Init+0x98>)
 800185e:	2201      	movs	r2, #1
 8001860:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_ADC1_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <MX_ADC1_Init+0xa0>)
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_ADC1_Init+0x98>)
 800187e:	2201      	movs	r2, #1
 8001880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_ADC1_Init+0x98>)
 800188c:	2201      	movs	r2, #1
 800188e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001892:	f002 f8d5 	bl	8003a40 <HAL_ADC_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800189c:	f001 fcd6 	bl	800324c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80018a8:	2303      	movs	r3, #3
 80018aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_ADC1_Init+0x98>)
 80018b2:	f002 f9db 	bl	8003c6c <HAL_ADC_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018bc:	f001 fcc6 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200004bc 	.word	0x200004bc
 80018cc:	40012000 	.word	0x40012000
 80018d0:	0f000001 	.word	0x0f000001

080018d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_CAN1_Init+0x64>)
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <MX_CAN1_Init+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_CAN1_Init+0x64>)
 80018e0:	2206      	movs	r2, #6
 80018e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_CAN1_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_CAN1_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_CAN1_Init+0x64>)
 80018f2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80018f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_CAN1_Init+0x64>)
 80018fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <MX_CAN1_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_CAN1_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MX_CAN1_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_CAN1_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <MX_CAN1_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_CAN1_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_CAN1_Init+0x64>)
 8001926:	f002 fbbf 	bl	80040a8 <HAL_CAN_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001930:	f001 fc8c 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000504 	.word	0x20000504
 800193c:	40006400 	.word	0x40006400

08001940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_I2C1_Init+0x50>)
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <MX_I2C1_Init+0x54>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_I2C1_Init+0x50>)
 800194c:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_I2C1_Init+0x58>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_I2C1_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_I2C1_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_I2C1_Init+0x50>)
 800195e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_I2C1_Init+0x50>)
 800197e:	f003 fd3d 	bl	80053fc <HAL_I2C_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001988:	f001 fc60 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000052c 	.word	0x2000052c
 8001994:	40005400 	.word	0x40005400
 8001998:	000186a0 	.word	0x000186a0

0800199c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	615a      	str	r2, [r3, #20]
 80019ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019cc:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <MX_TIM2_Init+0xe4>)
 80019ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <MX_TIM2_Init+0xe4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <MX_TIM2_Init+0xe4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <MX_TIM2_Init+0xe4>)
 80019e2:	2263      	movs	r2, #99	; 0x63
 80019e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <MX_TIM2_Init+0xe4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <MX_TIM2_Init+0xe4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f2:	4823      	ldr	r0, [pc, #140]	; (8001a80 <MX_TIM2_Init+0xe4>)
 80019f4:	f004 fdd8 	bl	80065a8 <HAL_TIM_Base_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80019fe:	f001 fc25 	bl	800324c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481c      	ldr	r0, [pc, #112]	; (8001a80 <MX_TIM2_Init+0xe4>)
 8001a10:	f005 f976 	bl	8006d00 <HAL_TIM_ConfigClockSource>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001a1a:	f001 fc17 	bl	800324c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a1e:	4818      	ldr	r0, [pc, #96]	; (8001a80 <MX_TIM2_Init+0xe4>)
 8001a20:	f004 fe82 	bl	8006728 <HAL_TIM_PWM_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001a2a:	f001 fc0f 	bl	800324c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4810      	ldr	r0, [pc, #64]	; (8001a80 <MX_TIM2_Init+0xe4>)
 8001a3e:	f005 fd5f 	bl	8007500 <HAL_TIMEx_MasterConfigSynchronization>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a48:	f001 fc00 	bl	800324c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4c:	2360      	movs	r3, #96	; 0x60
 8001a4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2208      	movs	r2, #8
 8001a60:	4619      	mov	r1, r3
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <MX_TIM2_Init+0xe4>)
 8001a64:	f005 f88a 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001a6e:	f001 fbed 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <MX_TIM2_Init+0xe4>)
 8001a74:	f001 fd10 	bl	8003498 <HAL_TIM_MspPostInit>

}
 8001a78:	bf00      	nop
 8001a7a:	3738      	adds	r7, #56	; 0x38
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000580 	.word	0x20000580

08001a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <MX_USART2_UART_Init+0x50>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_USART2_UART_Init+0x4c>)
 8001abc:	f005 fdb0 	bl	8007620 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ac6:	f001 fbc1 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200005c8 	.word	0x200005c8
 8001ad4:	40004400 	.word	0x40004400

08001ad8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_USART6_UART_Init+0x50>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001ae4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ae8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_USART6_UART_Init+0x4c>)
 8001b10:	f005 fd86 	bl	8007620 <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b1a:	f001 fb97 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000060c 	.word	0x2000060c
 8001b28:	40011400 	.word	0x40011400

08001b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2105      	movs	r1, #5
 8001b52:	2039      	movs	r0, #57	; 0x39
 8001b54:	f002 ff6e 	bl	8004a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b58:	2039      	movs	r0, #57	; 0x39
 8001b5a:	f002 ff87 	bl	8004a6c <HAL_NVIC_EnableIRQ>

}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a2d      	ldr	r2, [pc, #180]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_GPIO_Init+0xd4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <MX_GPIO_Init+0xd8>)
 8001c16:	f003 fbbd 	bl	8005394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c1a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_GPIO_Init+0xd8>)
 8001c34:	f003 fa12 	bl	800505c <HAL_GPIO_Init>

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020c00 	.word	0x40020c00

08001c48 <start_nextion>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_nextion */
void start_nextion(void *argument)
{
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	b097      	sub	sp, #92	; 0x5c
 8001c4c:	af12      	add	r7, sp, #72	; 0x48
 8001c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(ecar.CHARGER.start_charge_state=='S'){
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <start_nextion+0x2c>)
 8001c52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001c56:	2b53      	cmp	r3, #83	; 0x53
 8001c58:	d105      	bne.n	8001c66 <start_nextion+0x1e>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <start_nextion+0x30>)
 8001c62:	f003 fb97 	bl	8005394 <HAL_GPIO_WritePin>
	  }

	  //page1
	  //NEXTION_SEND(huart6, 0, charge_code, ecar.BMS.bms_error_code, myMessagex);

	  ecar.BMS.sum_battery=0;
 8001c66:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <start_nextion+0x2c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	671a      	str	r2, [r3, #112]	; 0x70
	  for(int k=0;k<24;k++){
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e01f      	b.n	8001cb2 <start_nextion+0x6a>
 8001c72:	bf00      	nop
 8001c74:	2000042c 	.word	0x2000042c
 8001c78:	40020c00 	.word	0x40020c00
		 ecar.BMS.sum_battery+=ecar.BMS.battery_voltage[k]*1000;
 8001c7c:	4ba5      	ldr	r3, [pc, #660]	; (8001f14 <start_nextion+0x2cc>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c88:	4aa2      	ldr	r2, [pc, #648]	; (8001f14 <start_nextion+0x2cc>)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8001f18 <start_nextion+0x2d0>
 8001c98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca4:	ee17 2a90 	vmov	r2, s15
 8001ca8:	4b9a      	ldr	r3, [pc, #616]	; (8001f14 <start_nextion+0x2cc>)
 8001caa:	671a      	str	r2, [r3, #112]	; 0x70
	  for(int k=0;k<24;k++){
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b17      	cmp	r3, #23
 8001cb6:	dde1      	ble.n	8001c7c <start_nextion+0x34>
	  }
	  NEXTION_SEND(huart6, 2, power,ecar.BMS.sum_battery/((int)(max_battery*1000)), myMessagex);
 8001cb8:	4b96      	ldr	r3, [pc, #600]	; (8001f14 <start_nextion+0x2cc>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001f1c <start_nextion+0x2d4>
 8001cc0:	eddf 7a95 	vldr	s15, [pc, #596]	; 8001f18 <start_nextion+0x2d0>
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ccc:	ee17 2a90 	vmov	r2, s15
 8001cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001cd4:	4e92      	ldr	r6, [pc, #584]	; (8001f20 <start_nextion+0x2d8>)
 8001cd6:	4a93      	ldr	r2, [pc, #588]	; (8001f24 <start_nextion+0x2dc>)
 8001cd8:	9210      	str	r2, [sp, #64]	; 0x40
 8001cda:	930f      	str	r3, [sp, #60]	; 0x3c
 8001cdc:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <start_nextion+0x2e0>)
 8001cde:	930e      	str	r3, [sp, #56]	; 0x38
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8001ce4:	466d      	mov	r5, sp
 8001ce6:	f106 0410 	add.w	r4, r6, #16
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	602b      	str	r3, [r5, #0]
 8001cfa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001cfe:	f7ff f9e3 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 2, speed, ecar.DRIVER.vehicle_speed, myMessagex);
 8001d02:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <start_nextion+0x2cc>)
 8001d04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001d08:	f343 0300 	sbfx	r3, r3, #0, #1
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4e83      	ldr	r6, [pc, #524]	; (8001f20 <start_nextion+0x2d8>)
 8001d12:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <start_nextion+0x2dc>)
 8001d14:	9310      	str	r3, [sp, #64]	; 0x40
 8001d16:	920f      	str	r2, [sp, #60]	; 0x3c
 8001d18:	4b84      	ldr	r3, [pc, #528]	; (8001f2c <start_nextion+0x2e4>)
 8001d1a:	930e      	str	r3, [sp, #56]	; 0x38
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8001d20:	466d      	mov	r5, sp
 8001d22:	f106 0410 	add.w	r4, r6, #16
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	602b      	str	r3, [r5, #0]
 8001d36:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d3a:	f7ff f9c5 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 2, temp, ecar.BMS.battery_temparature, myMessagex);
 8001d3e:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <start_nextion+0x2cc>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	4e77      	ldr	r6, [pc, #476]	; (8001f20 <start_nextion+0x2d8>)
 8001d44:	4a77      	ldr	r2, [pc, #476]	; (8001f24 <start_nextion+0x2dc>)
 8001d46:	9210      	str	r2, [sp, #64]	; 0x40
 8001d48:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d4a:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <start_nextion+0x2e8>)
 8001d4c:	930e      	str	r3, [sp, #56]	; 0x38
 8001d4e:	2302      	movs	r3, #2
 8001d50:	930d      	str	r3, [sp, #52]	; 0x34
 8001d52:	466d      	mov	r5, sp
 8001d54:	f106 0410 	add.w	r4, r6, #16
 8001d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	602b      	str	r3, [r5, #0]
 8001d68:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d6c:	f7ff f9ac 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 2, watt, ecar.CHARGER.charge_watt, myMessagex);
 8001d70:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <start_nextion+0x2cc>)
 8001d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d74:	4e6a      	ldr	r6, [pc, #424]	; (8001f20 <start_nextion+0x2d8>)
 8001d76:	4a6b      	ldr	r2, [pc, #428]	; (8001f24 <start_nextion+0x2dc>)
 8001d78:	9210      	str	r2, [sp, #64]	; 0x40
 8001d7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <start_nextion+0x2ec>)
 8001d7e:	930e      	str	r3, [sp, #56]	; 0x38
 8001d80:	2302      	movs	r3, #2
 8001d82:	930d      	str	r3, [sp, #52]	; 0x34
 8001d84:	466d      	mov	r5, sp
 8001d86:	f106 0410 	add.w	r4, r6, #16
 8001d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	602b      	str	r3, [r5, #0]
 8001d9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d9e:	f7ff f993 	bl	80010c8 <NEXTION_SEND>
	  //NEXTION_SEND(huart6, 2, charge_percentage, number, myMessagex);
	  NEXTION_SEND(huart6, 0, state_of_charge, ecar.CHARGER.ReadyToFlow, myMessagex);
 8001da2:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <start_nextion+0x2cc>)
 8001da4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001da8:	461a      	mov	r2, r3
 8001daa:	4e5d      	ldr	r6, [pc, #372]	; (8001f20 <start_nextion+0x2d8>)
 8001dac:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <start_nextion+0x2dc>)
 8001dae:	9310      	str	r3, [sp, #64]	; 0x40
 8001db0:	920f      	str	r2, [sp, #60]	; 0x3c
 8001db2:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <start_nextion+0x2f0>)
 8001db4:	930e      	str	r3, [sp, #56]	; 0x38
 8001db6:	2300      	movs	r3, #0
 8001db8:	930d      	str	r3, [sp, #52]	; 0x34
 8001dba:	466d      	mov	r5, sp
 8001dbc:	f106 0410 	add.w	r4, r6, #16
 8001dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	602b      	str	r3, [r5, #0]
 8001dd0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001dd4:	f7ff f978 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 2, charge_time, ecar.CHARGER.time, myMessagex);
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <start_nextion+0x2cc>)
 8001dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ddc:	4e50      	ldr	r6, [pc, #320]	; (8001f20 <start_nextion+0x2d8>)
 8001dde:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <start_nextion+0x2dc>)
 8001de0:	9210      	str	r2, [sp, #64]	; 0x40
 8001de2:	930f      	str	r3, [sp, #60]	; 0x3c
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <start_nextion+0x2f4>)
 8001de6:	930e      	str	r3, [sp, #56]	; 0x38
 8001de8:	2302      	movs	r3, #2
 8001dea:	930d      	str	r3, [sp, #52]	; 0x34
 8001dec:	466d      	mov	r5, sp
 8001dee:	f106 0410 	add.w	r4, r6, #16
 8001df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	602b      	str	r3, [r5, #0]
 8001e02:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e06:	f7ff f95f 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 0, horn, status, myMessagex);
	  NEXTION_SEND(huart6, 0, lights, status, myMessagex);
	  NEXTION_SEND(huart6, 0, wiper, status, myMessagex);*/

	  //page2
	  NEXTION_SEND(huart6, 1, cell1, (int)(ecar.BMS.battery_voltage[0]*1000), myMessagex);
 8001e0a:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <start_nextion+0x2cc>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001f18 <start_nextion+0x2d0>
 8001e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1c:	ee17 2a90 	vmov	r2, s15
 8001e20:	4e3f      	ldr	r6, [pc, #252]	; (8001f20 <start_nextion+0x2d8>)
 8001e22:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <start_nextion+0x2dc>)
 8001e24:	9310      	str	r3, [sp, #64]	; 0x40
 8001e26:	920f      	str	r2, [sp, #60]	; 0x3c
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <start_nextion+0x2f8>)
 8001e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	930d      	str	r3, [sp, #52]	; 0x34
 8001e30:	466d      	mov	r5, sp
 8001e32:	f106 0410 	add.w	r4, r6, #16
 8001e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	602b      	str	r3, [r5, #0]
 8001e46:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e4a:	f7ff f93d 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell2, (int)(ecar.BMS.battery_voltage[1]*1000), myMessagex);
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <start_nextion+0x2cc>)
 8001e50:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e54:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001f18 <start_nextion+0x2d0>
 8001e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e60:	ee17 2a90 	vmov	r2, s15
 8001e64:	4e2e      	ldr	r6, [pc, #184]	; (8001f20 <start_nextion+0x2d8>)
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <start_nextion+0x2dc>)
 8001e68:	9310      	str	r3, [sp, #64]	; 0x40
 8001e6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <start_nextion+0x2fc>)
 8001e6e:	930e      	str	r3, [sp, #56]	; 0x38
 8001e70:	2301      	movs	r3, #1
 8001e72:	930d      	str	r3, [sp, #52]	; 0x34
 8001e74:	466d      	mov	r5, sp
 8001e76:	f106 0410 	add.w	r4, r6, #16
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	602b      	str	r3, [r5, #0]
 8001e8a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e8e:	f7ff f91b 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell3, (int)(ecar.BMS.battery_voltage[2]*1000), myMessagex);
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <start_nextion+0x2cc>)
 8001e94:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e98:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001f18 <start_nextion+0x2d0>
 8001e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea4:	ee17 2a90 	vmov	r2, s15
 8001ea8:	4e1d      	ldr	r6, [pc, #116]	; (8001f20 <start_nextion+0x2d8>)
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <start_nextion+0x2dc>)
 8001eac:	9310      	str	r3, [sp, #64]	; 0x40
 8001eae:	920f      	str	r2, [sp, #60]	; 0x3c
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <start_nextion+0x300>)
 8001eb2:	930e      	str	r3, [sp, #56]	; 0x38
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8001eb8:	466d      	mov	r5, sp
 8001eba:	f106 0410 	add.w	r4, r6, #16
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	602b      	str	r3, [r5, #0]
 8001ece:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ed2:	f7ff f8f9 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell4, (int)(ecar.BMS.battery_voltage[3]*1000), myMessagex);
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <start_nextion+0x2cc>)
 8001ed8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001edc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f18 <start_nextion+0x2d0>
 8001ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee8:	ee17 2a90 	vmov	r2, s15
 8001eec:	4e0c      	ldr	r6, [pc, #48]	; (8001f20 <start_nextion+0x2d8>)
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <start_nextion+0x2dc>)
 8001ef0:	9310      	str	r3, [sp, #64]	; 0x40
 8001ef2:	920f      	str	r2, [sp, #60]	; 0x3c
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <start_nextion+0x304>)
 8001ef6:	930e      	str	r3, [sp, #56]	; 0x38
 8001ef8:	2301      	movs	r3, #1
 8001efa:	930d      	str	r3, [sp, #52]	; 0x34
 8001efc:	466d      	mov	r5, sp
 8001efe:	f106 0410 	add.w	r4, r6, #16
 8001f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	602b      	str	r3, [r5, #0]
 8001f12:	e01d      	b.n	8001f50 <start_nextion+0x308>
 8001f14:	2000042c 	.word	0x2000042c
 8001f18:	447a0000 	.word	0x447a0000
 8001f1c:	42c9999a 	.word	0x42c9999a
 8001f20:	2000060c 	.word	0x2000060c
 8001f24:	200003f8 	.word	0x200003f8
 8001f28:	0800f284 	.word	0x0800f284
 8001f2c:	0800f288 	.word	0x0800f288
 8001f30:	0800f28c 	.word	0x0800f28c
 8001f34:	0800f290 	.word	0x0800f290
 8001f38:	0800f294 	.word	0x0800f294
 8001f3c:	0800f298 	.word	0x0800f298
 8001f40:	0800f29c 	.word	0x0800f29c
 8001f44:	0800f2a0 	.word	0x0800f2a0
 8001f48:	0800f2a4 	.word	0x0800f2a4
 8001f4c:	0800f2a8 	.word	0x0800f2a8
 8001f50:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f54:	f7ff f8b8 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell5, (int)(ecar.BMS.battery_voltage[4]*1000), myMessagex);
 8001f58:	4bad      	ldr	r3, [pc, #692]	; (8002210 <start_nextion+0x5c8>)
 8001f5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f5e:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8002214 <start_nextion+0x5cc>
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	ee17 2a90 	vmov	r2, s15
 8001f6e:	4eaa      	ldr	r6, [pc, #680]	; (8002218 <start_nextion+0x5d0>)
 8001f70:	4baa      	ldr	r3, [pc, #680]	; (800221c <start_nextion+0x5d4>)
 8001f72:	9310      	str	r3, [sp, #64]	; 0x40
 8001f74:	920f      	str	r2, [sp, #60]	; 0x3c
 8001f76:	4baa      	ldr	r3, [pc, #680]	; (8002220 <start_nextion+0x5d8>)
 8001f78:	930e      	str	r3, [sp, #56]	; 0x38
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8001f7e:	466d      	mov	r5, sp
 8001f80:	f106 0410 	add.w	r4, r6, #16
 8001f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	602b      	str	r3, [r5, #0]
 8001f94:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f98:	f7ff f896 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell6, (int)(ecar.BMS.battery_voltage[5]*1000), myMessagex);
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <start_nextion+0x5c8>)
 8001f9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fa2:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002214 <start_nextion+0x5cc>
 8001fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fae:	ee17 2a90 	vmov	r2, s15
 8001fb2:	4e99      	ldr	r6, [pc, #612]	; (8002218 <start_nextion+0x5d0>)
 8001fb4:	4b99      	ldr	r3, [pc, #612]	; (800221c <start_nextion+0x5d4>)
 8001fb6:	9310      	str	r3, [sp, #64]	; 0x40
 8001fb8:	920f      	str	r2, [sp, #60]	; 0x3c
 8001fba:	4b9a      	ldr	r3, [pc, #616]	; (8002224 <start_nextion+0x5dc>)
 8001fbc:	930e      	str	r3, [sp, #56]	; 0x38
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	930d      	str	r3, [sp, #52]	; 0x34
 8001fc2:	466d      	mov	r5, sp
 8001fc4:	f106 0410 	add.w	r4, r6, #16
 8001fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	602b      	str	r3, [r5, #0]
 8001fd8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001fdc:	f7ff f874 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell7, (int)(ecar.BMS.battery_voltage[6]*1000), myMessagex);
 8001fe0:	4b8b      	ldr	r3, [pc, #556]	; (8002210 <start_nextion+0x5c8>)
 8001fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fe6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002214 <start_nextion+0x5cc>
 8001fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff2:	ee17 2a90 	vmov	r2, s15
 8001ff6:	4e88      	ldr	r6, [pc, #544]	; (8002218 <start_nextion+0x5d0>)
 8001ff8:	4b88      	ldr	r3, [pc, #544]	; (800221c <start_nextion+0x5d4>)
 8001ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8001ffc:	920f      	str	r2, [sp, #60]	; 0x3c
 8001ffe:	4b8a      	ldr	r3, [pc, #552]	; (8002228 <start_nextion+0x5e0>)
 8002000:	930e      	str	r3, [sp, #56]	; 0x38
 8002002:	2301      	movs	r3, #1
 8002004:	930d      	str	r3, [sp, #52]	; 0x34
 8002006:	466d      	mov	r5, sp
 8002008:	f106 0410 	add.w	r4, r6, #16
 800200c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	602b      	str	r3, [r5, #0]
 800201c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002020:	f7ff f852 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell8, (int)(ecar.BMS.battery_voltage[7]*1000), myMessagex);
 8002024:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <start_nextion+0x5c8>)
 8002026:	edd3 7a07 	vldr	s15, [r3, #28]
 800202a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002214 <start_nextion+0x5cc>
 800202e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002036:	ee17 2a90 	vmov	r2, s15
 800203a:	4e77      	ldr	r6, [pc, #476]	; (8002218 <start_nextion+0x5d0>)
 800203c:	4b77      	ldr	r3, [pc, #476]	; (800221c <start_nextion+0x5d4>)
 800203e:	9310      	str	r3, [sp, #64]	; 0x40
 8002040:	920f      	str	r2, [sp, #60]	; 0x3c
 8002042:	4b7a      	ldr	r3, [pc, #488]	; (800222c <start_nextion+0x5e4>)
 8002044:	930e      	str	r3, [sp, #56]	; 0x38
 8002046:	2301      	movs	r3, #1
 8002048:	930d      	str	r3, [sp, #52]	; 0x34
 800204a:	466d      	mov	r5, sp
 800204c:	f106 0410 	add.w	r4, r6, #16
 8002050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	602b      	str	r3, [r5, #0]
 8002060:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002064:	f7ff f830 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell9, (int)(ecar.BMS.battery_voltage[8]*1000), myMessagex);
 8002068:	4b69      	ldr	r3, [pc, #420]	; (8002210 <start_nextion+0x5c8>)
 800206a:	edd3 7a08 	vldr	s15, [r3, #32]
 800206e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002214 <start_nextion+0x5cc>
 8002072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207a:	ee17 2a90 	vmov	r2, s15
 800207e:	4e66      	ldr	r6, [pc, #408]	; (8002218 <start_nextion+0x5d0>)
 8002080:	4b66      	ldr	r3, [pc, #408]	; (800221c <start_nextion+0x5d4>)
 8002082:	9310      	str	r3, [sp, #64]	; 0x40
 8002084:	920f      	str	r2, [sp, #60]	; 0x3c
 8002086:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <start_nextion+0x5e8>)
 8002088:	930e      	str	r3, [sp, #56]	; 0x38
 800208a:	2301      	movs	r3, #1
 800208c:	930d      	str	r3, [sp, #52]	; 0x34
 800208e:	466d      	mov	r5, sp
 8002090:	f106 0410 	add.w	r4, r6, #16
 8002094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	602b      	str	r3, [r5, #0]
 80020a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020a8:	f7ff f80e 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell10, (int)(ecar.BMS.battery_voltage[9]*1000), myMessagex);
 80020ac:	4b58      	ldr	r3, [pc, #352]	; (8002210 <start_nextion+0x5c8>)
 80020ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80020b2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002214 <start_nextion+0x5cc>
 80020b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020be:	ee17 2a90 	vmov	r2, s15
 80020c2:	4e55      	ldr	r6, [pc, #340]	; (8002218 <start_nextion+0x5d0>)
 80020c4:	4b55      	ldr	r3, [pc, #340]	; (800221c <start_nextion+0x5d4>)
 80020c6:	9310      	str	r3, [sp, #64]	; 0x40
 80020c8:	920f      	str	r2, [sp, #60]	; 0x3c
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <start_nextion+0x5ec>)
 80020cc:	930e      	str	r3, [sp, #56]	; 0x38
 80020ce:	2301      	movs	r3, #1
 80020d0:	930d      	str	r3, [sp, #52]	; 0x34
 80020d2:	466d      	mov	r5, sp
 80020d4:	f106 0410 	add.w	r4, r6, #16
 80020d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	602b      	str	r3, [r5, #0]
 80020e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020ec:	f7fe ffec 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell11, (int)(ecar.BMS.battery_voltage[10]*1000), myMessagex);
 80020f0:	4b47      	ldr	r3, [pc, #284]	; (8002210 <start_nextion+0x5c8>)
 80020f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020f6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002214 <start_nextion+0x5cc>
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002102:	ee17 2a90 	vmov	r2, s15
 8002106:	4e44      	ldr	r6, [pc, #272]	; (8002218 <start_nextion+0x5d0>)
 8002108:	4b44      	ldr	r3, [pc, #272]	; (800221c <start_nextion+0x5d4>)
 800210a:	9310      	str	r3, [sp, #64]	; 0x40
 800210c:	920f      	str	r2, [sp, #60]	; 0x3c
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <start_nextion+0x5f0>)
 8002110:	930e      	str	r3, [sp, #56]	; 0x38
 8002112:	2301      	movs	r3, #1
 8002114:	930d      	str	r3, [sp, #52]	; 0x34
 8002116:	466d      	mov	r5, sp
 8002118:	f106 0410 	add.w	r4, r6, #16
 800211c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	602b      	str	r3, [r5, #0]
 800212c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002130:	f7fe ffca 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell12, (int)(ecar.BMS.battery_voltage[11]*1000), myMessagex);
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <start_nextion+0x5c8>)
 8002136:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800213a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002214 <start_nextion+0x5cc>
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002146:	ee17 2a90 	vmov	r2, s15
 800214a:	4e33      	ldr	r6, [pc, #204]	; (8002218 <start_nextion+0x5d0>)
 800214c:	4b33      	ldr	r3, [pc, #204]	; (800221c <start_nextion+0x5d4>)
 800214e:	9310      	str	r3, [sp, #64]	; 0x40
 8002150:	920f      	str	r2, [sp, #60]	; 0x3c
 8002152:	4b3a      	ldr	r3, [pc, #232]	; (800223c <start_nextion+0x5f4>)
 8002154:	930e      	str	r3, [sp, #56]	; 0x38
 8002156:	2301      	movs	r3, #1
 8002158:	930d      	str	r3, [sp, #52]	; 0x34
 800215a:	466d      	mov	r5, sp
 800215c:	f106 0410 	add.w	r4, r6, #16
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	602b      	str	r3, [r5, #0]
 8002170:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002174:	f7fe ffa8 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell13, (int)(ecar.BMS.battery_voltage[12]*1000), myMessagex);
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <start_nextion+0x5c8>)
 800217a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800217e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002214 <start_nextion+0x5cc>
 8002182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800218a:	ee17 2a90 	vmov	r2, s15
 800218e:	4e22      	ldr	r6, [pc, #136]	; (8002218 <start_nextion+0x5d0>)
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <start_nextion+0x5d4>)
 8002192:	9310      	str	r3, [sp, #64]	; 0x40
 8002194:	920f      	str	r2, [sp, #60]	; 0x3c
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <start_nextion+0x5f8>)
 8002198:	930e      	str	r3, [sp, #56]	; 0x38
 800219a:	2301      	movs	r3, #1
 800219c:	930d      	str	r3, [sp, #52]	; 0x34
 800219e:	466d      	mov	r5, sp
 80021a0:	f106 0410 	add.w	r4, r6, #16
 80021a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	602b      	str	r3, [r5, #0]
 80021b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021b8:	f7fe ff86 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell14, (int)(ecar.BMS.battery_voltage[13]*1000), myMessagex);
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <start_nextion+0x5c8>)
 80021be:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80021c2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002214 <start_nextion+0x5cc>
 80021c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ce:	ee17 2a90 	vmov	r2, s15
 80021d2:	4e11      	ldr	r6, [pc, #68]	; (8002218 <start_nextion+0x5d0>)
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <start_nextion+0x5d4>)
 80021d6:	9310      	str	r3, [sp, #64]	; 0x40
 80021d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <start_nextion+0x5fc>)
 80021dc:	930e      	str	r3, [sp, #56]	; 0x38
 80021de:	2301      	movs	r3, #1
 80021e0:	930d      	str	r3, [sp, #52]	; 0x34
 80021e2:	466d      	mov	r5, sp
 80021e4:	f106 0410 	add.w	r4, r6, #16
 80021e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	602b      	str	r3, [r5, #0]
 80021f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021fc:	f7fe ff64 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell15, (int)(ecar.BMS.battery_voltage[14]*1000), myMessagex);
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <start_nextion+0x5c8>)
 8002202:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002206:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8002214 <start_nextion+0x5cc>
 800220a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220e:	e01b      	b.n	8002248 <start_nextion+0x600>
 8002210:	2000042c 	.word	0x2000042c
 8002214:	447a0000 	.word	0x447a0000
 8002218:	2000060c 	.word	0x2000060c
 800221c:	200003f8 	.word	0x200003f8
 8002220:	0800f2ac 	.word	0x0800f2ac
 8002224:	0800f2b0 	.word	0x0800f2b0
 8002228:	0800f2b4 	.word	0x0800f2b4
 800222c:	0800f2b8 	.word	0x0800f2b8
 8002230:	0800f2bc 	.word	0x0800f2bc
 8002234:	0800f2c0 	.word	0x0800f2c0
 8002238:	0800f2c4 	.word	0x0800f2c4
 800223c:	0800f2c8 	.word	0x0800f2c8
 8002240:	0800f2cc 	.word	0x0800f2cc
 8002244:	0800f2d0 	.word	0x0800f2d0
 8002248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800224c:	ee17 2a90 	vmov	r2, s15
 8002250:	4eab      	ldr	r6, [pc, #684]	; (8002500 <start_nextion+0x8b8>)
 8002252:	4bac      	ldr	r3, [pc, #688]	; (8002504 <start_nextion+0x8bc>)
 8002254:	9310      	str	r3, [sp, #64]	; 0x40
 8002256:	920f      	str	r2, [sp, #60]	; 0x3c
 8002258:	4bab      	ldr	r3, [pc, #684]	; (8002508 <start_nextion+0x8c0>)
 800225a:	930e      	str	r3, [sp, #56]	; 0x38
 800225c:	2301      	movs	r3, #1
 800225e:	930d      	str	r3, [sp, #52]	; 0x34
 8002260:	466d      	mov	r5, sp
 8002262:	f106 0410 	add.w	r4, r6, #16
 8002266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	602b      	str	r3, [r5, #0]
 8002276:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800227a:	f7fe ff25 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell16, (int)(ecar.BMS.battery_voltage[15]*1000), myMessagex);
 800227e:	4ba3      	ldr	r3, [pc, #652]	; (800250c <start_nextion+0x8c4>)
 8002280:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002284:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002510 <start_nextion+0x8c8>
 8002288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002290:	ee17 2a90 	vmov	r2, s15
 8002294:	4e9a      	ldr	r6, [pc, #616]	; (8002500 <start_nextion+0x8b8>)
 8002296:	4b9b      	ldr	r3, [pc, #620]	; (8002504 <start_nextion+0x8bc>)
 8002298:	9310      	str	r3, [sp, #64]	; 0x40
 800229a:	920f      	str	r2, [sp, #60]	; 0x3c
 800229c:	4b9d      	ldr	r3, [pc, #628]	; (8002514 <start_nextion+0x8cc>)
 800229e:	930e      	str	r3, [sp, #56]	; 0x38
 80022a0:	2301      	movs	r3, #1
 80022a2:	930d      	str	r3, [sp, #52]	; 0x34
 80022a4:	466d      	mov	r5, sp
 80022a6:	f106 0410 	add.w	r4, r6, #16
 80022aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	602b      	str	r3, [r5, #0]
 80022ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80022be:	f7fe ff03 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell17, (int)(ecar.BMS.battery_voltage[16]*1000), myMessagex);
 80022c2:	4b92      	ldr	r3, [pc, #584]	; (800250c <start_nextion+0x8c4>)
 80022c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80022c8:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002510 <start_nextion+0x8c8>
 80022cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d4:	ee17 2a90 	vmov	r2, s15
 80022d8:	4e89      	ldr	r6, [pc, #548]	; (8002500 <start_nextion+0x8b8>)
 80022da:	4b8a      	ldr	r3, [pc, #552]	; (8002504 <start_nextion+0x8bc>)
 80022dc:	9310      	str	r3, [sp, #64]	; 0x40
 80022de:	920f      	str	r2, [sp, #60]	; 0x3c
 80022e0:	4b8d      	ldr	r3, [pc, #564]	; (8002518 <start_nextion+0x8d0>)
 80022e2:	930e      	str	r3, [sp, #56]	; 0x38
 80022e4:	2301      	movs	r3, #1
 80022e6:	930d      	str	r3, [sp, #52]	; 0x34
 80022e8:	466d      	mov	r5, sp
 80022ea:	f106 0410 	add.w	r4, r6, #16
 80022ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	602b      	str	r3, [r5, #0]
 80022fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002302:	f7fe fee1 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell18, (int)(ecar.BMS.battery_voltage[17]*1000), myMessagex);
 8002306:	4b81      	ldr	r3, [pc, #516]	; (800250c <start_nextion+0x8c4>)
 8002308:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800230c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002510 <start_nextion+0x8c8>
 8002310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002318:	ee17 2a90 	vmov	r2, s15
 800231c:	4e78      	ldr	r6, [pc, #480]	; (8002500 <start_nextion+0x8b8>)
 800231e:	4b79      	ldr	r3, [pc, #484]	; (8002504 <start_nextion+0x8bc>)
 8002320:	9310      	str	r3, [sp, #64]	; 0x40
 8002322:	920f      	str	r2, [sp, #60]	; 0x3c
 8002324:	4b7d      	ldr	r3, [pc, #500]	; (800251c <start_nextion+0x8d4>)
 8002326:	930e      	str	r3, [sp, #56]	; 0x38
 8002328:	2301      	movs	r3, #1
 800232a:	930d      	str	r3, [sp, #52]	; 0x34
 800232c:	466d      	mov	r5, sp
 800232e:	f106 0410 	add.w	r4, r6, #16
 8002332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	602b      	str	r3, [r5, #0]
 8002342:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002346:	f7fe febf 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell19, (int)(ecar.BMS.battery_voltage[18]*1000), myMessagex);
 800234a:	4b70      	ldr	r3, [pc, #448]	; (800250c <start_nextion+0x8c4>)
 800234c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002350:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002510 <start_nextion+0x8c8>
 8002354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235c:	ee17 2a90 	vmov	r2, s15
 8002360:	4e67      	ldr	r6, [pc, #412]	; (8002500 <start_nextion+0x8b8>)
 8002362:	4b68      	ldr	r3, [pc, #416]	; (8002504 <start_nextion+0x8bc>)
 8002364:	9310      	str	r3, [sp, #64]	; 0x40
 8002366:	920f      	str	r2, [sp, #60]	; 0x3c
 8002368:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <start_nextion+0x8d8>)
 800236a:	930e      	str	r3, [sp, #56]	; 0x38
 800236c:	2301      	movs	r3, #1
 800236e:	930d      	str	r3, [sp, #52]	; 0x34
 8002370:	466d      	mov	r5, sp
 8002372:	f106 0410 	add.w	r4, r6, #16
 8002376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	602b      	str	r3, [r5, #0]
 8002386:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800238a:	f7fe fe9d 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell20, (int)(ecar.BMS.battery_voltage[19]*1000), myMessagex);
 800238e:	4b5f      	ldr	r3, [pc, #380]	; (800250c <start_nextion+0x8c4>)
 8002390:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002394:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002510 <start_nextion+0x8c8>
 8002398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a0:	ee17 2a90 	vmov	r2, s15
 80023a4:	4e56      	ldr	r6, [pc, #344]	; (8002500 <start_nextion+0x8b8>)
 80023a6:	4b57      	ldr	r3, [pc, #348]	; (8002504 <start_nextion+0x8bc>)
 80023a8:	9310      	str	r3, [sp, #64]	; 0x40
 80023aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80023ac:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <start_nextion+0x8dc>)
 80023ae:	930e      	str	r3, [sp, #56]	; 0x38
 80023b0:	2301      	movs	r3, #1
 80023b2:	930d      	str	r3, [sp, #52]	; 0x34
 80023b4:	466d      	mov	r5, sp
 80023b6:	f106 0410 	add.w	r4, r6, #16
 80023ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	602b      	str	r3, [r5, #0]
 80023ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80023ce:	f7fe fe7b 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell21, (int)(ecar.BMS.battery_voltage[20]*1000), myMessagex);
 80023d2:	4b4e      	ldr	r3, [pc, #312]	; (800250c <start_nextion+0x8c4>)
 80023d4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80023d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002510 <start_nextion+0x8c8>
 80023dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e4:	ee17 2a90 	vmov	r2, s15
 80023e8:	4e45      	ldr	r6, [pc, #276]	; (8002500 <start_nextion+0x8b8>)
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <start_nextion+0x8bc>)
 80023ec:	9310      	str	r3, [sp, #64]	; 0x40
 80023ee:	920f      	str	r2, [sp, #60]	; 0x3c
 80023f0:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <start_nextion+0x8e0>)
 80023f2:	930e      	str	r3, [sp, #56]	; 0x38
 80023f4:	2301      	movs	r3, #1
 80023f6:	930d      	str	r3, [sp, #52]	; 0x34
 80023f8:	466d      	mov	r5, sp
 80023fa:	f106 0410 	add.w	r4, r6, #16
 80023fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	602b      	str	r3, [r5, #0]
 800240e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002412:	f7fe fe59 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell22, (int)(ecar.BMS.battery_voltage[21]*1000), myMessagex);
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <start_nextion+0x8c4>)
 8002418:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800241c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002510 <start_nextion+0x8c8>
 8002420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002428:	ee17 2a90 	vmov	r2, s15
 800242c:	4e34      	ldr	r6, [pc, #208]	; (8002500 <start_nextion+0x8b8>)
 800242e:	4b35      	ldr	r3, [pc, #212]	; (8002504 <start_nextion+0x8bc>)
 8002430:	9310      	str	r3, [sp, #64]	; 0x40
 8002432:	920f      	str	r2, [sp, #60]	; 0x3c
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <start_nextion+0x8e4>)
 8002436:	930e      	str	r3, [sp, #56]	; 0x38
 8002438:	2301      	movs	r3, #1
 800243a:	930d      	str	r3, [sp, #52]	; 0x34
 800243c:	466d      	mov	r5, sp
 800243e:	f106 0410 	add.w	r4, r6, #16
 8002442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	602b      	str	r3, [r5, #0]
 8002452:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002456:	f7fe fe37 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell23, (int)(ecar.BMS.battery_voltage[22]*1000), myMessagex);
 800245a:	4b2c      	ldr	r3, [pc, #176]	; (800250c <start_nextion+0x8c4>)
 800245c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002460:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002510 <start_nextion+0x8c8>
 8002464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246c:	ee17 2a90 	vmov	r2, s15
 8002470:	4e23      	ldr	r6, [pc, #140]	; (8002500 <start_nextion+0x8b8>)
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <start_nextion+0x8bc>)
 8002474:	9310      	str	r3, [sp, #64]	; 0x40
 8002476:	920f      	str	r2, [sp, #60]	; 0x3c
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <start_nextion+0x8e8>)
 800247a:	930e      	str	r3, [sp, #56]	; 0x38
 800247c:	2301      	movs	r3, #1
 800247e:	930d      	str	r3, [sp, #52]	; 0x34
 8002480:	466d      	mov	r5, sp
 8002482:	f106 0410 	add.w	r4, r6, #16
 8002486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	602b      	str	r3, [r5, #0]
 8002496:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800249a:	f7fe fe15 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, cell24, (int)(ecar.BMS.battery_voltage[23]*1000), myMessagex);
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <start_nextion+0x8c4>)
 80024a0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80024a4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002510 <start_nextion+0x8c8>
 80024a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b0:	ee17 2a90 	vmov	r2, s15
 80024b4:	4e12      	ldr	r6, [pc, #72]	; (8002500 <start_nextion+0x8b8>)
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <start_nextion+0x8bc>)
 80024b8:	9310      	str	r3, [sp, #64]	; 0x40
 80024ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <start_nextion+0x8ec>)
 80024be:	930e      	str	r3, [sp, #56]	; 0x38
 80024c0:	2301      	movs	r3, #1
 80024c2:	930d      	str	r3, [sp, #52]	; 0x34
 80024c4:	466d      	mov	r5, sp
 80024c6:	f106 0410 	add.w	r4, r6, #16
 80024ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	602b      	str	r3, [r5, #0]
 80024da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80024de:	f7fe fdf3 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, max_cell, ecar.BMS.max_battery, myMessagex);
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <start_nextion+0x8c4>)
 80024e4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80024e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ec:	ee17 2a90 	vmov	r2, s15
 80024f0:	4e03      	ldr	r6, [pc, #12]	; (8002500 <start_nextion+0x8b8>)
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <start_nextion+0x8bc>)
 80024f4:	9310      	str	r3, [sp, #64]	; 0x40
 80024f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <start_nextion+0x8f0>)
 80024fa:	930e      	str	r3, [sp, #56]	; 0x38
 80024fc:	e01e      	b.n	800253c <start_nextion+0x8f4>
 80024fe:	bf00      	nop
 8002500:	2000060c 	.word	0x2000060c
 8002504:	200003f8 	.word	0x200003f8
 8002508:	0800f2d4 	.word	0x0800f2d4
 800250c:	2000042c 	.word	0x2000042c
 8002510:	447a0000 	.word	0x447a0000
 8002514:	0800f2d8 	.word	0x0800f2d8
 8002518:	0800f2dc 	.word	0x0800f2dc
 800251c:	0800f2e0 	.word	0x0800f2e0
 8002520:	0800f2e4 	.word	0x0800f2e4
 8002524:	0800f2e8 	.word	0x0800f2e8
 8002528:	0800f2ec 	.word	0x0800f2ec
 800252c:	0800f2f0 	.word	0x0800f2f0
 8002530:	0800f2f4 	.word	0x0800f2f4
 8002534:	0800f2f8 	.word	0x0800f2f8
 8002538:	0800f2fc 	.word	0x0800f2fc
 800253c:	2301      	movs	r3, #1
 800253e:	930d      	str	r3, [sp, #52]	; 0x34
 8002540:	466d      	mov	r5, sp
 8002542:	f106 0410 	add.w	r4, r6, #16
 8002546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	602b      	str	r3, [r5, #0]
 8002556:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800255a:	f7fe fdb5 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 1, min_cell, ecar.BMS.min_battery, myMessagex);
 800255e:	4b48      	ldr	r3, [pc, #288]	; (8002680 <start_nextion+0xa38>)
 8002560:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002568:	ee17 2a90 	vmov	r2, s15
 800256c:	4e45      	ldr	r6, [pc, #276]	; (8002684 <start_nextion+0xa3c>)
 800256e:	4b46      	ldr	r3, [pc, #280]	; (8002688 <start_nextion+0xa40>)
 8002570:	9310      	str	r3, [sp, #64]	; 0x40
 8002572:	920f      	str	r2, [sp, #60]	; 0x3c
 8002574:	4b45      	ldr	r3, [pc, #276]	; (800268c <start_nextion+0xa44>)
 8002576:	930e      	str	r3, [sp, #56]	; 0x38
 8002578:	2301      	movs	r3, #1
 800257a:	930d      	str	r3, [sp, #52]	; 0x34
 800257c:	466d      	mov	r5, sp
 800257e:	f106 0410 	add.w	r4, r6, #16
 8002582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	602b      	str	r3, [r5, #0]
 8002592:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002596:	f7fe fd97 	bl	80010c8 <NEXTION_SEND>

	  //page3
	  NEXTION_SEND(huart6, 2, charge_code, ecar.BMS.bms_error_code, myMessagex);
 800259a:	4b39      	ldr	r3, [pc, #228]	; (8002680 <start_nextion+0xa38>)
 800259c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80025a0:	461a      	mov	r2, r3
 80025a2:	4e38      	ldr	r6, [pc, #224]	; (8002684 <start_nextion+0xa3c>)
 80025a4:	4b38      	ldr	r3, [pc, #224]	; (8002688 <start_nextion+0xa40>)
 80025a6:	9310      	str	r3, [sp, #64]	; 0x40
 80025a8:	920f      	str	r2, [sp, #60]	; 0x3c
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <start_nextion+0xa48>)
 80025ac:	930e      	str	r3, [sp, #56]	; 0x38
 80025ae:	2302      	movs	r3, #2
 80025b0:	930d      	str	r3, [sp, #52]	; 0x34
 80025b2:	466d      	mov	r5, sp
 80025b4:	f106 0410 	add.w	r4, r6, #16
 80025b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	602b      	str	r3, [r5, #0]
 80025c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025cc:	f7fe fd7c 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 0, voltage_err_code, ecar.CHARGER.voltage_error, myMessagex);
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <start_nextion+0xa38>)
 80025d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80025d6:	461a      	mov	r2, r3
 80025d8:	4e2a      	ldr	r6, [pc, #168]	; (8002684 <start_nextion+0xa3c>)
 80025da:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <start_nextion+0xa40>)
 80025dc:	9310      	str	r3, [sp, #64]	; 0x40
 80025de:	920f      	str	r2, [sp, #60]	; 0x3c
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <start_nextion+0xa4c>)
 80025e2:	930e      	str	r3, [sp, #56]	; 0x38
 80025e4:	2300      	movs	r3, #0
 80025e6:	930d      	str	r3, [sp, #52]	; 0x34
 80025e8:	466d      	mov	r5, sp
 80025ea:	f106 0410 	add.w	r4, r6, #16
 80025ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	602b      	str	r3, [r5, #0]
 80025fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002602:	f7fe fd61 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 0, current_err_code, ecar.CHARGER.current_error, myMessagex);
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <start_nextion+0xa38>)
 8002608:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800260c:	461a      	mov	r2, r3
 800260e:	4e1d      	ldr	r6, [pc, #116]	; (8002684 <start_nextion+0xa3c>)
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <start_nextion+0xa40>)
 8002612:	9310      	str	r3, [sp, #64]	; 0x40
 8002614:	920f      	str	r2, [sp, #60]	; 0x3c
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <start_nextion+0xa50>)
 8002618:	930e      	str	r3, [sp, #56]	; 0x38
 800261a:	2300      	movs	r3, #0
 800261c:	930d      	str	r3, [sp, #52]	; 0x34
 800261e:	466d      	mov	r5, sp
 8002620:	f106 0410 	add.w	r4, r6, #16
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	602b      	str	r3, [r5, #0]
 8002634:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002638:	f7fe fd46 	bl	80010c8 <NEXTION_SEND>
	  NEXTION_SEND(huart6, 0, temperature_err_code, ecar.CHARGER.temperature_error, myMessagex);
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <start_nextion+0xa38>)
 800263e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002642:	461a      	mov	r2, r3
 8002644:	4e0f      	ldr	r6, [pc, #60]	; (8002684 <start_nextion+0xa3c>)
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <start_nextion+0xa40>)
 8002648:	9310      	str	r3, [sp, #64]	; 0x40
 800264a:	920f      	str	r2, [sp, #60]	; 0x3c
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <start_nextion+0xa54>)
 800264e:	930e      	str	r3, [sp, #56]	; 0x38
 8002650:	2300      	movs	r3, #0
 8002652:	930d      	str	r3, [sp, #52]	; 0x34
 8002654:	466d      	mov	r5, sp
 8002656:	f106 0410 	add.w	r4, r6, #16
 800265a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	602b      	str	r3, [r5, #0]
 800266a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800266e:	f7fe fd2b 	bl	80010c8 <NEXTION_SEND>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002676:	480a      	ldr	r0, [pc, #40]	; (80026a0 <start_nextion+0xa58>)
 8002678:	f002 fea5 	bl	80053c6 <HAL_GPIO_TogglePin>
	  if(ecar.CHARGER.start_charge_state=='S'){
 800267c:	f7ff bae8 	b.w	8001c50 <start_nextion+0x8>
 8002680:	2000042c 	.word	0x2000042c
 8002684:	2000060c 	.word	0x2000060c
 8002688:	200003f8 	.word	0x200003f8
 800268c:	0800f300 	.word	0x0800f300
 8002690:	0800f304 	.word	0x0800f304
 8002694:	0800f308 	.word	0x0800f308
 8002698:	0800f30c 	.word	0x0800f30c
 800269c:	0800f310 	.word	0x0800f310
 80026a0:	40020c00 	.word	0x40020c00

080026a4 <start_rf>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_rf */
void start_rf(void *argument)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_rf */
  /* Infinite loop */
  for(;;)
  {
	  //deneme();
	  if(prepare_data()){
 80026ac:	f7fe fe1a 	bl	80012e4 <prepare_data>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0fa      	beq.n	80026ac <start_rf+0x8>
		 HAL_UART_Transmit(&huart2, (uint8_t*)arr, strlen(arr), 1000);
 80026b6:	480b      	ldr	r0, [pc, #44]	; (80026e4 <start_rf+0x40>)
 80026b8:	f7fd fd8a 	bl	80001d0 <strlen>
 80026bc:	4603      	mov	r3, r0
 80026be:	b29a      	uxth	r2, r3
 80026c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <start_rf+0x40>)
 80026c6:	4808      	ldr	r0, [pc, #32]	; (80026e8 <start_rf+0x44>)
 80026c8:	f004 fff7 	bl	80076ba <HAL_UART_Transmit>
		 memset(arr, 0, 300 * sizeof(char));
 80026cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d0:	2100      	movs	r1, #0
 80026d2:	4804      	ldr	r0, [pc, #16]	; (80026e4 <start_rf+0x40>)
 80026d4:	f008 f8e2 	bl	800a89c <memset>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80026d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <start_rf+0x48>)
 80026de:	f002 fe72 	bl	80053c6 <HAL_GPIO_TogglePin>
	  if(prepare_data()){
 80026e2:	e7e3      	b.n	80026ac <start_rf+0x8>
 80026e4:	20000268 	.word	0x20000268
 80026e8:	200005c8 	.word	0x200005c8
 80026ec:	40020c00 	.word	0x40020c00

080026f0 <start_can>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_can */
void start_can(void *argument)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_can */
	pTxHeader.StdId = 0x10;
 80026f8:	4b98      	ldr	r3, [pc, #608]	; (800295c <start_can+0x26c>)
 80026fa:	2210      	movs	r2, #16
 80026fc:	601a      	str	r2, [r3, #0]
	pTxHeader.DLC = 1;
 80026fe:	4b97      	ldr	r3, [pc, #604]	; (800295c <start_can+0x26c>)
 8002700:	2201      	movs	r2, #1
 8002702:	611a      	str	r2, [r3, #16]
	int check_charge_loop=0;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint8_t receive_flag=0;
 8002708:	2300      	movs	r3, #0
 800270a:	72fb      	strb	r3, [r7, #11]
	  //__________CHARGER___________

	  if(ecar.CHARGER.start_charge_state==(int)'I' || check_charge_loop<3){
 800270c:	4b94      	ldr	r3, [pc, #592]	; (8002960 <start_can+0x270>)
 800270e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002712:	2b49      	cmp	r3, #73	; 0x49
 8002714:	d002      	beq.n	800271c <start_can+0x2c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b02      	cmp	r3, #2
 800271a:	dc47      	bgt.n	80027ac <start_can+0xbc>
		  if(ecar.CHARGER.start_charge_state ==(int)'S' && ecar.BMS.bms_error_code){
 800271c:	4b90      	ldr	r3, [pc, #576]	; (8002960 <start_can+0x270>)
 800271e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002722:	2b53      	cmp	r3, #83	; 0x53
 8002724:	d111      	bne.n	800274a <start_can+0x5a>
 8002726:	4b8e      	ldr	r3, [pc, #568]	; (8002960 <start_can+0x270>)
 8002728:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <start_can+0x5a>
			 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, (uint8_t*)41, &pTxMailbox);  //start charger
 8002730:	4b8c      	ldr	r3, [pc, #560]	; (8002964 <start_can+0x274>)
 8002732:	2229      	movs	r2, #41	; 0x29
 8002734:	4989      	ldr	r1, [pc, #548]	; (800295c <start_can+0x26c>)
 8002736:	488c      	ldr	r0, [pc, #560]	; (8002968 <start_can+0x278>)
 8002738:	f001 fed6 	bl	80044e8 <HAL_CAN_AddTxMessage>
			 //WaitForMission(0x19, 0x10, 100, 41);
			 ecar.CHARGER.start_charge_state = 'I';
 800273c:	4b88      	ldr	r3, [pc, #544]	; (8002960 <start_can+0x270>)
 800273e:	2249      	movs	r2, #73	; 0x49
 8002740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			 check_charge_loop=0;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e027      	b.n	800279a <start_can+0xaa>
		  }
		  else if((ecar.CHARGER.start_charge_state ==(int)'B' && ecar.BMS.bms_error_code!=1) && check_charge_loop<3 ){
 800274a:	4b85      	ldr	r3, [pc, #532]	; (8002960 <start_can+0x270>)
 800274c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002750:	2b42      	cmp	r3, #66	; 0x42
 8002752:	d111      	bne.n	8002778 <start_can+0x88>
 8002754:	4b82      	ldr	r3, [pc, #520]	; (8002960 <start_can+0x270>)
 8002756:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800275a:	2b01      	cmp	r3, #1
 800275c:	d00c      	beq.n	8002778 <start_can+0x88>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b02      	cmp	r3, #2
 8002762:	dc09      	bgt.n	8002778 <start_can+0x88>
			  //HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, (uint8_t*)40, &pTxMailbox);  //check bms
			  WaitForMission(0x19, 0x10, 100, 40);
 8002764:	2328      	movs	r3, #40	; 0x28
 8002766:	2264      	movs	r2, #100	; 0x64
 8002768:	2110      	movs	r1, #16
 800276a:	2019      	movs	r0, #25
 800276c:	f7fe fe98 	bl	80014a0 <WaitForMission>
			  check_charge_loop++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3301      	adds	r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e010      	b.n	800279a <start_can+0xaa>
		  }
		  else if(ecar.CHARGER.start_charge_state==(int)'C'){
 8002778:	4b79      	ldr	r3, [pc, #484]	; (8002960 <start_can+0x270>)
 800277a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800277e:	2b43      	cmp	r3, #67	; 0x43
 8002780:	d10b      	bne.n	800279a <start_can+0xaa>
			  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, (uint8_t*)82, &pTxMailbox);  //operation cancel
 8002782:	4b78      	ldr	r3, [pc, #480]	; (8002964 <start_can+0x274>)
 8002784:	2252      	movs	r2, #82	; 0x52
 8002786:	4975      	ldr	r1, [pc, #468]	; (800295c <start_can+0x26c>)
 8002788:	4877      	ldr	r0, [pc, #476]	; (8002968 <start_can+0x278>)
 800278a:	f001 fead 	bl	80044e8 <HAL_CAN_AddTxMessage>
			  //WaitForMission(0x19, 0x10, 100, 41);
			  ecar.CHARGER.start_charge_state = 'I';
 800278e:	4b74      	ldr	r3, [pc, #464]	; (8002960 <start_can+0x270>)
 8002790:	2249      	movs	r2, #73	; 0x49
 8002792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			  check_charge_loop=0;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
		  }
		  if(check_charge_loop==3){
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d105      	bne.n	80027ac <start_can+0xbc>
			  ecar.CHARGER.start_charge_state = 'I';
 80027a0:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <start_can+0x270>)
 80027a2:	2249      	movs	r2, #73	; 0x49
 80027a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			  check_charge_loop=0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
		  }
	  }
	  //__________CHARGER___________

	  HAL_Delay(50);
 80027ac:	2032      	movs	r0, #50	; 0x32
 80027ae:	f001 f923 	bl	80039f8 <HAL_Delay>

	  if(!(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, RxData))){
 80027b2:	4b6e      	ldr	r3, [pc, #440]	; (800296c <start_can+0x27c>)
 80027b4:	4a6e      	ldr	r2, [pc, #440]	; (8002970 <start_can+0x280>)
 80027b6:	2100      	movs	r1, #0
 80027b8:	486b      	ldr	r0, [pc, #428]	; (8002968 <start_can+0x278>)
 80027ba:	f001 ff70 	bl	800469e <HAL_CAN_GetRxMessage>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1a1      	bne.n	8002708 <start_can+0x18>
	  switch (pRxHeader.StdId) {
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <start_can+0x280>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3b12      	subs	r3, #18
 80027ca:	2b14      	cmp	r3, #20
 80027cc:	f200 8299 	bhi.w	8002d02 <start_can+0x612>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <start_can+0xe8>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	0800282d 	.word	0x0800282d
 80027dc:	08002d03 	.word	0x08002d03
 80027e0:	080028af 	.word	0x080028af
 80027e4:	08002d03 	.word	0x08002d03
 80027e8:	080028d9 	.word	0x080028d9
 80027ec:	08002d03 	.word	0x08002d03
 80027f0:	08002d03 	.word	0x08002d03
 80027f4:	08002941 	.word	0x08002941
 80027f8:	08002d03 	.word	0x08002d03
 80027fc:	08002d03 	.word	0x08002d03
 8002800:	08002d03 	.word	0x08002d03
 8002804:	08002d03 	.word	0x08002d03
 8002808:	08002d03 	.word	0x08002d03
 800280c:	08002d03 	.word	0x08002d03
 8002810:	0800297d 	.word	0x0800297d
 8002814:	08002a0d 	.word	0x08002a0d
 8002818:	08002a9d 	.word	0x08002a9d
 800281c:	08002b2d 	.word	0x08002b2d
 8002820:	08002bbd 	.word	0x08002bbd
 8002824:	08002c59 	.word	0x08002c59
 8002828:	08002ce9 	.word	0x08002ce9
	  	case 0x12:
	  		//for if 5.input is direction : => 0b0001 0000 = 16
	  		decimal_to_bin(RxData[0]);
 800282c:	4b4f      	ldr	r3, [pc, #316]	; (800296c <start_can+0x27c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fdbd 	bl	80013b0 <decimal_to_bin>

	  		ecar.RELAY.stop_ = dest[0];
 8002836:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <start_can+0x284>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b48      	ldr	r3, [pc, #288]	; (8002960 <start_can+0x270>)
 800283e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			ecar.RELAY.hazard_ = dest[1];
 8002842:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <start_can+0x284>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	4b45      	ldr	r3, [pc, #276]	; (8002960 <start_can+0x270>)
 800284a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			ecar.RELAY.left_ = dest[2];
 800284e:	4b49      	ldr	r3, [pc, #292]	; (8002974 <start_can+0x284>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b42      	ldr	r3, [pc, #264]	; (8002960 <start_can+0x270>)
 8002856:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			ecar.RELAY.right_ = dest[3];
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <start_can+0x284>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <start_can+0x270>)
 8002862:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			ecar.RELAY.light_ = dest[4];
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <start_can+0x284>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <start_can+0x270>)
 800286e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			ecar.RELAY.wiper_ = dest[5];
 8002872:	4b40      	ldr	r3, [pc, #256]	; (8002974 <start_can+0x284>)
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b39      	ldr	r3, [pc, #228]	; (8002960 <start_can+0x270>)
 800287a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			ecar.RELAY.horn_ = dest[6];
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <start_can+0x284>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b36      	ldr	r3, [pc, #216]	; (8002960 <start_can+0x270>)
 8002886:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			ecar.RELAY.direction_ = dest[7]==1?'+':'-';
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <start_can+0x284>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <start_can+0x1a6>
 8002892:	222b      	movs	r2, #43	; 0x2b
 8002894:	e000      	b.n	8002898 <start_can+0x1a8>
 8002896:	222d      	movs	r2, #45	; 0x2d
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <start_can+0x270>)
 800289a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f

	  	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800289e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028a2:	4835      	ldr	r0, [pc, #212]	; (8002978 <start_can+0x288>)
 80028a4:	f002 fd8f 	bl	80053c6 <HAL_GPIO_TogglePin>
	  	  	receive_flag=1;
 80028a8:	2301      	movs	r3, #1
 80028aa:	72fb      	strb	r3, [r7, #11]
	  	  	break;
 80028ac:	e229      	b.n	8002d02 <start_can+0x612>
	  	case 0x14:
			ecar.DRIVER.vehicle_speed = RxData[0];
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <start_can+0x27c>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	01db      	lsls	r3, r3, #7
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	11db      	asrs	r3, r3, #7
 80028b8:	b259      	sxtb	r1, r3
 80028ba:	4a29      	ldr	r2, [pc, #164]	; (8002960 <start_can+0x270>)
 80028bc:	f892 3084 	ldrb.w	r3, [r2, #132]	; 0x84
 80028c0:	f361 0300 	bfi	r3, r1, #0, #1
 80028c4:	f882 3084 	strb.w	r3, [r2, #132]	; 0x84
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80028c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028cc:	482a      	ldr	r0, [pc, #168]	; (8002978 <start_can+0x288>)
 80028ce:	f002 fd7a 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	72fb      	strb	r3, [r7, #11]
			break;
 80028d6:	e214      	b.n	8002d02 <start_can+0x612>
		case 0x16:
			ecar.CHARGER.charge_watt = (RxData[0]*100)+RxData[1];
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <start_can+0x27c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	2364      	movs	r3, #100	; 0x64
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	4a21      	ldr	r2, [pc, #132]	; (800296c <start_can+0x27c>)
 80028e6:	7852      	ldrb	r2, [r2, #1]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <start_can+0x270>)
 80028ec:	6753      	str	r3, [r2, #116]	; 0x74
			ecar.CHARGER.ReadyToFlow = RxData[3];
 80028ee:	4b1f      	ldr	r3, [pc, #124]	; (800296c <start_can+0x27c>)
 80028f0:	78da      	ldrb	r2, [r3, #3]
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <start_can+0x270>)
 80028f4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			ecar.CHARGER.voltage_error = RxData[4];
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <start_can+0x27c>)
 80028fa:	791a      	ldrb	r2, [r3, #4]
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <start_can+0x270>)
 80028fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			ecar.CHARGER.current_error = RxData[5];
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <start_can+0x27c>)
 8002904:	795a      	ldrb	r2, [r3, #5]
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <start_can+0x270>)
 8002908:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			ecar.CHARGER.temperature_error = RxData[6];
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <start_can+0x27c>)
 800290e:	799a      	ldrb	r2, [r3, #6]
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <start_can+0x270>)
 8002912:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			ecar.CHARGER.time = RxData[7]*60+RxData[8]; //second
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <start_can+0x27c>)
 8002918:	79db      	ldrb	r3, [r3, #7]
 800291a:	461a      	mov	r2, r3
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	461a      	mov	r2, r3
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <start_can+0x27c>)
 8002928:	7a1b      	ldrb	r3, [r3, #8]
 800292a:	4413      	add	r3, r2
 800292c:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <start_can+0x270>)
 800292e:	6793      	str	r3, [r2, #120]	; 0x78
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002934:	4810      	ldr	r0, [pc, #64]	; (8002978 <start_can+0x288>)
 8002936:	f002 fd46 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 800293a:	2301      	movs	r3, #1
 800293c:	72fb      	strb	r3, [r7, #11]
			break;
 800293e:	e1e0      	b.n	8002d02 <start_can+0x612>
	  	case 0x19:
	  		ecar.BMS.bms_error_code = RxData[0];
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <start_can+0x27c>)
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <start_can+0x270>)
 8002946:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800294a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800294e:	480a      	ldr	r0, [pc, #40]	; (8002978 <start_can+0x288>)
 8002950:	f002 fd39 	bl	80053c6 <HAL_GPIO_TogglePin>
	  		receive_flag=1;
 8002954:	2301      	movs	r3, #1
 8002956:	72fb      	strb	r3, [r7, #11]
	  		break;
 8002958:	e1d3      	b.n	8002d02 <start_can+0x612>
 800295a:	bf00      	nop
 800295c:	20000200 	.word	0x20000200
 8002960:	2000042c 	.word	0x2000042c
 8002964:	2000025c 	.word	0x2000025c
 8002968:	20000504 	.word	0x20000504
 800296c:	20000260 	.word	0x20000260
 8002970:	20000218 	.word	0x20000218
 8002974:	200006c0 	.word	0x200006c0
 8002978:	40020c00 	.word	0x40020c00
		case 0x20:
			ecar.BMS.battery_voltage[0]=RxData[0]*100+RxData[1];
 800297c:	4bb3      	ldr	r3, [pc, #716]	; (8002c4c <start_can+0x55c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	2364      	movs	r3, #100	; 0x64
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	4ab0      	ldr	r2, [pc, #704]	; (8002c4c <start_can+0x55c>)
 800298a:	7852      	ldrb	r2, [r2, #1]
 800298c:	4413      	add	r3, r2
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002996:	4bae      	ldr	r3, [pc, #696]	; (8002c50 <start_can+0x560>)
 8002998:	edc3 7a00 	vstr	s15, [r3]
			ecar.BMS.battery_voltage[1]=RxData[2]*100+RxData[3];
 800299c:	4bab      	ldr	r3, [pc, #684]	; (8002c4c <start_can+0x55c>)
 800299e:	789b      	ldrb	r3, [r3, #2]
 80029a0:	461a      	mov	r2, r3
 80029a2:	2364      	movs	r3, #100	; 0x64
 80029a4:	fb02 f303 	mul.w	r3, r2, r3
 80029a8:	4aa8      	ldr	r2, [pc, #672]	; (8002c4c <start_can+0x55c>)
 80029aa:	78d2      	ldrb	r2, [r2, #3]
 80029ac:	4413      	add	r3, r2
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b6:	4ba6      	ldr	r3, [pc, #664]	; (8002c50 <start_can+0x560>)
 80029b8:	edc3 7a01 	vstr	s15, [r3, #4]
			ecar.BMS.battery_voltage[2]=RxData[4]*100+RxData[5];
 80029bc:	4ba3      	ldr	r3, [pc, #652]	; (8002c4c <start_can+0x55c>)
 80029be:	791b      	ldrb	r3, [r3, #4]
 80029c0:	461a      	mov	r2, r3
 80029c2:	2364      	movs	r3, #100	; 0x64
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	4aa0      	ldr	r2, [pc, #640]	; (8002c4c <start_can+0x55c>)
 80029ca:	7952      	ldrb	r2, [r2, #5]
 80029cc:	4413      	add	r3, r2
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d6:	4b9e      	ldr	r3, [pc, #632]	; (8002c50 <start_can+0x560>)
 80029d8:	edc3 7a02 	vstr	s15, [r3, #8]
			ecar.BMS.battery_voltage[3]=RxData[6]*100+RxData[7];
 80029dc:	4b9b      	ldr	r3, [pc, #620]	; (8002c4c <start_can+0x55c>)
 80029de:	799b      	ldrb	r3, [r3, #6]
 80029e0:	461a      	mov	r2, r3
 80029e2:	2364      	movs	r3, #100	; 0x64
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	4a98      	ldr	r2, [pc, #608]	; (8002c4c <start_can+0x55c>)
 80029ea:	79d2      	ldrb	r2, [r2, #7]
 80029ec:	4413      	add	r3, r2
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f6:	4b96      	ldr	r3, [pc, #600]	; (8002c50 <start_can+0x560>)
 80029f8:	edc3 7a03 	vstr	s15, [r3, #12]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80029fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a00:	4894      	ldr	r0, [pc, #592]	; (8002c54 <start_can+0x564>)
 8002a02:	f002 fce0 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	72fb      	strb	r3, [r7, #11]
			break;
 8002a0a:	e17a      	b.n	8002d02 <start_can+0x612>
		case 0x21:
			ecar.BMS.battery_voltage[4]=RxData[0]*100+RxData[1];
 8002a0c:	4b8f      	ldr	r3, [pc, #572]	; (8002c4c <start_can+0x55c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	2364      	movs	r3, #100	; 0x64
 8002a14:	fb02 f303 	mul.w	r3, r2, r3
 8002a18:	4a8c      	ldr	r2, [pc, #560]	; (8002c4c <start_can+0x55c>)
 8002a1a:	7852      	ldrb	r2, [r2, #1]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	4b8a      	ldr	r3, [pc, #552]	; (8002c50 <start_can+0x560>)
 8002a28:	edc3 7a04 	vstr	s15, [r3, #16]
			ecar.BMS.battery_voltage[5]=RxData[2]*100+RxData[3];
 8002a2c:	4b87      	ldr	r3, [pc, #540]	; (8002c4c <start_can+0x55c>)
 8002a2e:	789b      	ldrb	r3, [r3, #2]
 8002a30:	461a      	mov	r2, r3
 8002a32:	2364      	movs	r3, #100	; 0x64
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	4a84      	ldr	r2, [pc, #528]	; (8002c4c <start_can+0x55c>)
 8002a3a:	78d2      	ldrb	r2, [r2, #3]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a46:	4b82      	ldr	r3, [pc, #520]	; (8002c50 <start_can+0x560>)
 8002a48:	edc3 7a05 	vstr	s15, [r3, #20]
			ecar.BMS.battery_voltage[6]=RxData[4]*100+RxData[5];
 8002a4c:	4b7f      	ldr	r3, [pc, #508]	; (8002c4c <start_can+0x55c>)
 8002a4e:	791b      	ldrb	r3, [r3, #4]
 8002a50:	461a      	mov	r2, r3
 8002a52:	2364      	movs	r3, #100	; 0x64
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	4a7c      	ldr	r2, [pc, #496]	; (8002c4c <start_can+0x55c>)
 8002a5a:	7952      	ldrb	r2, [r2, #5]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a66:	4b7a      	ldr	r3, [pc, #488]	; (8002c50 <start_can+0x560>)
 8002a68:	edc3 7a06 	vstr	s15, [r3, #24]
			ecar.BMS.battery_voltage[7]=RxData[6]*100+RxData[7];
 8002a6c:	4b77      	ldr	r3, [pc, #476]	; (8002c4c <start_can+0x55c>)
 8002a6e:	799b      	ldrb	r3, [r3, #6]
 8002a70:	461a      	mov	r2, r3
 8002a72:	2364      	movs	r3, #100	; 0x64
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	4a74      	ldr	r2, [pc, #464]	; (8002c4c <start_can+0x55c>)
 8002a7a:	79d2      	ldrb	r2, [r2, #7]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a86:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <start_can+0x560>)
 8002a88:	edc3 7a07 	vstr	s15, [r3, #28]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a90:	4870      	ldr	r0, [pc, #448]	; (8002c54 <start_can+0x564>)
 8002a92:	f002 fc98 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	72fb      	strb	r3, [r7, #11]
			break;
 8002a9a:	e132      	b.n	8002d02 <start_can+0x612>
		case 0x22:
			ecar.BMS.battery_voltage[8]=RxData[0]*100+RxData[1];
 8002a9c:	4b6b      	ldr	r3, [pc, #428]	; (8002c4c <start_can+0x55c>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2364      	movs	r3, #100	; 0x64
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	4a68      	ldr	r2, [pc, #416]	; (8002c4c <start_can+0x55c>)
 8002aaa:	7852      	ldrb	r2, [r2, #1]
 8002aac:	4413      	add	r3, r2
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab6:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <start_can+0x560>)
 8002ab8:	edc3 7a08 	vstr	s15, [r3, #32]
			ecar.BMS.battery_voltage[9]=RxData[2]*100+RxData[3];
 8002abc:	4b63      	ldr	r3, [pc, #396]	; (8002c4c <start_can+0x55c>)
 8002abe:	789b      	ldrb	r3, [r3, #2]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2364      	movs	r3, #100	; 0x64
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	4a60      	ldr	r2, [pc, #384]	; (8002c4c <start_can+0x55c>)
 8002aca:	78d2      	ldrb	r2, [r2, #3]
 8002acc:	4413      	add	r3, r2
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad6:	4b5e      	ldr	r3, [pc, #376]	; (8002c50 <start_can+0x560>)
 8002ad8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			ecar.BMS.battery_voltage[10]=RxData[4]*100+RxData[5];
 8002adc:	4b5b      	ldr	r3, [pc, #364]	; (8002c4c <start_can+0x55c>)
 8002ade:	791b      	ldrb	r3, [r3, #4]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2364      	movs	r3, #100	; 0x64
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <start_can+0x55c>)
 8002aea:	7952      	ldrb	r2, [r2, #5]
 8002aec:	4413      	add	r3, r2
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af6:	4b56      	ldr	r3, [pc, #344]	; (8002c50 <start_can+0x560>)
 8002af8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			ecar.BMS.battery_voltage[11]=RxData[6]*100+RxData[7];
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <start_can+0x55c>)
 8002afe:	799b      	ldrb	r3, [r3, #6]
 8002b00:	461a      	mov	r2, r3
 8002b02:	2364      	movs	r3, #100	; 0x64
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	4a50      	ldr	r2, [pc, #320]	; (8002c4c <start_can+0x55c>)
 8002b0a:	79d2      	ldrb	r2, [r2, #7]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <start_can+0x560>)
 8002b18:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b20:	484c      	ldr	r0, [pc, #304]	; (8002c54 <start_can+0x564>)
 8002b22:	f002 fc50 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	72fb      	strb	r3, [r7, #11]
			break;
 8002b2a:	e0ea      	b.n	8002d02 <start_can+0x612>
		case 0x23:
			ecar.BMS.battery_voltage[12]=RxData[0]*100+RxData[1];
 8002b2c:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <start_can+0x55c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	2364      	movs	r3, #100	; 0x64
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	4a44      	ldr	r2, [pc, #272]	; (8002c4c <start_can+0x55c>)
 8002b3a:	7852      	ldrb	r2, [r2, #1]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b46:	4b42      	ldr	r3, [pc, #264]	; (8002c50 <start_can+0x560>)
 8002b48:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			ecar.BMS.battery_voltage[13]=RxData[2]*100+RxData[3];
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <start_can+0x55c>)
 8002b4e:	789b      	ldrb	r3, [r3, #2]
 8002b50:	461a      	mov	r2, r3
 8002b52:	2364      	movs	r3, #100	; 0x64
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	4a3c      	ldr	r2, [pc, #240]	; (8002c4c <start_can+0x55c>)
 8002b5a:	78d2      	ldrb	r2, [r2, #3]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <start_can+0x560>)
 8002b68:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			ecar.BMS.battery_voltage[14]=RxData[4]*100+RxData[5];
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <start_can+0x55c>)
 8002b6e:	791b      	ldrb	r3, [r3, #4]
 8002b70:	461a      	mov	r2, r3
 8002b72:	2364      	movs	r3, #100	; 0x64
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <start_can+0x55c>)
 8002b7a:	7952      	ldrb	r2, [r2, #5]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b86:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <start_can+0x560>)
 8002b88:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			ecar.BMS.battery_voltage[15]=RxData[6]*100+RxData[7];
 8002b8c:	4b2f      	ldr	r3, [pc, #188]	; (8002c4c <start_can+0x55c>)
 8002b8e:	799b      	ldrb	r3, [r3, #6]
 8002b90:	461a      	mov	r2, r3
 8002b92:	2364      	movs	r3, #100	; 0x64
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	4a2c      	ldr	r2, [pc, #176]	; (8002c4c <start_can+0x55c>)
 8002b9a:	79d2      	ldrb	r2, [r2, #7]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <start_can+0x560>)
 8002ba8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bb0:	4828      	ldr	r0, [pc, #160]	; (8002c54 <start_can+0x564>)
 8002bb2:	f002 fc08 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	72fb      	strb	r3, [r7, #11]
			break;
 8002bba:	e0a2      	b.n	8002d02 <start_can+0x612>
		case 0x24:
			ecar.BMS.battery_voltage[16]=RxData[0]*100+RxData[1];
 8002bbc:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <start_can+0x55c>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2364      	movs	r3, #100	; 0x64
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <start_can+0x55c>)
 8002bca:	7852      	ldrb	r2, [r2, #1]
 8002bcc:	4413      	add	r3, r2
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <start_can+0x560>)
 8002bd8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			ecar.BMS.battery_voltage[17]=RxData[2]*100+RxData[3];
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <start_can+0x55c>)
 8002bde:	789b      	ldrb	r3, [r3, #2]
 8002be0:	461a      	mov	r2, r3
 8002be2:	2364      	movs	r3, #100	; 0x64
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <start_can+0x55c>)
 8002bea:	78d2      	ldrb	r2, [r2, #3]
 8002bec:	4413      	add	r3, r2
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <start_can+0x560>)
 8002bf8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			ecar.BMS.battery_voltage[18]=RxData[4]*100+RxData[5];
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <start_can+0x55c>)
 8002bfe:	791b      	ldrb	r3, [r3, #4]
 8002c00:	461a      	mov	r2, r3
 8002c02:	2364      	movs	r3, #100	; 0x64
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <start_can+0x55c>)
 8002c0a:	7952      	ldrb	r2, [r2, #5]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <start_can+0x560>)
 8002c18:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			ecar.BMS.battery_voltage[19]=RxData[6]*100+RxData[7];
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <start_can+0x55c>)
 8002c1e:	799b      	ldrb	r3, [r3, #6]
 8002c20:	461a      	mov	r2, r3
 8002c22:	2364      	movs	r3, #100	; 0x64
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <start_can+0x55c>)
 8002c2a:	79d2      	ldrb	r2, [r2, #7]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <start_can+0x560>)
 8002c38:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c40:	4804      	ldr	r0, [pc, #16]	; (8002c54 <start_can+0x564>)
 8002c42:	f002 fbc0 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	72fb      	strb	r3, [r7, #11]
			break;
 8002c4a:	e05a      	b.n	8002d02 <start_can+0x612>
 8002c4c:	20000260 	.word	0x20000260
 8002c50:	2000042c 	.word	0x2000042c
 8002c54:	40020c00 	.word	0x40020c00
		case 0x25:
			ecar.BMS.battery_voltage[20]=RxData[0]*100+RxData[1];
 8002c58:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <start_can+0x63c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2364      	movs	r3, #100	; 0x64
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	4a31      	ldr	r2, [pc, #196]	; (8002d2c <start_can+0x63c>)
 8002c66:	7852      	ldrb	r2, [r2, #1]
 8002c68:	4413      	add	r3, r2
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c72:	4b2f      	ldr	r3, [pc, #188]	; (8002d30 <start_can+0x640>)
 8002c74:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			ecar.BMS.battery_voltage[21]=RxData[2]*100+RxData[3];
 8002c78:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <start_can+0x63c>)
 8002c7a:	789b      	ldrb	r3, [r3, #2]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2364      	movs	r3, #100	; 0x64
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <start_can+0x63c>)
 8002c86:	78d2      	ldrb	r2, [r2, #3]
 8002c88:	4413      	add	r3, r2
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <start_can+0x640>)
 8002c94:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			ecar.BMS.battery_voltage[22]=RxData[4]*100+RxData[5];
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <start_can+0x63c>)
 8002c9a:	791b      	ldrb	r3, [r3, #4]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2364      	movs	r3, #100	; 0x64
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <start_can+0x63c>)
 8002ca6:	7952      	ldrb	r2, [r2, #5]
 8002ca8:	4413      	add	r3, r2
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <start_can+0x640>)
 8002cb4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			ecar.BMS.battery_voltage[23]=RxData[6]*100+RxData[7];
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <start_can+0x63c>)
 8002cba:	799b      	ldrb	r3, [r3, #6]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2364      	movs	r3, #100	; 0x64
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <start_can+0x63c>)
 8002cc6:	79d2      	ldrb	r2, [r2, #7]
 8002cc8:	4413      	add	r3, r2
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <start_can+0x640>)
 8002cd4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cdc:	4815      	ldr	r0, [pc, #84]	; (8002d34 <start_can+0x644>)
 8002cde:	f002 fb72 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	72fb      	strb	r3, [r7, #11]
			break;
 8002ce6:	e00c      	b.n	8002d02 <start_can+0x612>
		case 0x26:
			ecar.BMS.battery_temparature = RxData[0];
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <start_can+0x63c>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <start_can+0x640>)
 8002cf0:	661a      	str	r2, [r3, #96]	; 0x60
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cf6:	480f      	ldr	r0, [pc, #60]	; (8002d34 <start_can+0x644>)
 8002cf8:	f002 fb65 	bl	80053c6 <HAL_GPIO_TogglePin>
			receive_flag=1;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	72fb      	strb	r3, [r7, #11]
			break;
 8002d00:	bf00      	nop
	  }
	  if(receive_flag){
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f43f acff 	beq.w	8002708 <start_can+0x18>
		  uint8_t can_feedback[1];can_feedback[0]=pRxHeader.StdId;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <start_can+0x648>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	723b      	strb	r3, [r7, #8]
		  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, can_feedback, &pTxMailbox);
 8002d12:	f107 0208 	add.w	r2, r7, #8
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <start_can+0x64c>)
 8002d18:	4909      	ldr	r1, [pc, #36]	; (8002d40 <start_can+0x650>)
 8002d1a:	480a      	ldr	r0, [pc, #40]	; (8002d44 <start_can+0x654>)
 8002d1c:	f001 fbe4 	bl	80044e8 <HAL_CAN_AddTxMessage>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d24:	4803      	ldr	r0, [pc, #12]	; (8002d34 <start_can+0x644>)
 8002d26:	f002 fb4e 	bl	80053c6 <HAL_GPIO_TogglePin>
  {
 8002d2a:	e4ed      	b.n	8002708 <start_can+0x18>
 8002d2c:	20000260 	.word	0x20000260
 8002d30:	2000042c 	.word	0x2000042c
 8002d34:	40020c00 	.word	0x40020c00
 8002d38:	20000218 	.word	0x20000218
 8002d3c:	2000025c 	.word	0x2000025c
 8002d40:	20000200 	.word	0x20000200
 8002d44:	20000504 	.word	0x20000504

08002d48 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	lcd_init();
 8002d50:	f7fe fa90 	bl	8001274 <lcd_init>
	lcd_reset();
 8002d54:	f7fe fab4 	bl	80012c0 <lcd_reset>
	int counterr=0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
	for(int i=0;i<16;i++){
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e02c      	b.n	8002dbc <StartTask04+0x74>
		lcd_send_cmd(0x80);
 8002d62:	2080      	movs	r0, #128	; 0x80
 8002d64:	f7fe fa26 	bl	80011b4 <lcd_send_cmd>
		lcd_send_string(counterr==0?"LOADING.  ":(counterr==1?"LOADING.. ":"LOADING..."));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <StartTask04+0x3c>
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <StartTask04+0x30>
 8002d74:	4b01      	ldr	r3, [pc, #4]	; (8002d7c <StartTask04+0x34>)
 8002d76:	e006      	b.n	8002d86 <StartTask04+0x3e>
 8002d78:	4b01      	ldr	r3, [pc, #4]	; (8002d80 <StartTask04+0x38>)
 8002d7a:	e004      	b.n	8002d86 <StartTask04+0x3e>
 8002d7c:	0800f314 	.word	0x0800f314
 8002d80:	0800f320 	.word	0x0800f320
 8002d84:	4bc9      	ldr	r3, [pc, #804]	; (80030ac <StartTask04+0x364>)
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fa84 	bl	8001294 <lcd_send_string>
		lcd_send_cmd(0xC0+i);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3b40      	subs	r3, #64	; 0x40
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe fa0d 	bl	80011b4 <lcd_send_cmd>
		lcd_send_string("#");
 8002d9a:	48c5      	ldr	r0, [pc, #788]	; (80030b0 <StartTask04+0x368>)
 8002d9c:	f7fe fa7a 	bl	8001294 <lcd_send_string>
		HAL_Delay(100);
 8002da0:	2064      	movs	r0, #100	; 0x64
 8002da2:	f000 fe29 	bl	80039f8 <HAL_Delay>
		counterr++;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
		if(counterr>2){counterr=0;};
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	dd01      	ble.n	8002db6 <StartTask04+0x6e>
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
	for(int i=0;i<16;i++){
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	3301      	adds	r3, #1
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	ddcf      	ble.n	8002d62 <StartTask04+0x1a>
	}
	lcd_send_cmd(0x80);
 8002dc2:	2080      	movs	r0, #128	; 0x80
 8002dc4:	f7fe f9f6 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("                ");
 8002dc8:	48ba      	ldr	r0, [pc, #744]	; (80030b4 <StartTask04+0x36c>)
 8002dca:	f7fe fa63 	bl	8001294 <lcd_send_string>
	HAL_Delay(200);
 8002dce:	20c8      	movs	r0, #200	; 0xc8
 8002dd0:	f000 fe12 	bl	80039f8 <HAL_Delay>
	lcd_send_cmd(0x80);
 8002dd4:	2080      	movs	r0, #128	; 0x80
 8002dd6:	f7fe f9ed 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("COMPLETED!");
 8002dda:	48b7      	ldr	r0, [pc, #732]	; (80030b8 <StartTask04+0x370>)
 8002ddc:	f7fe fa5a 	bl	8001294 <lcd_send_string>
	HAL_Delay(300);
 8002de0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002de4:	f000 fe08 	bl	80039f8 <HAL_Delay>
	lcd_send_cmd(0x80);
 8002de8:	2080      	movs	r0, #128	; 0x80
 8002dea:	f7fe f9e3 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("                ");
 8002dee:	48b1      	ldr	r0, [pc, #708]	; (80030b4 <StartTask04+0x36c>)
 8002df0:	f7fe fa50 	bl	8001294 <lcd_send_string>
	HAL_Delay(200);
 8002df4:	20c8      	movs	r0, #200	; 0xc8
 8002df6:	f000 fdff 	bl	80039f8 <HAL_Delay>
	lcd_send_cmd(0x80);
 8002dfa:	2080      	movs	r0, #128	; 0x80
 8002dfc:	f7fe f9da 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("COMPLETED!");
 8002e00:	48ad      	ldr	r0, [pc, #692]	; (80030b8 <StartTask04+0x370>)
 8002e02:	f7fe fa47 	bl	8001294 <lcd_send_string>
	HAL_Delay(300);
 8002e06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e0a:	f000 fdf5 	bl	80039f8 <HAL_Delay>
	lcd_send_cmd(0x80);
 8002e0e:	2080      	movs	r0, #128	; 0x80
 8002e10:	f7fe f9d0 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("                ");
 8002e14:	48a7      	ldr	r0, [pc, #668]	; (80030b4 <StartTask04+0x36c>)
 8002e16:	f7fe fa3d 	bl	8001294 <lcd_send_string>
	HAL_Delay(200);
 8002e1a:	20c8      	movs	r0, #200	; 0xc8
 8002e1c:	f000 fdec 	bl	80039f8 <HAL_Delay>
	lcd_send_cmd(0x80);
 8002e20:	2080      	movs	r0, #128	; 0x80
 8002e22:	f7fe f9c7 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("COMPLETED!");
 8002e26:	48a4      	ldr	r0, [pc, #656]	; (80030b8 <StartTask04+0x370>)
 8002e28:	f7fe fa34 	bl	8001294 <lcd_send_string>
	HAL_Delay(300);
 8002e2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e30:	f000 fde2 	bl	80039f8 <HAL_Delay>
	lcd_send_cmd(0x80);
 8002e34:	2080      	movs	r0, #128	; 0x80
 8002e36:	f7fe f9bd 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("                ");
 8002e3a:	489e      	ldr	r0, [pc, #632]	; (80030b4 <StartTask04+0x36c>)
 8002e3c:	f7fe fa2a 	bl	8001294 <lcd_send_string>
	HAL_Delay(200);
 8002e40:	20c8      	movs	r0, #200	; 0xc8
 8002e42:	f000 fdd9 	bl	80039f8 <HAL_Delay>
	lcd_send_cmd(0x80);
 8002e46:	2080      	movs	r0, #128	; 0x80
 8002e48:	f7fe f9b4 	bl	80011b4 <lcd_send_cmd>
	lcd_send_string("COMPLETED!");
 8002e4c:	489a      	ldr	r0, [pc, #616]	; (80030b8 <StartTask04+0x370>)
 8002e4e:	f7fe fa21 	bl	8001294 <lcd_send_string>
	HAL_Delay(300);
 8002e52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e56:	f000 fdcf 	bl	80039f8 <HAL_Delay>

	HAL_Delay(500);
 8002e5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e5e:	f000 fdcb 	bl	80039f8 <HAL_Delay>
	lcd_reset();
 8002e62:	f7fe fa2d 	bl	80012c0 <lcd_reset>
	HAL_Delay(100);
 8002e66:	2064      	movs	r0, #100	; 0x64
 8002e68:	f000 fdc6 	bl	80039f8 <HAL_Delay>
	sprintf(&M[0],"%s", "E");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x83);
 8002e6c:	4a93      	ldr	r2, [pc, #588]	; (80030bc <StartTask04+0x374>)
 8002e6e:	4994      	ldr	r1, [pc, #592]	; (80030c0 <StartTask04+0x378>)
 8002e70:	4894      	ldr	r0, [pc, #592]	; (80030c4 <StartTask04+0x37c>)
 8002e72:	f008 fb9b 	bl	800b5ac <siprintf>
 8002e76:	2064      	movs	r0, #100	; 0x64
 8002e78:	f000 fdbe 	bl	80039f8 <HAL_Delay>
 8002e7c:	4891      	ldr	r0, [pc, #580]	; (80030c4 <StartTask04+0x37c>)
 8002e7e:	f7fe fa09 	bl	8001294 <lcd_send_string>
 8002e82:	2083      	movs	r0, #131	; 0x83
 8002e84:	f7fe f996 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "L");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x84);
 8002e88:	4a8f      	ldr	r2, [pc, #572]	; (80030c8 <StartTask04+0x380>)
 8002e8a:	498d      	ldr	r1, [pc, #564]	; (80030c0 <StartTask04+0x378>)
 8002e8c:	488d      	ldr	r0, [pc, #564]	; (80030c4 <StartTask04+0x37c>)
 8002e8e:	f008 fb8d 	bl	800b5ac <siprintf>
 8002e92:	2064      	movs	r0, #100	; 0x64
 8002e94:	f000 fdb0 	bl	80039f8 <HAL_Delay>
 8002e98:	488a      	ldr	r0, [pc, #552]	; (80030c4 <StartTask04+0x37c>)
 8002e9a:	f7fe f9fb 	bl	8001294 <lcd_send_string>
 8002e9e:	2084      	movs	r0, #132	; 0x84
 8002ea0:	f7fe f988 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "E");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x85);
 8002ea4:	4a85      	ldr	r2, [pc, #532]	; (80030bc <StartTask04+0x374>)
 8002ea6:	4986      	ldr	r1, [pc, #536]	; (80030c0 <StartTask04+0x378>)
 8002ea8:	4886      	ldr	r0, [pc, #536]	; (80030c4 <StartTask04+0x37c>)
 8002eaa:	f008 fb7f 	bl	800b5ac <siprintf>
 8002eae:	2064      	movs	r0, #100	; 0x64
 8002eb0:	f000 fda2 	bl	80039f8 <HAL_Delay>
 8002eb4:	4883      	ldr	r0, [pc, #524]	; (80030c4 <StartTask04+0x37c>)
 8002eb6:	f7fe f9ed 	bl	8001294 <lcd_send_string>
 8002eba:	2085      	movs	r0, #133	; 0x85
 8002ebc:	f7fe f97a 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "C");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x86);
 8002ec0:	4a82      	ldr	r2, [pc, #520]	; (80030cc <StartTask04+0x384>)
 8002ec2:	497f      	ldr	r1, [pc, #508]	; (80030c0 <StartTask04+0x378>)
 8002ec4:	487f      	ldr	r0, [pc, #508]	; (80030c4 <StartTask04+0x37c>)
 8002ec6:	f008 fb71 	bl	800b5ac <siprintf>
 8002eca:	2064      	movs	r0, #100	; 0x64
 8002ecc:	f000 fd94 	bl	80039f8 <HAL_Delay>
 8002ed0:	487c      	ldr	r0, [pc, #496]	; (80030c4 <StartTask04+0x37c>)
 8002ed2:	f7fe f9df 	bl	8001294 <lcd_send_string>
 8002ed6:	2086      	movs	r0, #134	; 0x86
 8002ed8:	f7fe f96c 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "T");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x87);
 8002edc:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <StartTask04+0x388>)
 8002ede:	4978      	ldr	r1, [pc, #480]	; (80030c0 <StartTask04+0x378>)
 8002ee0:	4878      	ldr	r0, [pc, #480]	; (80030c4 <StartTask04+0x37c>)
 8002ee2:	f008 fb63 	bl	800b5ac <siprintf>
 8002ee6:	2064      	movs	r0, #100	; 0x64
 8002ee8:	f000 fd86 	bl	80039f8 <HAL_Delay>
 8002eec:	4875      	ldr	r0, [pc, #468]	; (80030c4 <StartTask04+0x37c>)
 8002eee:	f7fe f9d1 	bl	8001294 <lcd_send_string>
 8002ef2:	2087      	movs	r0, #135	; 0x87
 8002ef4:	f7fe f95e 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "R");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x88);
 8002ef8:	4a76      	ldr	r2, [pc, #472]	; (80030d4 <StartTask04+0x38c>)
 8002efa:	4971      	ldr	r1, [pc, #452]	; (80030c0 <StartTask04+0x378>)
 8002efc:	4871      	ldr	r0, [pc, #452]	; (80030c4 <StartTask04+0x37c>)
 8002efe:	f008 fb55 	bl	800b5ac <siprintf>
 8002f02:	2064      	movs	r0, #100	; 0x64
 8002f04:	f000 fd78 	bl	80039f8 <HAL_Delay>
 8002f08:	486e      	ldr	r0, [pc, #440]	; (80030c4 <StartTask04+0x37c>)
 8002f0a:	f7fe f9c3 	bl	8001294 <lcd_send_string>
 8002f0e:	2088      	movs	r0, #136	; 0x88
 8002f10:	f7fe f950 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "I");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x89);
 8002f14:	4a70      	ldr	r2, [pc, #448]	; (80030d8 <StartTask04+0x390>)
 8002f16:	496a      	ldr	r1, [pc, #424]	; (80030c0 <StartTask04+0x378>)
 8002f18:	486a      	ldr	r0, [pc, #424]	; (80030c4 <StartTask04+0x37c>)
 8002f1a:	f008 fb47 	bl	800b5ac <siprintf>
 8002f1e:	2064      	movs	r0, #100	; 0x64
 8002f20:	f000 fd6a 	bl	80039f8 <HAL_Delay>
 8002f24:	4867      	ldr	r0, [pc, #412]	; (80030c4 <StartTask04+0x37c>)
 8002f26:	f7fe f9b5 	bl	8001294 <lcd_send_string>
 8002f2a:	2089      	movs	r0, #137	; 0x89
 8002f2c:	f7fe f942 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "C");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x8A);
 8002f30:	4a66      	ldr	r2, [pc, #408]	; (80030cc <StartTask04+0x384>)
 8002f32:	4963      	ldr	r1, [pc, #396]	; (80030c0 <StartTask04+0x378>)
 8002f34:	4863      	ldr	r0, [pc, #396]	; (80030c4 <StartTask04+0x37c>)
 8002f36:	f008 fb39 	bl	800b5ac <siprintf>
 8002f3a:	2064      	movs	r0, #100	; 0x64
 8002f3c:	f000 fd5c 	bl	80039f8 <HAL_Delay>
 8002f40:	4860      	ldr	r0, [pc, #384]	; (80030c4 <StartTask04+0x37c>)
 8002f42:	f7fe f9a7 	bl	8001294 <lcd_send_string>
 8002f46:	208a      	movs	r0, #138	; 0x8a
 8002f48:	f7fe f934 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "A");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x8B);
 8002f4c:	4a63      	ldr	r2, [pc, #396]	; (80030dc <StartTask04+0x394>)
 8002f4e:	495c      	ldr	r1, [pc, #368]	; (80030c0 <StartTask04+0x378>)
 8002f50:	485c      	ldr	r0, [pc, #368]	; (80030c4 <StartTask04+0x37c>)
 8002f52:	f008 fb2b 	bl	800b5ac <siprintf>
 8002f56:	2064      	movs	r0, #100	; 0x64
 8002f58:	f000 fd4e 	bl	80039f8 <HAL_Delay>
 8002f5c:	4859      	ldr	r0, [pc, #356]	; (80030c4 <StartTask04+0x37c>)
 8002f5e:	f7fe f999 	bl	8001294 <lcd_send_string>
 8002f62:	208b      	movs	r0, #139	; 0x8b
 8002f64:	f7fe f926 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "R");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0x8C);
 8002f68:	4a5a      	ldr	r2, [pc, #360]	; (80030d4 <StartTask04+0x38c>)
 8002f6a:	4955      	ldr	r1, [pc, #340]	; (80030c0 <StartTask04+0x378>)
 8002f6c:	4855      	ldr	r0, [pc, #340]	; (80030c4 <StartTask04+0x37c>)
 8002f6e:	f008 fb1d 	bl	800b5ac <siprintf>
 8002f72:	2064      	movs	r0, #100	; 0x64
 8002f74:	f000 fd40 	bl	80039f8 <HAL_Delay>
 8002f78:	4852      	ldr	r0, [pc, #328]	; (80030c4 <StartTask04+0x37c>)
 8002f7a:	f7fe f98b 	bl	8001294 <lcd_send_string>
 8002f7e:	208c      	movs	r0, #140	; 0x8c
 8002f80:	f7fe f918 	bl	80011b4 <lcd_send_cmd>
	HAL_Delay(100);
 8002f84:	2064      	movs	r0, #100	; 0x64
 8002f86:	f000 fd37 	bl	80039f8 <HAL_Delay>
	lcd_send_cmd(0xC0);
 8002f8a:	20c0      	movs	r0, #192	; 0xc0
 8002f8c:	f7fe f912 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "T");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xC2);
 8002f90:	4a4f      	ldr	r2, [pc, #316]	; (80030d0 <StartTask04+0x388>)
 8002f92:	494b      	ldr	r1, [pc, #300]	; (80030c0 <StartTask04+0x378>)
 8002f94:	484b      	ldr	r0, [pc, #300]	; (80030c4 <StartTask04+0x37c>)
 8002f96:	f008 fb09 	bl	800b5ac <siprintf>
 8002f9a:	2064      	movs	r0, #100	; 0x64
 8002f9c:	f000 fd2c 	bl	80039f8 <HAL_Delay>
 8002fa0:	4848      	ldr	r0, [pc, #288]	; (80030c4 <StartTask04+0x37c>)
 8002fa2:	f7fe f977 	bl	8001294 <lcd_send_string>
 8002fa6:	20c2      	movs	r0, #194	; 0xc2
 8002fa8:	f7fe f904 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "H");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xC3);
 8002fac:	4a4c      	ldr	r2, [pc, #304]	; (80030e0 <StartTask04+0x398>)
 8002fae:	4944      	ldr	r1, [pc, #272]	; (80030c0 <StartTask04+0x378>)
 8002fb0:	4844      	ldr	r0, [pc, #272]	; (80030c4 <StartTask04+0x37c>)
 8002fb2:	f008 fafb 	bl	800b5ac <siprintf>
 8002fb6:	2064      	movs	r0, #100	; 0x64
 8002fb8:	f000 fd1e 	bl	80039f8 <HAL_Delay>
 8002fbc:	4841      	ldr	r0, [pc, #260]	; (80030c4 <StartTask04+0x37c>)
 8002fbe:	f7fe f969 	bl	8001294 <lcd_send_string>
 8002fc2:	20c3      	movs	r0, #195	; 0xc3
 8002fc4:	f7fe f8f6 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "U");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xC4);
 8002fc8:	4a46      	ldr	r2, [pc, #280]	; (80030e4 <StartTask04+0x39c>)
 8002fca:	493d      	ldr	r1, [pc, #244]	; (80030c0 <StartTask04+0x378>)
 8002fcc:	483d      	ldr	r0, [pc, #244]	; (80030c4 <StartTask04+0x37c>)
 8002fce:	f008 faed 	bl	800b5ac <siprintf>
 8002fd2:	2064      	movs	r0, #100	; 0x64
 8002fd4:	f000 fd10 	bl	80039f8 <HAL_Delay>
 8002fd8:	483a      	ldr	r0, [pc, #232]	; (80030c4 <StartTask04+0x37c>)
 8002fda:	f7fe f95b 	bl	8001294 <lcd_send_string>
 8002fde:	20c4      	movs	r0, #196	; 0xc4
 8002fe0:	f7fe f8e8 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "N");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xC5);
 8002fe4:	4a40      	ldr	r2, [pc, #256]	; (80030e8 <StartTask04+0x3a0>)
 8002fe6:	4936      	ldr	r1, [pc, #216]	; (80030c0 <StartTask04+0x378>)
 8002fe8:	4836      	ldr	r0, [pc, #216]	; (80030c4 <StartTask04+0x37c>)
 8002fea:	f008 fadf 	bl	800b5ac <siprintf>
 8002fee:	2064      	movs	r0, #100	; 0x64
 8002ff0:	f000 fd02 	bl	80039f8 <HAL_Delay>
 8002ff4:	4833      	ldr	r0, [pc, #204]	; (80030c4 <StartTask04+0x37c>)
 8002ff6:	f7fe f94d 	bl	8001294 <lcd_send_string>
 8002ffa:	20c5      	movs	r0, #197	; 0xc5
 8002ffc:	f7fe f8da 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "D");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xC6);
 8003000:	4a3a      	ldr	r2, [pc, #232]	; (80030ec <StartTask04+0x3a4>)
 8003002:	492f      	ldr	r1, [pc, #188]	; (80030c0 <StartTask04+0x378>)
 8003004:	482f      	ldr	r0, [pc, #188]	; (80030c4 <StartTask04+0x37c>)
 8003006:	f008 fad1 	bl	800b5ac <siprintf>
 800300a:	2064      	movs	r0, #100	; 0x64
 800300c:	f000 fcf4 	bl	80039f8 <HAL_Delay>
 8003010:	482c      	ldr	r0, [pc, #176]	; (80030c4 <StartTask04+0x37c>)
 8003012:	f7fe f93f 	bl	8001294 <lcd_send_string>
 8003016:	20c6      	movs	r0, #198	; 0xc6
 8003018:	f7fe f8cc 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "E");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xC7);
 800301c:	4a27      	ldr	r2, [pc, #156]	; (80030bc <StartTask04+0x374>)
 800301e:	4928      	ldr	r1, [pc, #160]	; (80030c0 <StartTask04+0x378>)
 8003020:	4828      	ldr	r0, [pc, #160]	; (80030c4 <StartTask04+0x37c>)
 8003022:	f008 fac3 	bl	800b5ac <siprintf>
 8003026:	2064      	movs	r0, #100	; 0x64
 8003028:	f000 fce6 	bl	80039f8 <HAL_Delay>
 800302c:	4825      	ldr	r0, [pc, #148]	; (80030c4 <StartTask04+0x37c>)
 800302e:	f7fe f931 	bl	8001294 <lcd_send_string>
 8003032:	20c7      	movs	r0, #199	; 0xc7
 8003034:	f7fe f8be 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "R");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xC8);
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <StartTask04+0x38c>)
 800303a:	4921      	ldr	r1, [pc, #132]	; (80030c0 <StartTask04+0x378>)
 800303c:	4821      	ldr	r0, [pc, #132]	; (80030c4 <StartTask04+0x37c>)
 800303e:	f008 fab5 	bl	800b5ac <siprintf>
 8003042:	2064      	movs	r0, #100	; 0x64
 8003044:	f000 fcd8 	bl	80039f8 <HAL_Delay>
 8003048:	481e      	ldr	r0, [pc, #120]	; (80030c4 <StartTask04+0x37c>)
 800304a:	f7fe f923 	bl	8001294 <lcd_send_string>
 800304e:	20c8      	movs	r0, #200	; 0xc8
 8003050:	f7fe f8b0 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "V");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xC9);
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <StartTask04+0x3a8>)
 8003056:	491a      	ldr	r1, [pc, #104]	; (80030c0 <StartTask04+0x378>)
 8003058:	481a      	ldr	r0, [pc, #104]	; (80030c4 <StartTask04+0x37c>)
 800305a:	f008 faa7 	bl	800b5ac <siprintf>
 800305e:	2064      	movs	r0, #100	; 0x64
 8003060:	f000 fcca 	bl	80039f8 <HAL_Delay>
 8003064:	4817      	ldr	r0, [pc, #92]	; (80030c4 <StartTask04+0x37c>)
 8003066:	f7fe f915 	bl	8001294 <lcd_send_string>
 800306a:	20c9      	movs	r0, #201	; 0xc9
 800306c:	f7fe f8a2 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "O");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xCA);
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <StartTask04+0x3ac>)
 8003072:	4913      	ldr	r1, [pc, #76]	; (80030c0 <StartTask04+0x378>)
 8003074:	4813      	ldr	r0, [pc, #76]	; (80030c4 <StartTask04+0x37c>)
 8003076:	f008 fa99 	bl	800b5ac <siprintf>
 800307a:	2064      	movs	r0, #100	; 0x64
 800307c:	f000 fcbc 	bl	80039f8 <HAL_Delay>
 8003080:	4810      	ldr	r0, [pc, #64]	; (80030c4 <StartTask04+0x37c>)
 8003082:	f7fe f907 	bl	8001294 <lcd_send_string>
 8003086:	20ca      	movs	r0, #202	; 0xca
 8003088:	f7fe f894 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "L");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xCB);
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <StartTask04+0x380>)
 800308e:	490c      	ldr	r1, [pc, #48]	; (80030c0 <StartTask04+0x378>)
 8003090:	480c      	ldr	r0, [pc, #48]	; (80030c4 <StartTask04+0x37c>)
 8003092:	f008 fa8b 	bl	800b5ac <siprintf>
 8003096:	2064      	movs	r0, #100	; 0x64
 8003098:	f000 fcae 	bl	80039f8 <HAL_Delay>
 800309c:	4809      	ldr	r0, [pc, #36]	; (80030c4 <StartTask04+0x37c>)
 800309e:	f7fe f8f9 	bl	8001294 <lcd_send_string>
 80030a2:	20cb      	movs	r0, #203	; 0xcb
 80030a4:	f7fe f886 	bl	80011b4 <lcd_send_cmd>
 80030a8:	e026      	b.n	80030f8 <StartTask04+0x3b0>
 80030aa:	bf00      	nop
 80030ac:	0800f32c 	.word	0x0800f32c
 80030b0:	0800f338 	.word	0x0800f338
 80030b4:	0800f33c 	.word	0x0800f33c
 80030b8:	0800f350 	.word	0x0800f350
 80030bc:	0800f35c 	.word	0x0800f35c
 80030c0:	0800f360 	.word	0x0800f360
 80030c4:	200006e0 	.word	0x200006e0
 80030c8:	0800f364 	.word	0x0800f364
 80030cc:	0800f368 	.word	0x0800f368
 80030d0:	0800f36c 	.word	0x0800f36c
 80030d4:	0800f370 	.word	0x0800f370
 80030d8:	0800f374 	.word	0x0800f374
 80030dc:	0800f378 	.word	0x0800f378
 80030e0:	0800f37c 	.word	0x0800f37c
 80030e4:	0800f380 	.word	0x0800f380
 80030e8:	0800f384 	.word	0x0800f384
 80030ec:	0800f388 	.word	0x0800f388
 80030f0:	0800f38c 	.word	0x0800f38c
 80030f4:	0800f390 	.word	0x0800f390
	sprintf(&M[0],"%s", "T");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xCC);
 80030f8:	4a44      	ldr	r2, [pc, #272]	; (800320c <StartTask04+0x4c4>)
 80030fa:	4945      	ldr	r1, [pc, #276]	; (8003210 <StartTask04+0x4c8>)
 80030fc:	4845      	ldr	r0, [pc, #276]	; (8003214 <StartTask04+0x4cc>)
 80030fe:	f008 fa55 	bl	800b5ac <siprintf>
 8003102:	2064      	movs	r0, #100	; 0x64
 8003104:	f000 fc78 	bl	80039f8 <HAL_Delay>
 8003108:	4842      	ldr	r0, [pc, #264]	; (8003214 <StartTask04+0x4cc>)
 800310a:	f7fe f8c3 	bl	8001294 <lcd_send_string>
 800310e:	20cc      	movs	r0, #204	; 0xcc
 8003110:	f7fe f850 	bl	80011b4 <lcd_send_cmd>
	sprintf(&M[0],"%s", "T;");HAL_Delay(100);lcd_send_string(&M[0]);lcd_send_cmd(0xCD);
 8003114:	4a40      	ldr	r2, [pc, #256]	; (8003218 <StartTask04+0x4d0>)
 8003116:	493e      	ldr	r1, [pc, #248]	; (8003210 <StartTask04+0x4c8>)
 8003118:	483e      	ldr	r0, [pc, #248]	; (8003214 <StartTask04+0x4cc>)
 800311a:	f008 fa47 	bl	800b5ac <siprintf>
 800311e:	2064      	movs	r0, #100	; 0x64
 8003120:	f000 fc6a 	bl	80039f8 <HAL_Delay>
 8003124:	483b      	ldr	r0, [pc, #236]	; (8003214 <StartTask04+0x4cc>)
 8003126:	f7fe f8b5 	bl	8001294 <lcd_send_string>
 800312a:	20cd      	movs	r0, #205	; 0xcd
 800312c:	f7fe f842 	bl	80011b4 <lcd_send_cmd>

	HAL_Delay(500);
 8003130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003134:	f000 fc60 	bl	80039f8 <HAL_Delay>
	//int state_of_tim=0;
	int aim_point = 30;
 8003138:	231e      	movs	r3, #30
 800313a:	60fb      	str	r3, [r7, #12]
	int step_number = 10;
 800313c:	230a      	movs	r3, #10
 800313e:	60bb      	str	r3, [r7, #8]
	//int countrr=0;
	TIM2->CCR3 = 0;
 8003140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003144:	2200      	movs	r2, #0
 8003146:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Infinite loop */
  for(;;)
  {

	  SEND_DATA_TO_LCD();
 8003148:	f7fe f954 	bl	80013f4 <SEND_DATA_TO_LCD>
	  temp_of_lcd = ecar.BMS.battery_temparature;
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <StartTask04+0x4d4>)
 800314e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003150:	4a33      	ldr	r2, [pc, #204]	; (8003220 <StartTask04+0x4d8>)
 8003152:	6013      	str	r3, [r2, #0]
	  //if(temp_of_lcd<aim_point && state_of_tim){HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);state_of_tim = 0;fan_level=0;}
	  if(temp_of_lcd>aim_point){//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);state_of_tim = 1;
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <StartTask04+0x4d8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	429a      	cmp	r2, r3
 800315c:	da02      	bge.n	8003164 <StartTask04+0x41c>
	  fan_level=0;}
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <StartTask04+0x4dc>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
	  if((temp_of_lcd>aim_point && temp_of_lcd<=aim_point + step_number)){//TIM2->CCR3 = 25;
 8003164:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <StartTask04+0x4d8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	429a      	cmp	r2, r3
 800316c:	da09      	bge.n	8003182 <StartTask04+0x43a>
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	441a      	add	r2, r3
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <StartTask04+0x4d8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	db02      	blt.n	8003182 <StartTask04+0x43a>
	  fan_level=25;}
 800317c:	4b29      	ldr	r3, [pc, #164]	; (8003224 <StartTask04+0x4dc>)
 800317e:	2219      	movs	r2, #25
 8003180:	601a      	str	r2, [r3, #0]
	  if((temp_of_lcd>aim_point + step_number && temp_of_lcd<=aim_point + 2*step_number)){//TIM2->CCR3 = 50;
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	441a      	add	r2, r3
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <StartTask04+0x4d8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	da0a      	bge.n	80031a6 <StartTask04+0x45e>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	005a      	lsls	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	441a      	add	r2, r3
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <StartTask04+0x4d8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	db02      	blt.n	80031a6 <StartTask04+0x45e>
	  fan_level=50;}
 80031a0:	4b20      	ldr	r3, [pc, #128]	; (8003224 <StartTask04+0x4dc>)
 80031a2:	2232      	movs	r2, #50	; 0x32
 80031a4:	601a      	str	r2, [r3, #0]
	  if((temp_of_lcd>aim_point + 2*step_number && temp_of_lcd<=aim_point + 3*step_number)){//TIM2->CCR3 = 75;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	005a      	lsls	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	441a      	add	r2, r3
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <StartTask04+0x4d8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	da0c      	bge.n	80031d0 <StartTask04+0x488>
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	441a      	add	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	441a      	add	r2, r3
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <StartTask04+0x4d8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	db02      	blt.n	80031d0 <StartTask04+0x488>
	  fan_level=75;}
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <StartTask04+0x4dc>)
 80031cc:	224b      	movs	r2, #75	; 0x4b
 80031ce:	601a      	str	r2, [r3, #0]
	  if((temp_of_lcd>aim_point + 3*step_number && temp_of_lcd<=aim_point + 4*step_number)){//TIM2->CCR3 = 100;
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	441a      	add	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	441a      	add	r2, r3
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <StartTask04+0x4d8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	da0a      	bge.n	80031fa <StartTask04+0x4b2>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	009a      	lsls	r2, r3, #2
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	441a      	add	r2, r3
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <StartTask04+0x4d8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	db02      	blt.n	80031fa <StartTask04+0x4b2>
	  fan_level=100;}
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <StartTask04+0x4dc>)
 80031f6:	2264      	movs	r2, #100	; 0x64
 80031f8:	601a      	str	r2, [r3, #0]
	  CalculateMaxBattery();
 80031fa:	f7fe f993 	bl	8001524 <CalculateMaxBattery>
	  CalculateMinBattery();
 80031fe:	f7fe f9d1 	bl	80015a4 <CalculateMinBattery>
	  HAL_Delay(1000);
 8003202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003206:	f000 fbf7 	bl	80039f8 <HAL_Delay>
	  SEND_DATA_TO_LCD();
 800320a:	e79d      	b.n	8003148 <StartTask04+0x400>
 800320c:	0800f36c 	.word	0x0800f36c
 8003210:	0800f360 	.word	0x0800f360
 8003214:	200006e0 	.word	0x200006e0
 8003218:	0800f394 	.word	0x0800f394
 800321c:	2000042c 	.word	0x2000042c
 8003220:	200006f8 	.word	0x200006f8
 8003224:	200006f4 	.word	0x200006f4

08003228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800323a:	f000 fbbd 	bl	80039b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
 /* HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
  HAL_Delay(200);*/
  /* USER CODE END Callback 1 */
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40001400 	.word	0x40001400

0800324c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003250:	b672      	cpsid	i
}
 8003252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003254:	e7fe      	b.n	8003254 <Error_Handler+0x8>
	...

08003258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_MspInit+0x54>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	4a11      	ldr	r2, [pc, #68]	; (80032ac <HAL_MspInit+0x54>)
 8003268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_MspInit+0x54>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_MspInit+0x54>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_MspInit+0x54>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_MspInit+0x54>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	210f      	movs	r1, #15
 800329a:	f06f 0001 	mvn.w	r0, #1
 800329e:	f001 fbc9 	bl	8004a34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a17      	ldr	r2, [pc, #92]	; (800332c <HAL_ADC_MspInit+0x7c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d127      	bne.n	8003322 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	4b16      	ldr	r3, [pc, #88]	; (8003330 <HAL_ADC_MspInit+0x80>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <HAL_ADC_MspInit+0x80>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6453      	str	r3, [r2, #68]	; 0x44
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_ADC_MspInit+0x80>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_ADC_MspInit+0x80>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_ADC_MspInit+0x80>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_ADC_MspInit+0x80>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800330a:	2301      	movs	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800330e:	2303      	movs	r3, #3
 8003310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003316:	f107 0314 	add.w	r3, r7, #20
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	; (8003334 <HAL_ADC_MspInit+0x84>)
 800331e:	f001 fe9d 	bl	800505c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003322:	bf00      	nop
 8003324:	3728      	adds	r7, #40	; 0x28
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40012000 	.word	0x40012000
 8003330:	40023800 	.word	0x40023800
 8003334:	40020000 	.word	0x40020000

08003338 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_CAN_MspInit+0x84>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d12b      	bne.n	80033b2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <HAL_CAN_MspInit+0x88>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_CAN_MspInit+0x88>)
 8003364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_CAN_MspInit+0x88>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_CAN_MspInit+0x88>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_CAN_MspInit+0x88>)
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_CAN_MspInit+0x88>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003392:	2303      	movs	r3, #3
 8003394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80033a2:	2309      	movs	r3, #9
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4619      	mov	r1, r3
 80033ac:	4805      	ldr	r0, [pc, #20]	; (80033c4 <HAL_CAN_MspInit+0x8c>)
 80033ae:	f001 fe55 	bl	800505c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80033b2:	bf00      	nop
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40006400 	.word	0x40006400
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40020c00 	.word	0x40020c00

080033c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a19      	ldr	r2, [pc, #100]	; (800344c <HAL_I2C_MspInit+0x84>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12b      	bne.n	8003442 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b18      	ldr	r3, [pc, #96]	; (8003450 <HAL_I2C_MspInit+0x88>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_I2C_MspInit+0x88>)
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_I2C_MspInit+0x88>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800340a:	2312      	movs	r3, #18
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003416:	2304      	movs	r3, #4
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	480c      	ldr	r0, [pc, #48]	; (8003454 <HAL_I2C_MspInit+0x8c>)
 8003422:	f001 fe1b 	bl	800505c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_I2C_MspInit+0x88>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a08      	ldr	r2, [pc, #32]	; (8003450 <HAL_I2C_MspInit+0x88>)
 8003430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_I2C_MspInit+0x88>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003442:	bf00      	nop
 8003444:	3728      	adds	r7, #40	; 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40005400 	.word	0x40005400
 8003450:	40023800 	.word	0x40023800
 8003454:	40020400 	.word	0x40020400

08003458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d10d      	bne.n	8003486 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_TIM_Base_MspInit+0x3c>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_TIM_Base_MspInit+0x3c>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_TIM_Base_MspInit+0x3c>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800

08003498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d11d      	bne.n	80034f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_TIM_MspPostInit+0x68>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <HAL_TIM_MspPostInit+0x68>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <HAL_TIM_MspPostInit+0x68>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034d6:	2304      	movs	r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	f107 030c 	add.w	r3, r7, #12
 80034ee:	4619      	mov	r1, r3
 80034f0:	4804      	ldr	r0, [pc, #16]	; (8003504 <HAL_TIM_MspPostInit+0x6c>)
 80034f2:	f001 fdb3 	bl	800505c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	40020000 	.word	0x40020000

08003508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08c      	sub	sp, #48	; 0x30
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 031c 	add.w	r3, r7, #28
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a49      	ldr	r2, [pc, #292]	; (800364c <HAL_UART_MspInit+0x144>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d12c      	bne.n	8003584 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	4b48      	ldr	r3, [pc, #288]	; (8003650 <HAL_UART_MspInit+0x148>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a47      	ldr	r2, [pc, #284]	; (8003650 <HAL_UART_MspInit+0x148>)
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b45      	ldr	r3, [pc, #276]	; (8003650 <HAL_UART_MspInit+0x148>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_UART_MspInit+0x148>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a40      	ldr	r2, [pc, #256]	; (8003650 <HAL_UART_MspInit+0x148>)
 8003550:	f043 0308 	orr.w	r3, r3, #8
 8003554:	6313      	str	r3, [r2, #48]	; 0x30
 8003556:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <HAL_UART_MspInit+0x148>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003562:	2360      	movs	r3, #96	; 0x60
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356e:	2303      	movs	r3, #3
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003572:	2307      	movs	r3, #7
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	4619      	mov	r1, r3
 800357c:	4835      	ldr	r0, [pc, #212]	; (8003654 <HAL_UART_MspInit+0x14c>)
 800357e:	f001 fd6d 	bl	800505c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003582:	e05f      	b.n	8003644 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a33      	ldr	r2, [pc, #204]	; (8003658 <HAL_UART_MspInit+0x150>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d15a      	bne.n	8003644 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <HAL_UART_MspInit+0x148>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a2e      	ldr	r2, [pc, #184]	; (8003650 <HAL_UART_MspInit+0x148>)
 8003598:	f043 0320 	orr.w	r3, r3, #32
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <HAL_UART_MspInit+0x148>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b28      	ldr	r3, [pc, #160]	; (8003650 <HAL_UART_MspInit+0x148>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a27      	ldr	r2, [pc, #156]	; (8003650 <HAL_UART_MspInit+0x148>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b25      	ldr	r3, [pc, #148]	; (8003650 <HAL_UART_MspInit+0x148>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035c6:	23c0      	movs	r3, #192	; 0xc0
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d2:	2303      	movs	r3, #3
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035d6:	2308      	movs	r3, #8
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	4619      	mov	r1, r3
 80035e0:	481e      	ldr	r0, [pc, #120]	; (800365c <HAL_UART_MspInit+0x154>)
 80035e2:	f001 fd3b 	bl	800505c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_UART_MspInit+0x158>)
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_UART_MspInit+0x15c>)
 80035ea:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_UART_MspInit+0x158>)
 80035ee:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80035f2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_UART_MspInit+0x158>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_UART_MspInit+0x158>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_UART_MspInit+0x158>)
 8003602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003606:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_UART_MspInit+0x158>)
 800360a:	2200      	movs	r2, #0
 800360c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <HAL_UART_MspInit+0x158>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_UART_MspInit+0x158>)
 8003616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800361a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800361c:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_UART_MspInit+0x158>)
 800361e:	2200      	movs	r2, #0
 8003620:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_UART_MspInit+0x158>)
 8003624:	2200      	movs	r2, #0
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003628:	480d      	ldr	r0, [pc, #52]	; (8003660 <HAL_UART_MspInit+0x158>)
 800362a:	f001 fa2d 	bl	8004a88 <HAL_DMA_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003634:	f7ff fe0a 	bl	800324c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_UART_MspInit+0x158>)
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <HAL_UART_MspInit+0x158>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003644:	bf00      	nop
 8003646:	3730      	adds	r7, #48	; 0x30
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40004400 	.word	0x40004400
 8003650:	40023800 	.word	0x40023800
 8003654:	40020c00 	.word	0x40020c00
 8003658:	40011400 	.word	0x40011400
 800365c:	40020800 	.word	0x40020800
 8003660:	20000650 	.word	0x20000650
 8003664:	40026428 	.word	0x40026428

08003668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003678:	2200      	movs	r2, #0
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	2037      	movs	r0, #55	; 0x37
 800367e:	f001 f9d9 	bl	8004a34 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003682:	2037      	movs	r0, #55	; 0x37
 8003684:	f001 f9f2 	bl	8004a6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	4b1f      	ldr	r3, [pc, #124]	; (800370c <HAL_InitTick+0xa4>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_InitTick+0xa4>)
 8003692:	f043 0320 	orr.w	r3, r3, #32
 8003696:	6413      	str	r3, [r2, #64]	; 0x40
 8003698:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_InitTick+0xa4>)
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036a4:	f107 0210 	add.w	r2, r7, #16
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 ff48 	bl	8006544 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80036b4:	f002 ff1e 	bl	80064f4 <HAL_RCC_GetPCLK1Freq>
 80036b8:	4603      	mov	r3, r0
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	4a13      	ldr	r2, [pc, #76]	; (8003710 <HAL_InitTick+0xa8>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0c9b      	lsrs	r3, r3, #18
 80036c8:	3b01      	subs	r3, #1
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_InitTick+0xac>)
 80036ce:	4a12      	ldr	r2, [pc, #72]	; (8003718 <HAL_InitTick+0xb0>)
 80036d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_InitTick+0xac>)
 80036d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036d8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80036da:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <HAL_InitTick+0xac>)
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_InitTick+0xac>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_InitTick+0xac>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80036ec:	4809      	ldr	r0, [pc, #36]	; (8003714 <HAL_InitTick+0xac>)
 80036ee:	f002 ff5b 	bl	80065a8 <HAL_TIM_Base_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80036f8:	4806      	ldr	r0, [pc, #24]	; (8003714 <HAL_InitTick+0xac>)
 80036fa:	f002 ffa5 	bl	8006648 <HAL_TIM_Base_Start_IT>
 80036fe:	4603      	mov	r3, r0
 8003700:	e000      	b.n	8003704 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
}
 8003704:	4618      	mov	r0, r3
 8003706:	3730      	adds	r7, #48	; 0x30
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	431bde83 	.word	0x431bde83
 8003714:	200006fc 	.word	0x200006fc
 8003718:	40001400 	.word	0x40001400

0800371c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003720:	e7fe      	b.n	8003720 <NMI_Handler+0x4>

08003722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003726:	e7fe      	b.n	8003726 <HardFault_Handler+0x4>

08003728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800372c:	e7fe      	b.n	800372c <MemManage_Handler+0x4>

0800372e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003732:	e7fe      	b.n	8003732 <BusFault_Handler+0x4>

08003734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003738:	e7fe      	b.n	8003738 <UsageFault_Handler+0x4>

0800373a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <TIM7_IRQHandler+0x10>)
 800374e:	f003 f90d 	bl	800696c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200006fc 	.word	0x200006fc

0800375c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <DMA2_Stream1_IRQHandler+0x10>)
 8003762:	f001 fa3f 	bl	8004be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000650 	.word	0x20000650

08003770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
	return 1;
 8003774:	2301      	movs	r3, #1
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <_kill>:

int _kill(int pid, int sig)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800378a:	f007 f84f 	bl	800a82c <__errno>
 800378e:	4603      	mov	r3, r0
 8003790:	2216      	movs	r2, #22
 8003792:	601a      	str	r2, [r3, #0]
	return -1;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <_exit>:

void _exit (int status)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ffe7 	bl	8003780 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037b2:	e7fe      	b.n	80037b2 <_exit+0x12>

080037b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e00a      	b.n	80037dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037c6:	f3af 8000 	nop.w
 80037ca:	4601      	mov	r1, r0
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	60ba      	str	r2, [r7, #8]
 80037d2:	b2ca      	uxtb	r2, r1
 80037d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	3301      	adds	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	dbf0      	blt.n	80037c6 <_read+0x12>
	}

return len;
 80037e4:	687b      	ldr	r3, [r7, #4]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e009      	b.n	8003814 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	60ba      	str	r2, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	3301      	adds	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	429a      	cmp	r2, r3
 800381a:	dbf1      	blt.n	8003800 <_write+0x12>
	}
	return len;
 800381c:	687b      	ldr	r3, [r7, #4]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <_close>:

int _close(int file)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
	return -1;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800384e:	605a      	str	r2, [r3, #4]
	return 0;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_isatty>:

int _isatty(int file)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
	return 1;
 8003866:	2301      	movs	r3, #1
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
	return 0;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003898:	4a14      	ldr	r2, [pc, #80]	; (80038ec <_sbrk+0x5c>)
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <_sbrk+0x60>)
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <_sbrk+0x64>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <_sbrk+0x64>)
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <_sbrk+0x68>)
 80038b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <_sbrk+0x64>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d207      	bcs.n	80038d0 <_sbrk+0x40>
  {    errno = ENOMEM;
 80038c0:	f006 ffb4 	bl	800a82c <__errno>
 80038c4:	4603      	mov	r3, r0
 80038c6:	220c      	movs	r2, #12
 80038c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	e009      	b.n	80038e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <_sbrk+0x64>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <_sbrk+0x64>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <_sbrk+0x64>)
 80038e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20020000 	.word	0x20020000
 80038f0:	00000400 	.word	0x00000400
 80038f4:	20000744 	.word	0x20000744
 80038f8:	200050b0 	.word	0x200050b0

080038fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <SystemInit+0x20>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	4a05      	ldr	r2, [pc, #20]	; (800391c <SystemInit+0x20>)
 8003908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800390c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003924:	480d      	ldr	r0, [pc, #52]	; (800395c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003926:	490e      	ldr	r1, [pc, #56]	; (8003960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003928:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800392c:	e002      	b.n	8003934 <LoopCopyDataInit>

0800392e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003932:	3304      	adds	r3, #4

08003934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003938:	d3f9      	bcc.n	800392e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800393a:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800393c:	4c0b      	ldr	r4, [pc, #44]	; (800396c <LoopFillZerobss+0x26>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003940:	e001      	b.n	8003946 <LoopFillZerobss>

08003942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003944:	3204      	adds	r2, #4

08003946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003948:	d3fb      	bcc.n	8003942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800394a:	f7ff ffd7 	bl	80038fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800394e:	f006 ff73 	bl	800a838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003952:	f7fd fe67 	bl	8001624 <main>
  bx  lr    
 8003956:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800395c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003960:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003964:	0800f918 	.word	0x0800f918
  ldr r2, =_sbss
 8003968:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800396c:	200050ac 	.word	0x200050ac

08003970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003970:	e7fe      	b.n	8003970 <ADC_IRQHandler>
	...

08003974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003978:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <HAL_Init+0x40>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0d      	ldr	r2, [pc, #52]	; (80039b4 <HAL_Init+0x40>)
 800397e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_Init+0x40>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HAL_Init+0x40>)
 800398a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <HAL_Init+0x40>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <HAL_Init+0x40>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800399c:	2003      	movs	r0, #3
 800399e:	f001 f83e 	bl	8004a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039a2:	200f      	movs	r0, #15
 80039a4:	f7ff fe60 	bl	8003668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a8:	f7ff fc56 	bl	8003258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023c00 	.word	0x40023c00

080039b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_IncTick+0x20>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_IncTick+0x24>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	4a04      	ldr	r2, [pc, #16]	; (80039dc <HAL_IncTick+0x24>)
 80039ca:	6013      	str	r3, [r2, #0]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000008 	.word	0x20000008
 80039dc:	20000748 	.word	0x20000748

080039e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return uwTick;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_GetTick+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000748 	.word	0x20000748

080039f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff ffee 	bl	80039e0 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d005      	beq.n	8003a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_Delay+0x44>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a1e:	bf00      	nop
 8003a20:	f7ff ffde 	bl	80039e0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d8f7      	bhi.n	8003a20 <HAL_Delay+0x28>
  {
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000008 	.word	0x20000008

08003a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e033      	b.n	8003abe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fc26 	bl	80032b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a86:	f023 0302 	bic.w	r3, r3, #2
 8003a8a:	f043 0202 	orr.w	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa0c 	bl	8003eb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
 8003aae:	e001      	b.n	8003ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_Start+0x1a>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e0b2      	b.n	8003c48 <HAL_ADC_Start+0x180>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d018      	beq.n	8003b2a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b08:	4b52      	ldr	r3, [pc, #328]	; (8003c54 <HAL_ADC_Start+0x18c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_ADC_Start+0x190>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0c9a      	lsrs	r2, r3, #18
 8003b14:	4613      	mov	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003b1c:	e002      	b.n	8003b24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f9      	bne.n	8003b1e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d17a      	bne.n	8003c2e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d106      	bne.n	8003b86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f023 0206 	bic.w	r2, r3, #6
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
 8003b84:	e002      	b.n	8003b8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b94:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_ADC_Start+0x194>)
 8003b96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d12a      	bne.n	8003c04 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <HAL_ADC_Start+0x198>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d015      	beq.n	8003be4 <HAL_ADC_Start+0x11c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a29      	ldr	r2, [pc, #164]	; (8003c64 <HAL_ADC_Start+0x19c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d105      	bne.n	8003bce <HAL_ADC_Start+0x106>
 8003bc2:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <HAL_ADC_Start+0x194>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <HAL_ADC_Start+0x1a0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d136      	bne.n	8003c46 <HAL_ADC_Start+0x17e>
 8003bd8:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_ADC_Start+0x194>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d130      	bne.n	8003c46 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d129      	bne.n	8003c46 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	e020      	b.n	8003c46 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <HAL_ADC_Start+0x198>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d11b      	bne.n	8003c46 <HAL_ADC_Start+0x17e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d114      	bne.n	8003c46 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	e00b      	b.n	8003c46 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0210 	orr.w	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20000000 	.word	0x20000000
 8003c58:	431bde83 	.word	0x431bde83
 8003c5c:	40012300 	.word	0x40012300
 8003c60:	40012000 	.word	0x40012000
 8003c64:	40012100 	.word	0x40012100
 8003c68:	40012200 	.word	0x40012200

08003c6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e105      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x228>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b09      	cmp	r3, #9
 8003c96:	d925      	bls.n	8003ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68d9      	ldr	r1, [r3, #12]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	3b1e      	subs	r3, #30
 8003cae:	2207      	movs	r2, #7
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	400a      	ands	r2, r1
 8003cbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4403      	add	r3, r0
 8003cd6:	3b1e      	subs	r3, #30
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e022      	b.n	8003d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	400a      	ands	r2, r1
 8003d06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6919      	ldr	r1, [r3, #16]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4403      	add	r3, r0
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d824      	bhi.n	8003d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	3b05      	subs	r3, #5
 8003d44:	221f      	movs	r2, #31
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	400a      	ands	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3b05      	subs	r3, #5
 8003d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34
 8003d7a:	e04c      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d824      	bhi.n	8003dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	3b23      	subs	r3, #35	; 0x23
 8003d96:	221f      	movs	r2, #31
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	400a      	ands	r2, r1
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b23      	subs	r3, #35	; 0x23
 8003dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
 8003dcc:	e023      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	3b41      	subs	r3, #65	; 0x41
 8003de0:	221f      	movs	r2, #31
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	400a      	ands	r2, r1
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	3b41      	subs	r3, #65	; 0x41
 8003e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_ADC_ConfigChannel+0x234>)
 8003e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <HAL_ADC_ConfigChannel+0x238>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d109      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x1cc>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b12      	cmp	r3, #18
 8003e2a:	d105      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_ADC_ConfigChannel+0x238>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d123      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d003      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x1e6>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b11      	cmp	r3, #17
 8003e50:	d11b      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d111      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_ADC_ConfigChannel+0x23c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a10      	ldr	r2, [pc, #64]	; (8003eac <HAL_ADC_ConfigChannel+0x240>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	0c9a      	lsrs	r2, r3, #18
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e7c:	e002      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f9      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40012300 	.word	0x40012300
 8003ea4:	40012000 	.word	0x40012000
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	431bde83 	.word	0x431bde83

08003eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eb8:	4b79      	ldr	r3, [pc, #484]	; (80040a0 <ADC_Init+0x1f0>)
 8003eba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	021a      	lsls	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	4a58      	ldr	r2, [pc, #352]	; (80040a4 <ADC_Init+0x1f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e00f      	b.n	8003fae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0202 	bic.w	r2, r2, #2
 8003fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7e1b      	ldrb	r3, [r3, #24]
 8003fc8:	005a      	lsls	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	3b01      	subs	r3, #1
 8004008:	035a      	lsls	r2, r3, #13
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e007      	b.n	8004024 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004022:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	3b01      	subs	r3, #1
 8004040:	051a      	lsls	r2, r3, #20
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6899      	ldr	r1, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004066:	025a      	lsls	r2, r3, #9
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	029a      	lsls	r2, r3, #10
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012300 	.word	0x40012300
 80040a4:	0f000001 	.word	0x0f000001

080040a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0ed      	b.n	8004296 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff f936 	bl	8003338 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7ff fc80 	bl	80039e0 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040e2:	e012      	b.n	800410a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040e4:	f7ff fc7c 	bl	80039e0 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b0a      	cmp	r3, #10
 80040f0:	d90b      	bls.n	800410a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2205      	movs	r2, #5
 8004102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0c5      	b.n	8004296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0e5      	beq.n	80040e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0202 	bic.w	r2, r2, #2
 8004126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004128:	f7ff fc5a 	bl	80039e0 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800412e:	e012      	b.n	8004156 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004130:	f7ff fc56 	bl	80039e0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b0a      	cmp	r3, #10
 800413c:	d90b      	bls.n	8004156 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2205      	movs	r2, #5
 800414e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e09f      	b.n	8004296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7e1b      	ldrb	r3, [r3, #24]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d108      	bne.n	800417e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e007      	b.n	800418e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7e5b      	ldrb	r3, [r3, #25]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d108      	bne.n	80041a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e007      	b.n	80041b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7e9b      	ldrb	r3, [r3, #26]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d108      	bne.n	80041d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0220 	orr.w	r2, r2, #32
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e007      	b.n	80041e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0220 	bic.w	r2, r2, #32
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	7edb      	ldrb	r3, [r3, #27]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d108      	bne.n	80041fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0210 	bic.w	r2, r2, #16
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e007      	b.n	800420c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0210 	orr.w	r2, r2, #16
 800420a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	7f1b      	ldrb	r3, [r3, #28]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d108      	bne.n	8004226 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0208 	orr.w	r2, r2, #8
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e007      	b.n	8004236 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0208 	bic.w	r2, r2, #8
 8004234:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7f5b      	ldrb	r3, [r3, #29]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d108      	bne.n	8004250 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0204 	orr.w	r2, r2, #4
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e007      	b.n	8004260 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0204 	bic.w	r2, r2, #4
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	ea42 0103 	orr.w	r1, r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d003      	beq.n	80042c6 <HAL_CAN_ConfigFilter+0x26>
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	f040 80be 	bne.w	8004442 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80042c6:	4b65      	ldr	r3, [pc, #404]	; (800445c <HAL_CAN_ConfigFilter+0x1bc>)
 80042c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042d0:	f043 0201 	orr.w	r2, r3, #1
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	431a      	orrs	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2201      	movs	r2, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43db      	mvns	r3, r3
 8004318:	401a      	ands	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d123      	bne.n	8004370 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	43db      	mvns	r3, r3
 8004332:	401a      	ands	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800434a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3248      	adds	r2, #72	; 0x48
 8004350:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004364:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004366:	6979      	ldr	r1, [r7, #20]
 8004368:	3348      	adds	r3, #72	; 0x48
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	440b      	add	r3, r1
 800436e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d122      	bne.n	80043be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	431a      	orrs	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004398:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3248      	adds	r2, #72	; 0x48
 800439e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043b4:	6979      	ldr	r1, [r7, #20]
 80043b6:	3348      	adds	r3, #72	; 0x48
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	401a      	ands	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80043d8:	e007      	b.n	80043ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	401a      	ands	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004404:	e007      	b.n	8004416 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	431a      	orrs	r2, r3
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	431a      	orrs	r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004434:	f023 0201 	bic.w	r2, r3, #1
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e006      	b.n	8004450 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40006400 	.word	0x40006400

08004460 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d12e      	bne.n	80044d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800448c:	f7ff faa8 	bl	80039e0 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004492:	e012      	b.n	80044ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004494:	f7ff faa4 	bl	80039e0 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b0a      	cmp	r3, #10
 80044a0:	d90b      	bls.n	80044ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2205      	movs	r2, #5
 80044b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e012      	b.n	80044e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e006      	b.n	80044e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	; 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004506:	7ffb      	ldrb	r3, [r7, #31]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d003      	beq.n	8004514 <HAL_CAN_AddTxMessage+0x2c>
 800450c:	7ffb      	ldrb	r3, [r7, #31]
 800450e:	2b02      	cmp	r3, #2
 8004510:	f040 80b8 	bne.w	8004684 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a0 	beq.w	8004674 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	0e1b      	lsrs	r3, r3, #24
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d907      	bls.n	8004554 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e09e      	b.n	8004692 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004554:	2201      	movs	r2, #1
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	409a      	lsls	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10d      	bne.n	8004582 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	6809      	ldr	r1, [r1, #0]
 8004574:	431a      	orrs	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	3318      	adds	r3, #24
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	440b      	add	r3, r1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e00f      	b.n	80045a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800458c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004596:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3318      	adds	r3, #24
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	440b      	add	r3, r1
 80045a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3318      	adds	r3, #24
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	440b      	add	r3, r1
 80045b2:	3304      	adds	r3, #4
 80045b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	7d1b      	ldrb	r3, [r3, #20]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d111      	bne.n	80045e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	3318      	adds	r3, #24
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	4413      	add	r3, r2
 80045ca:	3304      	adds	r3, #4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	6811      	ldr	r1, [r2, #0]
 80045d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3318      	adds	r3, #24
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	440b      	add	r3, r1
 80045de:	3304      	adds	r3, #4
 80045e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3307      	adds	r3, #7
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	061a      	lsls	r2, r3, #24
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3306      	adds	r3, #6
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	041b      	lsls	r3, r3, #16
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3305      	adds	r3, #5
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	4313      	orrs	r3, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	3204      	adds	r2, #4
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	4610      	mov	r0, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	6811      	ldr	r1, [r2, #0]
 800460a:	ea43 0200 	orr.w	r2, r3, r0
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	440b      	add	r3, r1
 8004614:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004618:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3303      	adds	r3, #3
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	061a      	lsls	r2, r3, #24
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3302      	adds	r3, #2
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3301      	adds	r3, #1
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	4313      	orrs	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	4610      	mov	r0, r2
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	6811      	ldr	r1, [r2, #0]
 8004640:	ea43 0200 	orr.w	r2, r3, r0
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	440b      	add	r3, r1
 800464a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800464e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3318      	adds	r3, #24
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	4413      	add	r3, r2
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	6811      	ldr	r1, [r2, #0]
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	3318      	adds	r3, #24
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	440b      	add	r3, r1
 800466e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e00e      	b.n	8004692 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e006      	b.n	8004692 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800469e:	b480      	push	{r7}
 80046a0:	b087      	sub	sp, #28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d003      	beq.n	80046c2 <HAL_CAN_GetRxMessage+0x24>
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	f040 80f3 	bne.w	80048a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10e      	bne.n	80046e6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d116      	bne.n	8004704 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e0e7      	b.n	80048b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d107      	bne.n	8004704 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0d8      	b.n	80048b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	331b      	adds	r3, #27
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	4413      	add	r3, r2
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0204 	and.w	r2, r3, #4
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	331b      	adds	r3, #27
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	4413      	add	r3, r2
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0d5b      	lsrs	r3, r3, #21
 8004732:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e00b      	b.n	8004754 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	331b      	adds	r3, #27
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	4413      	add	r3, r2
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	08db      	lsrs	r3, r3, #3
 800474c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	331b      	adds	r3, #27
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	4413      	add	r3, r2
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0202 	and.w	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	331b      	adds	r3, #27
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	4413      	add	r3, r2
 8004776:	3304      	adds	r3, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	331b      	adds	r3, #27
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	4413      	add	r3, r2
 800478e:	3304      	adds	r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	b2da      	uxtb	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	331b      	adds	r3, #27
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	4413      	add	r3, r2
 80047a6:	3304      	adds	r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0a1a      	lsrs	r2, r3, #8
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0c1a      	lsrs	r2, r3, #16
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	3302      	adds	r3, #2
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	4413      	add	r3, r2
 8004806:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0e1a      	lsrs	r2, r3, #24
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	3303      	adds	r3, #3
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	4413      	add	r3, r2
 8004820:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	3304      	adds	r3, #4
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	4413      	add	r3, r2
 8004838:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	0a1a      	lsrs	r2, r3, #8
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	3305      	adds	r3, #5
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	4413      	add	r3, r2
 8004852:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	0c1a      	lsrs	r2, r3, #16
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	3306      	adds	r3, #6
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	4413      	add	r3, r2
 800486c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	0e1a      	lsrs	r2, r3, #24
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	3307      	adds	r3, #7
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0220 	orr.w	r2, r2, #32
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	e007      	b.n	80048a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0220 	orr.w	r2, r2, #32
 80048a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e006      	b.n	80048b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <__NVIC_SetPriorityGrouping+0x44>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048e0:	4013      	ands	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048f6:	4a04      	ldr	r2, [pc, #16]	; (8004908 <__NVIC_SetPriorityGrouping+0x44>)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	60d3      	str	r3, [r2, #12]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <__NVIC_GetPriorityGrouping+0x18>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	0a1b      	lsrs	r3, r3, #8
 8004916:	f003 0307 	and.w	r3, r3, #7
}
 800491a:	4618      	mov	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	e000ed00 	.word	0xe000ed00

08004928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	2b00      	cmp	r3, #0
 8004938:	db0b      	blt.n	8004952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	f003 021f 	and.w	r2, r3, #31
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <__NVIC_EnableIRQ+0x38>)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2001      	movs	r0, #1
 800494a:	fa00 f202 	lsl.w	r2, r0, r2
 800494e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e100 	.word	0xe000e100

08004964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	6039      	str	r1, [r7, #0]
 800496e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004974:	2b00      	cmp	r3, #0
 8004976:	db0a      	blt.n	800498e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	490c      	ldr	r1, [pc, #48]	; (80049b0 <__NVIC_SetPriority+0x4c>)
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	0112      	lsls	r2, r2, #4
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	440b      	add	r3, r1
 8004988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800498c:	e00a      	b.n	80049a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	4908      	ldr	r1, [pc, #32]	; (80049b4 <__NVIC_SetPriority+0x50>)
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	3b04      	subs	r3, #4
 800499c:	0112      	lsls	r2, r2, #4
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	440b      	add	r3, r1
 80049a2:	761a      	strb	r2, [r3, #24]
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	e000e100 	.word	0xe000e100
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	; 0x24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f1c3 0307 	rsb	r3, r3, #7
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	bf28      	it	cs
 80049d6:	2304      	movcs	r3, #4
 80049d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3304      	adds	r3, #4
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d902      	bls.n	80049e8 <NVIC_EncodePriority+0x30>
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3b03      	subs	r3, #3
 80049e6:	e000      	b.n	80049ea <NVIC_EncodePriority+0x32>
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049ec:	f04f 32ff 	mov.w	r2, #4294967295
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43da      	mvns	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	401a      	ands	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a00:	f04f 31ff 	mov.w	r1, #4294967295
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0a:	43d9      	mvns	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a10:	4313      	orrs	r3, r2
         );
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3724      	adds	r7, #36	; 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff ff4c 	bl	80048c4 <__NVIC_SetPriorityGrouping>
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a46:	f7ff ff61 	bl	800490c <__NVIC_GetPriorityGrouping>
 8004a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	6978      	ldr	r0, [r7, #20]
 8004a52:	f7ff ffb1 	bl	80049b8 <NVIC_EncodePriority>
 8004a56:	4602      	mov	r2, r0
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff ff80 	bl	8004964 <__NVIC_SetPriority>
}
 8004a64:	bf00      	nop
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff ff54 	bl	8004928 <__NVIC_EnableIRQ>
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a94:	f7fe ffa4 	bl	80039e0 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e099      	b.n	8004bd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ac4:	e00f      	b.n	8004ae6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ac6:	f7fe ff8b 	bl	80039e0 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	d908      	bls.n	8004ae6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2203      	movs	r2, #3
 8004ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e078      	b.n	8004bd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e8      	bne.n	8004ac6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4b38      	ldr	r3, [pc, #224]	; (8004be0 <HAL_DMA_Init+0x158>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d107      	bne.n	8004b50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0307 	bic.w	r3, r3, #7
 8004b66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d117      	bne.n	8004baa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00e      	beq.n	8004baa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f9e9 	bl	8004f64 <DMA_CheckFifoParam>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e016      	b.n	8004bd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9a0 	bl	8004ef8 <DMA_CalcBaseAndBitshift>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc0:	223f      	movs	r2, #63	; 0x3f
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	f010803f 	.word	0xf010803f

08004be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bf0:	4b8e      	ldr	r3, [pc, #568]	; (8004e2c <HAL_DMA_IRQHandler+0x248>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a8e      	ldr	r2, [pc, #568]	; (8004e30 <HAL_DMA_IRQHandler+0x24c>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0a9b      	lsrs	r3, r3, #10
 8004bfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	2208      	movs	r2, #8
 8004c10:	409a      	lsls	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01a      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0204 	bic.w	r2, r2, #4
 8004c36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	2201      	movs	r2, #1
 8004c56:	409a      	lsls	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d012      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c72:	2201      	movs	r2, #1
 8004c74:	409a      	lsls	r2, r3
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	f043 0202 	orr.w	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d012      	beq.n	8004cbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca8:	2204      	movs	r2, #4
 8004caa:	409a      	lsls	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f043 0204 	orr.w	r2, r3, #4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d043      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d03c      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cde:	2210      	movs	r2, #16
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d018      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d108      	bne.n	8004d14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d024      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
 8004d12:	e01f      	b.n	8004d54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01b      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
 8004d24:	e016      	b.n	8004d54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0208 	bic.w	r2, r2, #8
 8004d42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d58:	2220      	movs	r2, #32
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 808f 	beq.w	8004e84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8087 	beq.w	8004e84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d136      	bne.n	8004dfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0216 	bic.w	r2, r2, #22
 8004d9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695a      	ldr	r2, [r3, #20]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <HAL_DMA_IRQHandler+0x1da>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0208 	bic.w	r2, r2, #8
 8004dcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd2:	223f      	movs	r2, #63	; 0x3f
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d07e      	beq.n	8004ef0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	4798      	blx	r3
        }
        return;
 8004dfa:	e079      	b.n	8004ef0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01d      	beq.n	8004e46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10d      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d031      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
 8004e28:	e02c      	b.n	8004e84 <HAL_DMA_IRQHandler+0x2a0>
 8004e2a:	bf00      	nop
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d023      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
 8004e44:	e01e      	b.n	8004e84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10f      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0210 	bic.w	r2, r2, #16
 8004e62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d032      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d022      	beq.n	8004ede <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2205      	movs	r2, #5
 8004e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d307      	bcc.n	8004ecc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f2      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x2cc>
 8004eca:	e000      	b.n	8004ece <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ecc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
 8004eee:	e000      	b.n	8004ef2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ef0:	bf00      	nop
    }
  }
}
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	3b10      	subs	r3, #16
 8004f08:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <DMA_CalcBaseAndBitshift+0x64>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f12:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <DMA_CalcBaseAndBitshift+0x68>)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d909      	bls.n	8004f3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	1d1a      	adds	r2, r3, #4
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	659a      	str	r2, [r3, #88]	; 0x58
 8004f38:	e007      	b.n	8004f4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	aaaaaaab 	.word	0xaaaaaaab
 8004f60:	0800f458 	.word	0x0800f458

08004f64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d11f      	bne.n	8004fbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d856      	bhi.n	8005032 <DMA_CheckFifoParam+0xce>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <DMA_CheckFifoParam+0x28>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004faf 	.word	0x08004faf
 8004f94:	08004f9d 	.word	0x08004f9d
 8004f98:	08005033 	.word	0x08005033
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d046      	beq.n	8005036 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fac:	e043      	b.n	8005036 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fb6:	d140      	bne.n	800503a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fbc:	e03d      	b.n	800503a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc6:	d121      	bne.n	800500c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d837      	bhi.n	800503e <DMA_CheckFifoParam+0xda>
 8004fce:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <DMA_CheckFifoParam+0x70>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08004fe5 	.word	0x08004fe5
 8004fd8:	08004feb 	.word	0x08004feb
 8004fdc:	08004fe5 	.word	0x08004fe5
 8004fe0:	08004ffd 	.word	0x08004ffd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe8:	e030      	b.n	800504c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d025      	beq.n	8005042 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffa:	e022      	b.n	8005042 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005004:	d11f      	bne.n	8005046 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800500a:	e01c      	b.n	8005046 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d903      	bls.n	800501a <DMA_CheckFifoParam+0xb6>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d003      	beq.n	8005020 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005018:	e018      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
      break;
 800501e:	e015      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00e      	beq.n	800504a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	e00b      	b.n	800504a <DMA_CheckFifoParam+0xe6>
      break;
 8005032:	bf00      	nop
 8005034:	e00a      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 8005036:	bf00      	nop
 8005038:	e008      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 800503a:	bf00      	nop
 800503c:	e006      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 800503e:	bf00      	nop
 8005040:	e004      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;   
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <DMA_CheckFifoParam+0xe8>
      break;
 800504a:	bf00      	nop
    }
  } 
  
  return status; 
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop

0800505c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800505c:	b480      	push	{r7}
 800505e:	b089      	sub	sp, #36	; 0x24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	e16b      	b.n	8005350 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005078:	2201      	movs	r2, #1
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	429a      	cmp	r2, r3
 8005092:	f040 815a 	bne.w	800534a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d005      	beq.n	80050ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d130      	bne.n	8005110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	2203      	movs	r2, #3
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050e4:	2201      	movs	r2, #1
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 0201 	and.w	r2, r3, #1
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	2b03      	cmp	r3, #3
 800511a:	d017      	beq.n	800514c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d123      	bne.n	80051a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	08da      	lsrs	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3208      	adds	r2, #8
 8005160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	220f      	movs	r2, #15
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	08da      	lsrs	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3208      	adds	r2, #8
 800519a:	69b9      	ldr	r1, [r7, #24]
 800519c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	2203      	movs	r2, #3
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0203 	and.w	r2, r3, #3
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80b4 	beq.w	800534a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	4b60      	ldr	r3, [pc, #384]	; (8005368 <HAL_GPIO_Init+0x30c>)
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	4a5f      	ldr	r2, [pc, #380]	; (8005368 <HAL_GPIO_Init+0x30c>)
 80051ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f0:	6453      	str	r3, [r2, #68]	; 0x44
 80051f2:	4b5d      	ldr	r3, [pc, #372]	; (8005368 <HAL_GPIO_Init+0x30c>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051fe:	4a5b      	ldr	r2, [pc, #364]	; (800536c <HAL_GPIO_Init+0x310>)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	3302      	adds	r3, #2
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	220f      	movs	r2, #15
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a52      	ldr	r2, [pc, #328]	; (8005370 <HAL_GPIO_Init+0x314>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02b      	beq.n	8005282 <HAL_GPIO_Init+0x226>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a51      	ldr	r2, [pc, #324]	; (8005374 <HAL_GPIO_Init+0x318>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d025      	beq.n	800527e <HAL_GPIO_Init+0x222>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a50      	ldr	r2, [pc, #320]	; (8005378 <HAL_GPIO_Init+0x31c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01f      	beq.n	800527a <HAL_GPIO_Init+0x21e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a4f      	ldr	r2, [pc, #316]	; (800537c <HAL_GPIO_Init+0x320>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d019      	beq.n	8005276 <HAL_GPIO_Init+0x21a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a4e      	ldr	r2, [pc, #312]	; (8005380 <HAL_GPIO_Init+0x324>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_GPIO_Init+0x216>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a4d      	ldr	r2, [pc, #308]	; (8005384 <HAL_GPIO_Init+0x328>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00d      	beq.n	800526e <HAL_GPIO_Init+0x212>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a4c      	ldr	r2, [pc, #304]	; (8005388 <HAL_GPIO_Init+0x32c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <HAL_GPIO_Init+0x20e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a4b      	ldr	r2, [pc, #300]	; (800538c <HAL_GPIO_Init+0x330>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d101      	bne.n	8005266 <HAL_GPIO_Init+0x20a>
 8005262:	2307      	movs	r3, #7
 8005264:	e00e      	b.n	8005284 <HAL_GPIO_Init+0x228>
 8005266:	2308      	movs	r3, #8
 8005268:	e00c      	b.n	8005284 <HAL_GPIO_Init+0x228>
 800526a:	2306      	movs	r3, #6
 800526c:	e00a      	b.n	8005284 <HAL_GPIO_Init+0x228>
 800526e:	2305      	movs	r3, #5
 8005270:	e008      	b.n	8005284 <HAL_GPIO_Init+0x228>
 8005272:	2304      	movs	r3, #4
 8005274:	e006      	b.n	8005284 <HAL_GPIO_Init+0x228>
 8005276:	2303      	movs	r3, #3
 8005278:	e004      	b.n	8005284 <HAL_GPIO_Init+0x228>
 800527a:	2302      	movs	r3, #2
 800527c:	e002      	b.n	8005284 <HAL_GPIO_Init+0x228>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_GPIO_Init+0x228>
 8005282:	2300      	movs	r3, #0
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	f002 0203 	and.w	r2, r2, #3
 800528a:	0092      	lsls	r2, r2, #2
 800528c:	4093      	lsls	r3, r2
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005294:	4935      	ldr	r1, [pc, #212]	; (800536c <HAL_GPIO_Init+0x310>)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	089b      	lsrs	r3, r3, #2
 800529a:	3302      	adds	r3, #2
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052a2:	4b3b      	ldr	r3, [pc, #236]	; (8005390 <HAL_GPIO_Init+0x334>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	43db      	mvns	r3, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4013      	ands	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052c6:	4a32      	ldr	r2, [pc, #200]	; (8005390 <HAL_GPIO_Init+0x334>)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052cc:	4b30      	ldr	r3, [pc, #192]	; (8005390 <HAL_GPIO_Init+0x334>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	43db      	mvns	r3, r3
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	4013      	ands	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052f0:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_GPIO_Init+0x334>)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052f6:	4b26      	ldr	r3, [pc, #152]	; (8005390 <HAL_GPIO_Init+0x334>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	43db      	mvns	r3, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800531a:	4a1d      	ldr	r2, [pc, #116]	; (8005390 <HAL_GPIO_Init+0x334>)
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005320:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <HAL_GPIO_Init+0x334>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005344:	4a12      	ldr	r2, [pc, #72]	; (8005390 <HAL_GPIO_Init+0x334>)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3301      	adds	r3, #1
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	f67f ae90 	bls.w	8005078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
 800536c:	40013800 	.word	0x40013800
 8005370:	40020000 	.word	0x40020000
 8005374:	40020400 	.word	0x40020400
 8005378:	40020800 	.word	0x40020800
 800537c:	40020c00 	.word	0x40020c00
 8005380:	40021000 	.word	0x40021000
 8005384:	40021400 	.word	0x40021400
 8005388:	40021800 	.word	0x40021800
 800538c:	40021c00 	.word	0x40021c00
 8005390:	40013c00 	.word	0x40013c00

08005394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
 80053a0:	4613      	mov	r3, r2
 80053a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053a4:	787b      	ldrb	r3, [r7, #1]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053b0:	e003      	b.n	80053ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053b2:	887b      	ldrh	r3, [r7, #2]
 80053b4:	041a      	lsls	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	619a      	str	r2, [r3, #24]
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	460b      	mov	r3, r1
 80053d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053d8:	887a      	ldrh	r2, [r7, #2]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4013      	ands	r3, r2
 80053de:	041a      	lsls	r2, r3, #16
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	43d9      	mvns	r1, r3
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	400b      	ands	r3, r1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	619a      	str	r2, [r3, #24]
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e12b      	b.n	8005666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fd ffd0 	bl	80033c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	; 0x24
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800544e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800545e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005460:	f001 f848 	bl	80064f4 <HAL_RCC_GetPCLK1Freq>
 8005464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4a81      	ldr	r2, [pc, #516]	; (8005670 <HAL_I2C_Init+0x274>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d807      	bhi.n	8005480 <HAL_I2C_Init+0x84>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a80      	ldr	r2, [pc, #512]	; (8005674 <HAL_I2C_Init+0x278>)
 8005474:	4293      	cmp	r3, r2
 8005476:	bf94      	ite	ls
 8005478:	2301      	movls	r3, #1
 800547a:	2300      	movhi	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e006      	b.n	800548e <HAL_I2C_Init+0x92>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a7d      	ldr	r2, [pc, #500]	; (8005678 <HAL_I2C_Init+0x27c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	bf94      	ite	ls
 8005488:	2301      	movls	r3, #1
 800548a:	2300      	movhi	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0e7      	b.n	8005666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a78      	ldr	r2, [pc, #480]	; (800567c <HAL_I2C_Init+0x280>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0c9b      	lsrs	r3, r3, #18
 80054a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a6a      	ldr	r2, [pc, #424]	; (8005670 <HAL_I2C_Init+0x274>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d802      	bhi.n	80054d0 <HAL_I2C_Init+0xd4>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	3301      	adds	r3, #1
 80054ce:	e009      	b.n	80054e4 <HAL_I2C_Init+0xe8>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	4a69      	ldr	r2, [pc, #420]	; (8005680 <HAL_I2C_Init+0x284>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	3301      	adds	r3, #1
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	430b      	orrs	r3, r1
 80054ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	495c      	ldr	r1, [pc, #368]	; (8005670 <HAL_I2C_Init+0x274>)
 8005500:	428b      	cmp	r3, r1
 8005502:	d819      	bhi.n	8005538 <HAL_I2C_Init+0x13c>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1e59      	subs	r1, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005518:	400b      	ands	r3, r1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_I2C_Init+0x138>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1e59      	subs	r1, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	fbb1 f3f3 	udiv	r3, r1, r3
 800552c:	3301      	adds	r3, #1
 800552e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005532:	e051      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005534:	2304      	movs	r3, #4
 8005536:	e04f      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d111      	bne.n	8005564 <HAL_I2C_Init+0x168>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e58      	subs	r0, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	440b      	add	r3, r1
 800554e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005552:	3301      	adds	r3, #1
 8005554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e012      	b.n	800558a <HAL_I2C_Init+0x18e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1e58      	subs	r0, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	0099      	lsls	r1, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	fbb0 f3f3 	udiv	r3, r0, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Init+0x196>
 800558e:	2301      	movs	r3, #1
 8005590:	e022      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10e      	bne.n	80055b8 <HAL_I2C_Init+0x1bc>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1e58      	subs	r0, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	440b      	add	r3, r1
 80055a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b6:	e00f      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1e58      	subs	r0, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	0099      	lsls	r1, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ce:	3301      	adds	r3, #1
 80055d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	6809      	ldr	r1, [r1, #0]
 80055dc:	4313      	orrs	r3, r2
 80055de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6911      	ldr	r1, [r2, #16]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68d2      	ldr	r2, [r2, #12]
 8005612:	4311      	orrs	r1, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	430b      	orrs	r3, r1
 800561a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	000186a0 	.word	0x000186a0
 8005674:	001e847f 	.word	0x001e847f
 8005678:	003d08ff 	.word	0x003d08ff
 800567c:	431bde83 	.word	0x431bde83
 8005680:	10624dd3 	.word	0x10624dd3

08005684 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	461a      	mov	r2, r3
 8005690:	460b      	mov	r3, r1
 8005692:	817b      	strh	r3, [r7, #10]
 8005694:	4613      	mov	r3, r2
 8005696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005698:	f7fe f9a2 	bl	80039e0 <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	f040 80e0 	bne.w	800586c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	2319      	movs	r3, #25
 80056b2:	2201      	movs	r2, #1
 80056b4:	4970      	ldr	r1, [pc, #448]	; (8005878 <HAL_I2C_Master_Transmit+0x1f4>)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f964 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
 80056c4:	e0d3      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_I2C_Master_Transmit+0x50>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e0cc      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d007      	beq.n	80056fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2221      	movs	r2, #33	; 0x21
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2210      	movs	r2, #16
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	893a      	ldrh	r2, [r7, #8]
 800572a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a50      	ldr	r2, [pc, #320]	; (800587c <HAL_I2C_Master_Transmit+0x1f8>)
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800573c:	8979      	ldrh	r1, [r7, #10]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f89c 	bl	8005880 <I2C_MasterRequestWrite>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e08d      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005768:	e066      	b.n	8005838 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f9de 	bl	8005b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b04      	cmp	r3, #4
 8005780:	d107      	bne.n	8005792 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e06b      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d11b      	bne.n	800580c <HAL_I2C_Master_Transmit+0x188>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	6a39      	ldr	r1, [r7, #32]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f9ce 	bl	8005bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b04      	cmp	r3, #4
 8005822:	d107      	bne.n	8005834 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e01a      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d194      	bne.n	800576a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	00100002 	.word	0x00100002
 800587c:	ffff0000 	.word	0xffff0000

08005880 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	460b      	mov	r3, r1
 800588e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d006      	beq.n	80058aa <I2C_MasterRequestWrite+0x2a>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d003      	beq.n	80058aa <I2C_MasterRequestWrite+0x2a>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058a8:	d108      	bne.n	80058bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e00b      	b.n	80058d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	2b12      	cmp	r3, #18
 80058c2:	d107      	bne.n	80058d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f84f 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00d      	beq.n	8005908 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fa:	d103      	bne.n	8005904 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e035      	b.n	8005974 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005910:	d108      	bne.n	8005924 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005912:	897b      	ldrh	r3, [r7, #10]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005920:	611a      	str	r2, [r3, #16]
 8005922:	e01b      	b.n	800595c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005924:	897b      	ldrh	r3, [r7, #10]
 8005926:	11db      	asrs	r3, r3, #7
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 0306 	and.w	r3, r3, #6
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f063 030f 	orn	r3, r3, #15
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	490e      	ldr	r1, [pc, #56]	; (800597c <I2C_MasterRequestWrite+0xfc>)
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 f875 	bl	8005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e010      	b.n	8005974 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005952:	897b      	ldrh	r3, [r7, #10]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4907      	ldr	r1, [pc, #28]	; (8005980 <I2C_MasterRequestWrite+0x100>)
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f865 	bl	8005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	00010008 	.word	0x00010008
 8005980:	00010002 	.word	0x00010002

08005984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005994:	e025      	b.n	80059e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d021      	beq.n	80059e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599e:	f7fe f81f 	bl	80039e0 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d116      	bne.n	80059e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e023      	b.n	8005a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d10d      	bne.n	8005a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	43da      	mvns	r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4013      	ands	r3, r2
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bf0c      	ite	eq
 80059fe:	2301      	moveq	r3, #1
 8005a00:	2300      	movne	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	e00c      	b.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	43da      	mvns	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4013      	ands	r3, r2
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bf0c      	ite	eq
 8005a1a:	2301      	moveq	r3, #1
 8005a1c:	2300      	movne	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d0b6      	beq.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a40:	e051      	b.n	8005ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a50:	d123      	bne.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f043 0204 	orr.w	r2, r3, #4
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e046      	b.n	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d021      	beq.n	8005ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa2:	f7fd ff9d 	bl	80039e0 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d116      	bne.n	8005ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e020      	b.n	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10c      	bne.n	8005b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	43da      	mvns	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e00b      	b.n	8005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	43da      	mvns	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4013      	ands	r3, r2
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf14      	ite	ne
 8005b1c:	2301      	movne	r3, #1
 8005b1e:	2300      	moveq	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d18d      	bne.n	8005a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b3c:	e02d      	b.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f878 	bl	8005c34 <I2C_IsAcknowledgeFailed>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e02d      	b.n	8005baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d021      	beq.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	f7fd ff43 	bl	80039e0 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d116      	bne.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e007      	b.n	8005baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d1ca      	bne.n	8005b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bbe:	e02d      	b.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f837 	bl	8005c34 <I2C_IsAcknowledgeFailed>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e02d      	b.n	8005c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d021      	beq.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd8:	f7fd ff02 	bl	80039e0 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d116      	bne.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e007      	b.n	8005c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d1ca      	bne.n	8005bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4a:	d11b      	bne.n	8005c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f043 0204 	orr.w	r2, r3, #4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e267      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d075      	beq.n	8005d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cb2:	4b88      	ldr	r3, [pc, #544]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d00c      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cbe:	4b85      	ldr	r3, [pc, #532]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d112      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cca:	4b82      	ldr	r3, [pc, #520]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd6:	d10b      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd8:	4b7e      	ldr	r3, [pc, #504]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05b      	beq.n	8005d9c <HAL_RCC_OscConfig+0x108>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d157      	bne.n	8005d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e242      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d106      	bne.n	8005d08 <HAL_RCC_OscConfig+0x74>
 8005cfa:	4b76      	ldr	r3, [pc, #472]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a75      	ldr	r2, [pc, #468]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e01d      	b.n	8005d44 <HAL_RCC_OscConfig+0xb0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x98>
 8005d12:	4b70      	ldr	r3, [pc, #448]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6f      	ldr	r2, [pc, #444]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	4b6d      	ldr	r3, [pc, #436]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a6c      	ldr	r2, [pc, #432]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCC_OscConfig+0xb0>
 8005d2c:	4b69      	ldr	r3, [pc, #420]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a68      	ldr	r2, [pc, #416]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	4b66      	ldr	r3, [pc, #408]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a65      	ldr	r2, [pc, #404]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d013      	beq.n	8005d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4c:	f7fd fe48 	bl	80039e0 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d54:	f7fd fe44 	bl	80039e0 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	; 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e207      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	4b5b      	ldr	r3, [pc, #364]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0xc0>
 8005d72:	e014      	b.n	8005d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d74:	f7fd fe34 	bl	80039e0 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d7c:	f7fd fe30 	bl	80039e0 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b64      	cmp	r3, #100	; 0x64
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e1f3      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8e:	4b51      	ldr	r3, [pc, #324]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f0      	bne.n	8005d7c <HAL_RCC_OscConfig+0xe8>
 8005d9a:	e000      	b.n	8005d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d063      	beq.n	8005e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005daa:	4b4a      	ldr	r3, [pc, #296]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00b      	beq.n	8005dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db6:	4b47      	ldr	r3, [pc, #284]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d11c      	bne.n	8005dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc2:	4b44      	ldr	r3, [pc, #272]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d116      	bne.n	8005dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dce:	4b41      	ldr	r3, [pc, #260]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_RCC_OscConfig+0x152>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d001      	beq.n	8005de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e1c7      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de6:	4b3b      	ldr	r3, [pc, #236]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4937      	ldr	r1, [pc, #220]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfa:	e03a      	b.n	8005e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d020      	beq.n	8005e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e04:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <HAL_RCC_OscConfig+0x244>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fd fde9 	bl	80039e0 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e12:	f7fd fde5 	bl	80039e0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e1a8      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e24:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e30:	4b28      	ldr	r3, [pc, #160]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4925      	ldr	r1, [pc, #148]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]
 8005e44:	e015      	b.n	8005e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e46:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <HAL_RCC_OscConfig+0x244>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fd fdc8 	bl	80039e0 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e54:	f7fd fdc4 	bl	80039e0 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e187      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e66:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d036      	beq.n	8005eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d016      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <HAL_RCC_OscConfig+0x248>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fd fda8 	bl	80039e0 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fd fda4 	bl	80039e0 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e167      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0x200>
 8005eb2:	e01b      	b.n	8005eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <HAL_RCC_OscConfig+0x248>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eba:	f7fd fd91 	bl	80039e0 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec0:	e00e      	b.n	8005ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec2:	f7fd fd8d 	bl	80039e0 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d907      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e150      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	42470000 	.word	0x42470000
 8005edc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee0:	4b88      	ldr	r3, [pc, #544]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1ea      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8097 	beq.w	8006028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efa:	2300      	movs	r3, #0
 8005efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efe:	4b81      	ldr	r3, [pc, #516]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10f      	bne.n	8005f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	4b7d      	ldr	r3, [pc, #500]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	4a7c      	ldr	r2, [pc, #496]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f18:	6413      	str	r3, [r2, #64]	; 0x40
 8005f1a:	4b7a      	ldr	r3, [pc, #488]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f26:	2301      	movs	r3, #1
 8005f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2a:	4b77      	ldr	r3, [pc, #476]	; (8006108 <HAL_RCC_OscConfig+0x474>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d118      	bne.n	8005f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f36:	4b74      	ldr	r3, [pc, #464]	; (8006108 <HAL_RCC_OscConfig+0x474>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a73      	ldr	r2, [pc, #460]	; (8006108 <HAL_RCC_OscConfig+0x474>)
 8005f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f42:	f7fd fd4d 	bl	80039e0 <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4a:	f7fd fd49 	bl	80039e0 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e10c      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5c:	4b6a      	ldr	r3, [pc, #424]	; (8006108 <HAL_RCC_OscConfig+0x474>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f0      	beq.n	8005f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCC_OscConfig+0x2ea>
 8005f70:	4b64      	ldr	r3, [pc, #400]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	4a63      	ldr	r2, [pc, #396]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7c:	e01c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x324>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x30c>
 8005f86:	4b5f      	ldr	r3, [pc, #380]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	4a5e      	ldr	r2, [pc, #376]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	f043 0304 	orr.w	r3, r3, #4
 8005f90:	6713      	str	r3, [r2, #112]	; 0x70
 8005f92:	4b5c      	ldr	r3, [pc, #368]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f96:	4a5b      	ldr	r2, [pc, #364]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9e:	e00b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x324>
 8005fa0:	4b58      	ldr	r3, [pc, #352]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	4a57      	ldr	r2, [pc, #348]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	6713      	str	r3, [r2, #112]	; 0x70
 8005fac:	4b55      	ldr	r3, [pc, #340]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb0:	4a54      	ldr	r2, [pc, #336]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	f023 0304 	bic.w	r3, r3, #4
 8005fb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d015      	beq.n	8005fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fd fd0e 	bl	80039e0 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc6:	e00a      	b.n	8005fde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc8:	f7fd fd0a 	bl	80039e0 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e0cb      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fde:	4b49      	ldr	r3, [pc, #292]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0ee      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x334>
 8005fea:	e014      	b.n	8006016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fec:	f7fd fcf8 	bl	80039e0 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff2:	e00a      	b.n	800600a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fd fcf4 	bl	80039e0 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e0b5      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600a:	4b3e      	ldr	r3, [pc, #248]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1ee      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d105      	bne.n	8006028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800601c:	4b39      	ldr	r3, [pc, #228]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	4a38      	ldr	r2, [pc, #224]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8006022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006026:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80a1 	beq.w	8006174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006032:	4b34      	ldr	r3, [pc, #208]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b08      	cmp	r3, #8
 800603c:	d05c      	beq.n	80060f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d141      	bne.n	80060ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006046:	4b31      	ldr	r3, [pc, #196]	; (800610c <HAL_RCC_OscConfig+0x478>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604c:	f7fd fcc8 	bl	80039e0 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006054:	f7fd fcc4 	bl	80039e0 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e087      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006066:	4b27      	ldr	r3, [pc, #156]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	019b      	lsls	r3, r3, #6
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	3b01      	subs	r3, #1
 800608c:	041b      	lsls	r3, r3, #16
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	061b      	lsls	r3, r3, #24
 8006096:	491b      	ldr	r1, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 8006098:	4313      	orrs	r3, r2
 800609a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800609c:	4b1b      	ldr	r3, [pc, #108]	; (800610c <HAL_RCC_OscConfig+0x478>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a2:	f7fd fc9d 	bl	80039e0 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060aa:	f7fd fc99 	bl	80039e0 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e05c      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060bc:	4b11      	ldr	r3, [pc, #68]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x416>
 80060c8:	e054      	b.n	8006174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ca:	4b10      	ldr	r3, [pc, #64]	; (800610c <HAL_RCC_OscConfig+0x478>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d0:	f7fd fc86 	bl	80039e0 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fd fc82 	bl	80039e0 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e045      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCC_OscConfig+0x470>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x444>
 80060f6:	e03d      	b.n	8006174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e038      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
 8006104:	40023800 	.word	0x40023800
 8006108:	40007000 	.word	0x40007000
 800610c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <HAL_RCC_OscConfig+0x4ec>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d028      	beq.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006128:	429a      	cmp	r2, r3
 800612a:	d121      	bne.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d11a      	bne.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006140:	4013      	ands	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006148:	4293      	cmp	r3, r2
 800614a:	d111      	bne.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	3b01      	subs	r3, #1
 800615a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d107      	bne.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800

08006184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0cc      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006198:	4b68      	ldr	r3, [pc, #416]	; (800633c <HAL_RCC_ClockConfig+0x1b8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d90c      	bls.n	80061c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b65      	ldr	r3, [pc, #404]	; (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ae:	4b63      	ldr	r3, [pc, #396]	; (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0b8      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d020      	beq.n	800620e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d8:	4b59      	ldr	r3, [pc, #356]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a58      	ldr	r2, [pc, #352]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061f0:	4b53      	ldr	r3, [pc, #332]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	4a52      	ldr	r2, [pc, #328]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061fc:	4b50      	ldr	r3, [pc, #320]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	494d      	ldr	r1, [pc, #308]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d044      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d107      	bne.n	8006232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006222:	4b47      	ldr	r3, [pc, #284]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d119      	bne.n	8006262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e07f      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d003      	beq.n	8006242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800623e:	2b03      	cmp	r3, #3
 8006240:	d107      	bne.n	8006252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006242:	4b3f      	ldr	r3, [pc, #252]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e06f      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006252:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e067      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006262:	4b37      	ldr	r3, [pc, #220]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f023 0203 	bic.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4934      	ldr	r1, [pc, #208]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	4313      	orrs	r3, r2
 8006272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006274:	f7fd fbb4 	bl	80039e0 <HAL_GetTick>
 8006278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627a:	e00a      	b.n	8006292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800627c:	f7fd fbb0 	bl	80039e0 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f241 3288 	movw	r2, #5000	; 0x1388
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e04f      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006292:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 020c 	and.w	r2, r3, #12
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d1eb      	bne.n	800627c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a4:	4b25      	ldr	r3, [pc, #148]	; (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d20c      	bcs.n	80062cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b2:	4b22      	ldr	r3, [pc, #136]	; (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ba:	4b20      	ldr	r3, [pc, #128]	; (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d001      	beq.n	80062cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e032      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d8:	4b19      	ldr	r3, [pc, #100]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4916      	ldr	r1, [pc, #88]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	490e      	ldr	r1, [pc, #56]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800630a:	f000 f821 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 800630e:	4602      	mov	r2, r0
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	490a      	ldr	r1, [pc, #40]	; (8006344 <HAL_RCC_ClockConfig+0x1c0>)
 800631c:	5ccb      	ldrb	r3, [r1, r3]
 800631e:	fa22 f303 	lsr.w	r3, r2, r3
 8006322:	4a09      	ldr	r2, [pc, #36]	; (8006348 <HAL_RCC_ClockConfig+0x1c4>)
 8006324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <HAL_RCC_ClockConfig+0x1c8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7fd f99c 	bl	8003668 <HAL_InitTick>

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40023c00 	.word	0x40023c00
 8006340:	40023800 	.word	0x40023800
 8006344:	0800f440 	.word	0x0800f440
 8006348:	20000000 	.word	0x20000000
 800634c:	20000004 	.word	0x20000004

08006350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006354:	b090      	sub	sp, #64	; 0x40
 8006356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006360:	2300      	movs	r3, #0
 8006362:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006368:	4b59      	ldr	r3, [pc, #356]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 030c 	and.w	r3, r3, #12
 8006370:	2b08      	cmp	r3, #8
 8006372:	d00d      	beq.n	8006390 <HAL_RCC_GetSysClockFreq+0x40>
 8006374:	2b08      	cmp	r3, #8
 8006376:	f200 80a1 	bhi.w	80064bc <HAL_RCC_GetSysClockFreq+0x16c>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_RCC_GetSysClockFreq+0x34>
 800637e:	2b04      	cmp	r3, #4
 8006380:	d003      	beq.n	800638a <HAL_RCC_GetSysClockFreq+0x3a>
 8006382:	e09b      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006384:	4b53      	ldr	r3, [pc, #332]	; (80064d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006386:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006388:	e09b      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800638a:	4b53      	ldr	r3, [pc, #332]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800638c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800638e:	e098      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006390:	4b4f      	ldr	r3, [pc, #316]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800639a:	4b4d      	ldr	r3, [pc, #308]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d028      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a6:	4b4a      	ldr	r3, [pc, #296]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	099b      	lsrs	r3, r3, #6
 80063ac:	2200      	movs	r2, #0
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	627a      	str	r2, [r7, #36]	; 0x24
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063b8:	2100      	movs	r1, #0
 80063ba:	4b47      	ldr	r3, [pc, #284]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80063bc:	fb03 f201 	mul.w	r2, r3, r1
 80063c0:	2300      	movs	r3, #0
 80063c2:	fb00 f303 	mul.w	r3, r0, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	4a43      	ldr	r2, [pc, #268]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80063ca:	fba0 1202 	umull	r1, r2, r0, r2
 80063ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063d0:	460a      	mov	r2, r1
 80063d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80063d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d6:	4413      	add	r3, r2
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	2200      	movs	r2, #0
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	61fa      	str	r2, [r7, #28]
 80063e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063ea:	f7fa fc4d 	bl	8000c88 <__aeabi_uldivmod>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4613      	mov	r3, r2
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f6:	e053      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063f8:	4b35      	ldr	r3, [pc, #212]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	099b      	lsrs	r3, r3, #6
 80063fe:	2200      	movs	r2, #0
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	617a      	str	r2, [r7, #20]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800640a:	f04f 0b00 	mov.w	fp, #0
 800640e:	4652      	mov	r2, sl
 8006410:	465b      	mov	r3, fp
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	0159      	lsls	r1, r3, #5
 800641c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006420:	0150      	lsls	r0, r2, #5
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	ebb2 080a 	subs.w	r8, r2, sl
 800642a:	eb63 090b 	sbc.w	r9, r3, fp
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800643a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800643e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006442:	ebb2 0408 	subs.w	r4, r2, r8
 8006446:	eb63 0509 	sbc.w	r5, r3, r9
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	00eb      	lsls	r3, r5, #3
 8006454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006458:	00e2      	lsls	r2, r4, #3
 800645a:	4614      	mov	r4, r2
 800645c:	461d      	mov	r5, r3
 800645e:	eb14 030a 	adds.w	r3, r4, sl
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	eb45 030b 	adc.w	r3, r5, fp
 8006468:	607b      	str	r3, [r7, #4]
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006476:	4629      	mov	r1, r5
 8006478:	028b      	lsls	r3, r1, #10
 800647a:	4621      	mov	r1, r4
 800647c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006480:	4621      	mov	r1, r4
 8006482:	028a      	lsls	r2, r1, #10
 8006484:	4610      	mov	r0, r2
 8006486:	4619      	mov	r1, r3
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	2200      	movs	r2, #0
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	60fa      	str	r2, [r7, #12]
 8006490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006494:	f7fa fbf8 	bl	8000c88 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4613      	mov	r3, r2
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064a0:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	3301      	adds	r3, #1
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80064b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064ba:	e002      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80064be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3740      	adds	r7, #64	; 0x40
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800
 80064d4:	00f42400 	.word	0x00f42400
 80064d8:	017d7840 	.word	0x017d7840

080064dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064e0:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064e2:	681b      	ldr	r3, [r3, #0]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000000 	.word	0x20000000

080064f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064f8:	f7ff fff0 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 80064fc:	4602      	mov	r2, r0
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	0a9b      	lsrs	r3, r3, #10
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	4903      	ldr	r1, [pc, #12]	; (8006518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800650a:	5ccb      	ldrb	r3, [r1, r3]
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40023800 	.word	0x40023800
 8006518:	0800f450 	.word	0x0800f450

0800651c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006520:	f7ff ffdc 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 8006524:	4602      	mov	r2, r0
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	0b5b      	lsrs	r3, r3, #13
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	4903      	ldr	r1, [pc, #12]	; (8006540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006532:	5ccb      	ldrb	r3, [r1, r3]
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006538:	4618      	mov	r0, r3
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40023800 	.word	0x40023800
 8006540:	0800f450 	.word	0x0800f450

08006544 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	220f      	movs	r2, #15
 8006552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006554:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 0203 	and.w	r2, r3, #3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006560:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <HAL_RCC_GetClockConfig+0x5c>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCC_GetClockConfig+0x5c>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	08db      	lsrs	r3, r3, #3
 800657e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <HAL_RCC_GetClockConfig+0x60>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0207 	and.w	r2, r3, #7
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40023800 	.word	0x40023800
 80065a4:	40023c00 	.word	0x40023c00

080065a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e041      	b.n	800663e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fc ff42 	bl	8003458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f000 fc7a 	bl	8006ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	d001      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e04e      	b.n	80066fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a23      	ldr	r2, [pc, #140]	; (800670c <HAL_TIM_Base_Start_IT+0xc4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d022      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668a:	d01d      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <HAL_TIM_Base_Start_IT+0xc8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d018      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1e      	ldr	r2, [pc, #120]	; (8006714 <HAL_TIM_Base_Start_IT+0xcc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d013      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1c      	ldr	r2, [pc, #112]	; (8006718 <HAL_TIM_Base_Start_IT+0xd0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00e      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1b      	ldr	r2, [pc, #108]	; (800671c <HAL_TIM_Base_Start_IT+0xd4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d009      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a19      	ldr	r2, [pc, #100]	; (8006720 <HAL_TIM_Base_Start_IT+0xd8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a18      	ldr	r2, [pc, #96]	; (8006724 <HAL_TIM_Base_Start_IT+0xdc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d111      	bne.n	80066ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b06      	cmp	r3, #6
 80066d8:	d010      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0201 	orr.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ea:	e007      	b.n	80066fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40010000 	.word	0x40010000
 8006710:	40000400 	.word	0x40000400
 8006714:	40000800 	.word	0x40000800
 8006718:	40000c00 	.word	0x40000c00
 800671c:	40010400 	.word	0x40010400
 8006720:	40014000 	.word	0x40014000
 8006724:	40001800 	.word	0x40001800

08006728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e041      	b.n	80067be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f839 	bl	80067c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f000 fbba 	bl	8006ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
	...

080067dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <HAL_TIM_PWM_Start+0x24>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	bf14      	ite	ne
 80067f8:	2301      	movne	r3, #1
 80067fa:	2300      	moveq	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	e022      	b.n	8006846 <HAL_TIM_PWM_Start+0x6a>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b04      	cmp	r3, #4
 8006804:	d109      	bne.n	800681a <HAL_TIM_PWM_Start+0x3e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b01      	cmp	r3, #1
 8006810:	bf14      	ite	ne
 8006812:	2301      	movne	r3, #1
 8006814:	2300      	moveq	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	e015      	b.n	8006846 <HAL_TIM_PWM_Start+0x6a>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b08      	cmp	r3, #8
 800681e:	d109      	bne.n	8006834 <HAL_TIM_PWM_Start+0x58>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	e008      	b.n	8006846 <HAL_TIM_PWM_Start+0x6a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	bf14      	ite	ne
 8006840:	2301      	movne	r3, #1
 8006842:	2300      	moveq	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e07c      	b.n	8006948 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <HAL_TIM_PWM_Start+0x82>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800685c:	e013      	b.n	8006886 <HAL_TIM_PWM_Start+0xaa>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b04      	cmp	r3, #4
 8006862:	d104      	bne.n	800686e <HAL_TIM_PWM_Start+0x92>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800686c:	e00b      	b.n	8006886 <HAL_TIM_PWM_Start+0xaa>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d104      	bne.n	800687e <HAL_TIM_PWM_Start+0xa2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800687c:	e003      	b.n	8006886 <HAL_TIM_PWM_Start+0xaa>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2201      	movs	r2, #1
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fe10 	bl	80074b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a2d      	ldr	r2, [pc, #180]	; (8006950 <HAL_TIM_PWM_Start+0x174>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d004      	beq.n	80068a8 <HAL_TIM_PWM_Start+0xcc>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a2c      	ldr	r2, [pc, #176]	; (8006954 <HAL_TIM_PWM_Start+0x178>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d101      	bne.n	80068ac <HAL_TIM_PWM_Start+0xd0>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <HAL_TIM_PWM_Start+0xd2>
 80068ac:	2300      	movs	r3, #0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a22      	ldr	r2, [pc, #136]	; (8006950 <HAL_TIM_PWM_Start+0x174>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d022      	beq.n	8006912 <HAL_TIM_PWM_Start+0x136>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d4:	d01d      	beq.n	8006912 <HAL_TIM_PWM_Start+0x136>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <HAL_TIM_PWM_Start+0x17c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d018      	beq.n	8006912 <HAL_TIM_PWM_Start+0x136>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1d      	ldr	r2, [pc, #116]	; (800695c <HAL_TIM_PWM_Start+0x180>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <HAL_TIM_PWM_Start+0x136>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <HAL_TIM_PWM_Start+0x184>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00e      	beq.n	8006912 <HAL_TIM_PWM_Start+0x136>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a16      	ldr	r2, [pc, #88]	; (8006954 <HAL_TIM_PWM_Start+0x178>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d009      	beq.n	8006912 <HAL_TIM_PWM_Start+0x136>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a18      	ldr	r2, [pc, #96]	; (8006964 <HAL_TIM_PWM_Start+0x188>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d004      	beq.n	8006912 <HAL_TIM_PWM_Start+0x136>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a16      	ldr	r2, [pc, #88]	; (8006968 <HAL_TIM_PWM_Start+0x18c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d111      	bne.n	8006936 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b06      	cmp	r3, #6
 8006922:	d010      	beq.n	8006946 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006934:	e007      	b.n	8006946 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0201 	orr.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40010000 	.word	0x40010000
 8006954:	40010400 	.word	0x40010400
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800
 8006960:	40000c00 	.word	0x40000c00
 8006964:	40014000 	.word	0x40014000
 8006968:	40001800 	.word	0x40001800

0800696c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b02      	cmp	r3, #2
 8006980:	d122      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b02      	cmp	r3, #2
 800698e:	d11b      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0202 	mvn.w	r2, #2
 8006998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa77 	bl	8006ea2 <HAL_TIM_IC_CaptureCallback>
 80069b4:	e005      	b.n	80069c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa69 	bl	8006e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa7a 	bl	8006eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d122      	bne.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d11b      	bne.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0204 	mvn.w	r2, #4
 80069ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa4d 	bl	8006ea2 <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa3f 	bl	8006e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fa50 	bl	8006eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d122      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d11b      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0208 	mvn.w	r2, #8
 8006a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2204      	movs	r2, #4
 8006a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa23 	bl	8006ea2 <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa15 	bl	8006e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fa26 	bl	8006eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d122      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d11b      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0210 	mvn.w	r2, #16
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9f9 	bl	8006ea2 <HAL_TIM_IC_CaptureCallback>
 8006ab0:	e005      	b.n	8006abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9eb 	bl	8006e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9fc 	bl	8006eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d10e      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d107      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0201 	mvn.w	r2, #1
 8006ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fc fb9c 	bl	8003228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b80      	cmp	r3, #128	; 0x80
 8006afc:	d10e      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	2b80      	cmp	r3, #128	; 0x80
 8006b0a:	d107      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fd78 	bl	800760c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d10e      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b40      	cmp	r3, #64	; 0x40
 8006b36:	d107      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f9c1 	bl	8006eca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d10e      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d107      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0220 	mvn.w	r2, #32
 8006b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fd42 	bl	80075f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e0ae      	b.n	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	f200 809f 	bhi.w	8006ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006be5 	.word	0x08006be5
 8006bb4:	08006ce9 	.word	0x08006ce9
 8006bb8:	08006ce9 	.word	0x08006ce9
 8006bbc:	08006ce9 	.word	0x08006ce9
 8006bc0:	08006c25 	.word	0x08006c25
 8006bc4:	08006ce9 	.word	0x08006ce9
 8006bc8:	08006ce9 	.word	0x08006ce9
 8006bcc:	08006ce9 	.word	0x08006ce9
 8006bd0:	08006c67 	.word	0x08006c67
 8006bd4:	08006ce9 	.word	0x08006ce9
 8006bd8:	08006ce9 	.word	0x08006ce9
 8006bdc:	08006ce9 	.word	0x08006ce9
 8006be0:	08006ca7 	.word	0x08006ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fa18 	bl	8007020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0208 	orr.w	r2, r2, #8
 8006bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0204 	bic.w	r2, r2, #4
 8006c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6999      	ldr	r1, [r3, #24]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	619a      	str	r2, [r3, #24]
      break;
 8006c22:	e064      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fa68 	bl	8007100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6999      	ldr	r1, [r3, #24]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	021a      	lsls	r2, r3, #8
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	619a      	str	r2, [r3, #24]
      break;
 8006c64:	e043      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fabd 	bl	80071ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0208 	orr.w	r2, r2, #8
 8006c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0204 	bic.w	r2, r2, #4
 8006c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69d9      	ldr	r1, [r3, #28]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	61da      	str	r2, [r3, #28]
      break;
 8006ca4:	e023      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fb11 	bl	80072d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69d9      	ldr	r1, [r3, #28]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	021a      	lsls	r2, r3, #8
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	61da      	str	r2, [r3, #28]
      break;
 8006ce6:	e002      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
      break;
 8006cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_TIM_ConfigClockSource+0x1c>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e0b4      	b.n	8006e86 <HAL_TIM_ConfigClockSource+0x186>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d54:	d03e      	beq.n	8006dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8006d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5a:	f200 8087 	bhi.w	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d62:	f000 8086 	beq.w	8006e72 <HAL_TIM_ConfigClockSource+0x172>
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6a:	d87f      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d6c:	2b70      	cmp	r3, #112	; 0x70
 8006d6e:	d01a      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0xa6>
 8006d70:	2b70      	cmp	r3, #112	; 0x70
 8006d72:	d87b      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d74:	2b60      	cmp	r3, #96	; 0x60
 8006d76:	d050      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x11a>
 8006d78:	2b60      	cmp	r3, #96	; 0x60
 8006d7a:	d877      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b50      	cmp	r3, #80	; 0x50
 8006d7e:	d03c      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0xfa>
 8006d80:	2b50      	cmp	r3, #80	; 0x50
 8006d82:	d873      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	d058      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x13a>
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d86f      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d8c:	2b30      	cmp	r3, #48	; 0x30
 8006d8e:	d064      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x15a>
 8006d90:	2b30      	cmp	r3, #48	; 0x30
 8006d92:	d86b      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d060      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x15a>
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d867      	bhi.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d05c      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x15a>
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d05a      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x15a>
 8006da4:	e062      	b.n	8006e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6899      	ldr	r1, [r3, #8]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f000 fb5d 	bl	8007474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	609a      	str	r2, [r3, #8]
      break;
 8006dd2:	e04f      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	6899      	ldr	r1, [r3, #8]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f000 fb46 	bl	8007474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006df6:	609a      	str	r2, [r3, #8]
      break;
 8006df8:	e03c      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	6859      	ldr	r1, [r3, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f000 faba 	bl	8007380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2150      	movs	r1, #80	; 0x50
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fb13 	bl	800743e <TIM_ITRx_SetConfig>
      break;
 8006e18:	e02c      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6859      	ldr	r1, [r3, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f000 fad9 	bl	80073de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2160      	movs	r1, #96	; 0x60
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fb03 	bl	800743e <TIM_ITRx_SetConfig>
      break;
 8006e38:	e01c      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6859      	ldr	r1, [r3, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	461a      	mov	r2, r3
 8006e48:	f000 fa9a 	bl	8007380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2140      	movs	r1, #64	; 0x40
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 faf3 	bl	800743e <TIM_ITRx_SetConfig>
      break;
 8006e58:	e00c      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f000 faea 	bl	800743e <TIM_ITRx_SetConfig>
      break;
 8006e6a:	e003      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e70:	e000      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a40      	ldr	r2, [pc, #256]	; (8006ff4 <TIM_Base_SetConfig+0x114>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d013      	beq.n	8006f20 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efe:	d00f      	beq.n	8006f20 <TIM_Base_SetConfig+0x40>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a3d      	ldr	r2, [pc, #244]	; (8006ff8 <TIM_Base_SetConfig+0x118>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00b      	beq.n	8006f20 <TIM_Base_SetConfig+0x40>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a3c      	ldr	r2, [pc, #240]	; (8006ffc <TIM_Base_SetConfig+0x11c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_Base_SetConfig+0x40>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a3b      	ldr	r2, [pc, #236]	; (8007000 <TIM_Base_SetConfig+0x120>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_Base_SetConfig+0x40>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a3a      	ldr	r2, [pc, #232]	; (8007004 <TIM_Base_SetConfig+0x124>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d108      	bne.n	8006f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2f      	ldr	r2, [pc, #188]	; (8006ff4 <TIM_Base_SetConfig+0x114>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d02b      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f40:	d027      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a2c      	ldr	r2, [pc, #176]	; (8006ff8 <TIM_Base_SetConfig+0x118>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d023      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a2b      	ldr	r2, [pc, #172]	; (8006ffc <TIM_Base_SetConfig+0x11c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d01f      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a2a      	ldr	r2, [pc, #168]	; (8007000 <TIM_Base_SetConfig+0x120>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d01b      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a29      	ldr	r2, [pc, #164]	; (8007004 <TIM_Base_SetConfig+0x124>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d017      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a28      	ldr	r2, [pc, #160]	; (8007008 <TIM_Base_SetConfig+0x128>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d013      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a27      	ldr	r2, [pc, #156]	; (800700c <TIM_Base_SetConfig+0x12c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00f      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a26      	ldr	r2, [pc, #152]	; (8007010 <TIM_Base_SetConfig+0x130>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00b      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a25      	ldr	r2, [pc, #148]	; (8007014 <TIM_Base_SetConfig+0x134>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d007      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a24      	ldr	r2, [pc, #144]	; (8007018 <TIM_Base_SetConfig+0x138>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d003      	beq.n	8006f92 <TIM_Base_SetConfig+0xb2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a23      	ldr	r2, [pc, #140]	; (800701c <TIM_Base_SetConfig+0x13c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d108      	bne.n	8006fa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <TIM_Base_SetConfig+0x114>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_Base_SetConfig+0xf8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a0c      	ldr	r2, [pc, #48]	; (8007004 <TIM_Base_SetConfig+0x124>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d103      	bne.n	8006fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	615a      	str	r2, [r3, #20]
}
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40010400 	.word	0x40010400
 8007008:	40014000 	.word	0x40014000
 800700c:	40014400 	.word	0x40014400
 8007010:	40014800 	.word	0x40014800
 8007014:	40001800 	.word	0x40001800
 8007018:	40001c00 	.word	0x40001c00
 800701c:	40002000 	.word	0x40002000

08007020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f023 0201 	bic.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f023 0302 	bic.w	r3, r3, #2
 8007068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a20      	ldr	r2, [pc, #128]	; (80070f8 <TIM_OC1_SetConfig+0xd8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_OC1_SetConfig+0x64>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <TIM_OC1_SetConfig+0xdc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d10c      	bne.n	800709e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0308 	bic.w	r3, r3, #8
 800708a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 0304 	bic.w	r3, r3, #4
 800709c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a15      	ldr	r2, [pc, #84]	; (80070f8 <TIM_OC1_SetConfig+0xd8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d003      	beq.n	80070ae <TIM_OC1_SetConfig+0x8e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a14      	ldr	r2, [pc, #80]	; (80070fc <TIM_OC1_SetConfig+0xdc>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d111      	bne.n	80070d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	621a      	str	r2, [r3, #32]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40010000 	.word	0x40010000
 80070fc:	40010400 	.word	0x40010400

08007100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f023 0210 	bic.w	r2, r3, #16
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 0320 	bic.w	r3, r3, #32
 800714a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <TIM_OC2_SetConfig+0xe4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_OC2_SetConfig+0x68>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a21      	ldr	r2, [pc, #132]	; (80071e8 <TIM_OC2_SetConfig+0xe8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d10d      	bne.n	8007184 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800716e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <TIM_OC2_SetConfig+0xe4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC2_SetConfig+0x94>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <TIM_OC2_SetConfig+0xe8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d113      	bne.n	80071bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800719a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	621a      	str	r2, [r3, #32]
}
 80071d6:	bf00      	nop
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40010400 	.word	0x40010400

080071ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a21      	ldr	r2, [pc, #132]	; (80072cc <TIM_OC3_SetConfig+0xe0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <TIM_OC3_SetConfig+0x66>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a20      	ldr	r2, [pc, #128]	; (80072d0 <TIM_OC3_SetConfig+0xe4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d10d      	bne.n	800726e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800726c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a16      	ldr	r2, [pc, #88]	; (80072cc <TIM_OC3_SetConfig+0xe0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d003      	beq.n	800727e <TIM_OC3_SetConfig+0x92>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a15      	ldr	r2, [pc, #84]	; (80072d0 <TIM_OC3_SetConfig+0xe4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d113      	bne.n	80072a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800728c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40010400 	.word	0x40010400

080072d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800731e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	031b      	lsls	r3, r3, #12
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a12      	ldr	r2, [pc, #72]	; (8007378 <TIM_OC4_SetConfig+0xa4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_OC4_SetConfig+0x68>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a11      	ldr	r2, [pc, #68]	; (800737c <TIM_OC4_SetConfig+0xa8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d109      	bne.n	8007350 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	019b      	lsls	r3, r3, #6
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	621a      	str	r2, [r3, #32]
}
 800736a:	bf00      	nop
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40010000 	.word	0x40010000
 800737c:	40010400 	.word	0x40010400

08007380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f023 0201 	bic.w	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f023 030a 	bic.w	r3, r3, #10
 80073bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073de:	b480      	push	{r7}
 80073e0:	b087      	sub	sp, #28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f023 0210 	bic.w	r2, r3, #16
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	031b      	lsls	r3, r3, #12
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800741a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	621a      	str	r2, [r3, #32]
}
 8007432:	bf00      	nop
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	f043 0307 	orr.w	r3, r3, #7
 8007460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	609a      	str	r2, [r3, #8]
}
 8007468:	bf00      	nop
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800748e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	021a      	lsls	r2, r3, #8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	431a      	orrs	r2, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4313      	orrs	r3, r2
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	609a      	str	r2, [r3, #8]
}
 80074a8:	bf00      	nop
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f003 031f 	and.w	r3, r3, #31
 80074c6:	2201      	movs	r2, #1
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1a      	ldr	r2, [r3, #32]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	43db      	mvns	r3, r3
 80074d6:	401a      	ands	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ec:	431a      	orrs	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007514:	2302      	movs	r3, #2
 8007516:	e05a      	b.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a21      	ldr	r2, [pc, #132]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d022      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007564:	d01d      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d018      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d013      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a1a      	ldr	r2, [pc, #104]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00e      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a18      	ldr	r2, [pc, #96]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d009      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a17      	ldr	r2, [pc, #92]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a15      	ldr	r2, [pc, #84]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d10c      	bne.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40010400 	.word	0x40010400
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40001800 	.word	0x40001800

080075f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e03f      	b.n	80076b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fb ff5e 	bl	8003508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2224      	movs	r2, #36	; 0x24
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f929 	bl	80078bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695a      	ldr	r2, [r3, #20]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b08a      	sub	sp, #40	; 0x28
 80076be:	af02      	add	r7, sp, #8
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	603b      	str	r3, [r7, #0]
 80076c6:	4613      	mov	r3, r2
 80076c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d17c      	bne.n	80077d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_UART_Transmit+0x2c>
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e075      	b.n	80077d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Transmit+0x3e>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e06e      	b.n	80077d6 <HAL_UART_Transmit+0x11c>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2221      	movs	r2, #33	; 0x21
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800770e:	f7fc f967 	bl	80039e0 <HAL_GetTick>
 8007712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	88fa      	ldrh	r2, [r7, #6]
 8007718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	88fa      	ldrh	r2, [r7, #6]
 800771e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007728:	d108      	bne.n	800773c <HAL_UART_Transmit+0x82>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	e003      	b.n	8007744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800774c:	e02a      	b.n	80077a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2200      	movs	r2, #0
 8007756:	2180      	movs	r1, #128	; 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f840 	bl	80077de <UART_WaitOnFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e036      	b.n	80077d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800777c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	3302      	adds	r3, #2
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e007      	b.n	8007796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	3301      	adds	r3, #1
 8007794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1cf      	bne.n	800774e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2200      	movs	r2, #0
 80077b6:	2140      	movs	r1, #64	; 0x40
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f810 	bl	80077de <UART_WaitOnFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e006      	b.n	80077d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e000      	b.n	80077d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80077d4:	2302      	movs	r3, #2
  }
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b090      	sub	sp, #64	; 0x40
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	603b      	str	r3, [r7, #0]
 80077ea:	4613      	mov	r3, r2
 80077ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ee:	e050      	b.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d04c      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <UART_WaitOnFlagUntilTimeout+0x30>
 80077fe:	f7fc f8ef 	bl	80039e0 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800780a:	429a      	cmp	r2, r3
 800780c:	d241      	bcs.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	330c      	adds	r3, #12
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800782e:	637a      	str	r2, [r7, #52]	; 0x34
 8007830:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e5      	bne.n	800780e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3314      	adds	r3, #20
 8007848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	613b      	str	r3, [r7, #16]
   return(result);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	63bb      	str	r3, [r7, #56]	; 0x38
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3314      	adds	r3, #20
 8007860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007862:	623a      	str	r2, [r7, #32]
 8007864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	69f9      	ldr	r1, [r7, #28]
 8007868:	6a3a      	ldr	r2, [r7, #32]
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e5      	bne.n	8007842 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e00f      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4013      	ands	r3, r2
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	bf0c      	ite	eq
 80078a2:	2301      	moveq	r3, #1
 80078a4:	2300      	movne	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d09f      	beq.n	80077f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3740      	adds	r7, #64	; 0x40
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078c0:	b0c0      	sub	sp, #256	; 0x100
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d8:	68d9      	ldr	r1, [r3, #12]
 80078da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	ea40 0301 	orr.w	r3, r0, r1
 80078e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	4313      	orrs	r3, r2
 8007904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007914:	f021 010c 	bic.w	r1, r1, #12
 8007918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007922:	430b      	orrs	r3, r1
 8007924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007936:	6999      	ldr	r1, [r3, #24]
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	ea40 0301 	orr.w	r3, r0, r1
 8007942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	4b8f      	ldr	r3, [pc, #572]	; (8007b88 <UART_SetConfig+0x2cc>)
 800794c:	429a      	cmp	r2, r3
 800794e:	d005      	beq.n	800795c <UART_SetConfig+0xa0>
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4b8d      	ldr	r3, [pc, #564]	; (8007b8c <UART_SetConfig+0x2d0>)
 8007958:	429a      	cmp	r2, r3
 800795a:	d104      	bne.n	8007966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800795c:	f7fe fdde 	bl	800651c <HAL_RCC_GetPCLK2Freq>
 8007960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007964:	e003      	b.n	800796e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007966:	f7fe fdc5 	bl	80064f4 <HAL_RCC_GetPCLK1Freq>
 800796a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800796e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007978:	f040 810c 	bne.w	8007b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800797c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007980:	2200      	movs	r2, #0
 8007982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800798a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800798e:	4622      	mov	r2, r4
 8007990:	462b      	mov	r3, r5
 8007992:	1891      	adds	r1, r2, r2
 8007994:	65b9      	str	r1, [r7, #88]	; 0x58
 8007996:	415b      	adcs	r3, r3
 8007998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800799a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800799e:	4621      	mov	r1, r4
 80079a0:	eb12 0801 	adds.w	r8, r2, r1
 80079a4:	4629      	mov	r1, r5
 80079a6:	eb43 0901 	adc.w	r9, r3, r1
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	f04f 0300 	mov.w	r3, #0
 80079b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079be:	4690      	mov	r8, r2
 80079c0:	4699      	mov	r9, r3
 80079c2:	4623      	mov	r3, r4
 80079c4:	eb18 0303 	adds.w	r3, r8, r3
 80079c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079cc:	462b      	mov	r3, r5
 80079ce:	eb49 0303 	adc.w	r3, r9, r3
 80079d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079ea:	460b      	mov	r3, r1
 80079ec:	18db      	adds	r3, r3, r3
 80079ee:	653b      	str	r3, [r7, #80]	; 0x50
 80079f0:	4613      	mov	r3, r2
 80079f2:	eb42 0303 	adc.w	r3, r2, r3
 80079f6:	657b      	str	r3, [r7, #84]	; 0x54
 80079f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a00:	f7f9 f942 	bl	8000c88 <__aeabi_uldivmod>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4b61      	ldr	r3, [pc, #388]	; (8007b90 <UART_SetConfig+0x2d4>)
 8007a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	011c      	lsls	r4, r3, #4
 8007a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	1891      	adds	r1, r2, r2
 8007a2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a2c:	415b      	adcs	r3, r3
 8007a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a34:	4641      	mov	r1, r8
 8007a36:	eb12 0a01 	adds.w	sl, r2, r1
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a54:	4692      	mov	sl, r2
 8007a56:	469b      	mov	fp, r3
 8007a58:	4643      	mov	r3, r8
 8007a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8007a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a62:	464b      	mov	r3, r9
 8007a64:	eb4b 0303 	adc.w	r3, fp, r3
 8007a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a80:	460b      	mov	r3, r1
 8007a82:	18db      	adds	r3, r3, r3
 8007a84:	643b      	str	r3, [r7, #64]	; 0x40
 8007a86:	4613      	mov	r3, r2
 8007a88:	eb42 0303 	adc.w	r3, r2, r3
 8007a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a96:	f7f9 f8f7 	bl	8000c88 <__aeabi_uldivmod>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	4b3b      	ldr	r3, [pc, #236]	; (8007b90 <UART_SetConfig+0x2d4>)
 8007aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	2264      	movs	r2, #100	; 0x64
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
 8007aae:	1acb      	subs	r3, r1, r3
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ab6:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <UART_SetConfig+0x2d4>)
 8007ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8007abc:	095b      	lsrs	r3, r3, #5
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ac4:	441c      	add	r4, r3
 8007ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	1891      	adds	r1, r2, r2
 8007ade:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ae0:	415b      	adcs	r3, r3
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ae8:	4641      	mov	r1, r8
 8007aea:	1851      	adds	r1, r2, r1
 8007aec:	6339      	str	r1, [r7, #48]	; 0x30
 8007aee:	4649      	mov	r1, r9
 8007af0:	414b      	adcs	r3, r1
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b00:	4659      	mov	r1, fp
 8007b02:	00cb      	lsls	r3, r1, #3
 8007b04:	4651      	mov	r1, sl
 8007b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b0a:	4651      	mov	r1, sl
 8007b0c:	00ca      	lsls	r2, r1, #3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4619      	mov	r1, r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	4642      	mov	r2, r8
 8007b16:	189b      	adds	r3, r3, r2
 8007b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	460a      	mov	r2, r1
 8007b20:	eb42 0303 	adc.w	r3, r2, r3
 8007b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	18db      	adds	r3, r3, r3
 8007b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b42:	4613      	mov	r3, r2
 8007b44:	eb42 0303 	adc.w	r3, r2, r3
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b52:	f7f9 f899 	bl	8000c88 <__aeabi_uldivmod>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <UART_SetConfig+0x2d4>)
 8007b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	2164      	movs	r1, #100	; 0x64
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	3332      	adds	r3, #50	; 0x32
 8007b6e:	4a08      	ldr	r2, [pc, #32]	; (8007b90 <UART_SetConfig+0x2d4>)
 8007b70:	fba2 2303 	umull	r2, r3, r2, r3
 8007b74:	095b      	lsrs	r3, r3, #5
 8007b76:	f003 0207 	and.w	r2, r3, #7
 8007b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4422      	add	r2, r4
 8007b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b84:	e105      	b.n	8007d92 <UART_SetConfig+0x4d6>
 8007b86:	bf00      	nop
 8007b88:	40011000 	.word	0x40011000
 8007b8c:	40011400 	.word	0x40011400
 8007b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	464b      	mov	r3, r9
 8007baa:	1891      	adds	r1, r2, r2
 8007bac:	6239      	str	r1, [r7, #32]
 8007bae:	415b      	adcs	r3, r3
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bb6:	4641      	mov	r1, r8
 8007bb8:	1854      	adds	r4, r2, r1
 8007bba:	4649      	mov	r1, r9
 8007bbc:	eb43 0501 	adc.w	r5, r3, r1
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	00eb      	lsls	r3, r5, #3
 8007bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bce:	00e2      	lsls	r2, r4, #3
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	461d      	mov	r5, r3
 8007bd4:	4643      	mov	r3, r8
 8007bd6:	18e3      	adds	r3, r4, r3
 8007bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bdc:	464b      	mov	r3, r9
 8007bde:	eb45 0303 	adc.w	r3, r5, r3
 8007be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bf6:	f04f 0200 	mov.w	r2, #0
 8007bfa:	f04f 0300 	mov.w	r3, #0
 8007bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c02:	4629      	mov	r1, r5
 8007c04:	008b      	lsls	r3, r1, #2
 8007c06:	4621      	mov	r1, r4
 8007c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	008a      	lsls	r2, r1, #2
 8007c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c14:	f7f9 f838 	bl	8000c88 <__aeabi_uldivmod>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4b60      	ldr	r3, [pc, #384]	; (8007da0 <UART_SetConfig+0x4e4>)
 8007c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	011c      	lsls	r4, r3, #4
 8007c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c38:	4642      	mov	r2, r8
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	1891      	adds	r1, r2, r2
 8007c3e:	61b9      	str	r1, [r7, #24]
 8007c40:	415b      	adcs	r3, r3
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c48:	4641      	mov	r1, r8
 8007c4a:	1851      	adds	r1, r2, r1
 8007c4c:	6139      	str	r1, [r7, #16]
 8007c4e:	4649      	mov	r1, r9
 8007c50:	414b      	adcs	r3, r1
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c60:	4659      	mov	r1, fp
 8007c62:	00cb      	lsls	r3, r1, #3
 8007c64:	4651      	mov	r1, sl
 8007c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c6a:	4651      	mov	r1, sl
 8007c6c:	00ca      	lsls	r2, r1, #3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	4642      	mov	r2, r8
 8007c76:	189b      	adds	r3, r3, r2
 8007c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c7c:	464b      	mov	r3, r9
 8007c7e:	460a      	mov	r2, r1
 8007c80:	eb42 0303 	adc.w	r3, r2, r3
 8007c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	008b      	lsls	r3, r1, #2
 8007ca4:	4641      	mov	r1, r8
 8007ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007caa:	4641      	mov	r1, r8
 8007cac:	008a      	lsls	r2, r1, #2
 8007cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007cb2:	f7f8 ffe9 	bl	8000c88 <__aeabi_uldivmod>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4b39      	ldr	r3, [pc, #228]	; (8007da0 <UART_SetConfig+0x4e4>)
 8007cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	2164      	movs	r1, #100	; 0x64
 8007cc4:	fb01 f303 	mul.w	r3, r1, r3
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	3332      	adds	r3, #50	; 0x32
 8007cce:	4a34      	ldr	r2, [pc, #208]	; (8007da0 <UART_SetConfig+0x4e4>)
 8007cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cda:	441c      	add	r4, r3
 8007cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	673b      	str	r3, [r7, #112]	; 0x70
 8007ce4:	677a      	str	r2, [r7, #116]	; 0x74
 8007ce6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007cea:	4642      	mov	r2, r8
 8007cec:	464b      	mov	r3, r9
 8007cee:	1891      	adds	r1, r2, r2
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	415b      	adcs	r3, r3
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	1851      	adds	r1, r2, r1
 8007cfe:	6039      	str	r1, [r7, #0]
 8007d00:	4649      	mov	r1, r9
 8007d02:	414b      	adcs	r3, r1
 8007d04:	607b      	str	r3, [r7, #4]
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 0300 	mov.w	r3, #0
 8007d0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d12:	4659      	mov	r1, fp
 8007d14:	00cb      	lsls	r3, r1, #3
 8007d16:	4651      	mov	r1, sl
 8007d18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d1c:	4651      	mov	r1, sl
 8007d1e:	00ca      	lsls	r2, r1, #3
 8007d20:	4610      	mov	r0, r2
 8007d22:	4619      	mov	r1, r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	4642      	mov	r2, r8
 8007d28:	189b      	adds	r3, r3, r2
 8007d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	460a      	mov	r2, r1
 8007d30:	eb42 0303 	adc.w	r3, r2, r3
 8007d34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8007d40:	667a      	str	r2, [r7, #100]	; 0x64
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d4e:	4649      	mov	r1, r9
 8007d50:	008b      	lsls	r3, r1, #2
 8007d52:	4641      	mov	r1, r8
 8007d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d58:	4641      	mov	r1, r8
 8007d5a:	008a      	lsls	r2, r1, #2
 8007d5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d60:	f7f8 ff92 	bl	8000c88 <__aeabi_uldivmod>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <UART_SetConfig+0x4e4>)
 8007d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	2164      	movs	r1, #100	; 0x64
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	3332      	adds	r3, #50	; 0x32
 8007d7c:	4a08      	ldr	r2, [pc, #32]	; (8007da0 <UART_SetConfig+0x4e4>)
 8007d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	f003 020f 	and.w	r2, r3, #15
 8007d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4422      	add	r2, r4
 8007d90:	609a      	str	r2, [r3, #8]
}
 8007d92:	bf00      	nop
 8007d94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d9e:	bf00      	nop
 8007da0:	51eb851f 	.word	0x51eb851f

08007da4 <__NVIC_SetPriority>:
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	6039      	str	r1, [r7, #0]
 8007dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	db0a      	blt.n	8007dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	490c      	ldr	r1, [pc, #48]	; (8007df0 <__NVIC_SetPriority+0x4c>)
 8007dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dc2:	0112      	lsls	r2, r2, #4
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	440b      	add	r3, r1
 8007dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007dcc:	e00a      	b.n	8007de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	4908      	ldr	r1, [pc, #32]	; (8007df4 <__NVIC_SetPriority+0x50>)
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	3b04      	subs	r3, #4
 8007ddc:	0112      	lsls	r2, r2, #4
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	440b      	add	r3, r1
 8007de2:	761a      	strb	r2, [r3, #24]
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	e000e100 	.word	0xe000e100
 8007df4:	e000ed00 	.word	0xe000ed00

08007df8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <SysTick_Handler+0x1c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e00:	f001 fcae 	bl	8009760 <xTaskGetSchedulerState>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d001      	beq.n	8007e0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e0a:	f002 fa95 	bl	800a338 <xPortSysTickHandler>
  }
}
 8007e0e:	bf00      	nop
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	e000e010 	.word	0xe000e010

08007e18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	f06f 0004 	mvn.w	r0, #4
 8007e22:	f7ff ffbf 	bl	8007da4 <__NVIC_SetPriority>
#endif
}
 8007e26:	bf00      	nop
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e32:	f3ef 8305 	mrs	r3, IPSR
 8007e36:	603b      	str	r3, [r7, #0]
  return(result);
 8007e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007e3e:	f06f 0305 	mvn.w	r3, #5
 8007e42:	607b      	str	r3, [r7, #4]
 8007e44:	e00c      	b.n	8007e60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e46:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <osKernelInitialize+0x44>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d105      	bne.n	8007e5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e4e:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <osKernelInitialize+0x44>)
 8007e50:	2201      	movs	r2, #1
 8007e52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	607b      	str	r3, [r7, #4]
 8007e58:	e002      	b.n	8007e60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e60:	687b      	ldr	r3, [r7, #4]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	2000074c 	.word	0x2000074c

08007e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e7a:	f3ef 8305 	mrs	r3, IPSR
 8007e7e:	603b      	str	r3, [r7, #0]
  return(result);
 8007e80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e86:	f06f 0305 	mvn.w	r3, #5
 8007e8a:	607b      	str	r3, [r7, #4]
 8007e8c:	e010      	b.n	8007eb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e8e:	4b0b      	ldr	r3, [pc, #44]	; (8007ebc <osKernelStart+0x48>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d109      	bne.n	8007eaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e96:	f7ff ffbf 	bl	8007e18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e9a:	4b08      	ldr	r3, [pc, #32]	; (8007ebc <osKernelStart+0x48>)
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ea0:	f001 f816 	bl	8008ed0 <vTaskStartScheduler>
      stat = osOK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	e002      	b.n	8007eb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007eae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007eb0:	687b      	ldr	r3, [r7, #4]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	2000074c 	.word	0x2000074c

08007ec0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	; 0x38
 8007ec4:	af04      	add	r7, sp, #16
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ed0:	f3ef 8305 	mrs	r3, IPSR
 8007ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8007ed6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d17e      	bne.n	8007fda <osThreadNew+0x11a>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d07b      	beq.n	8007fda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ee2:	2380      	movs	r3, #128	; 0x80
 8007ee4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ee6:	2318      	movs	r3, #24
 8007ee8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d045      	beq.n	8007f86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <osThreadNew+0x48>
        name = attr->name;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d008      	beq.n	8007f2e <osThreadNew+0x6e>
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	2b38      	cmp	r3, #56	; 0x38
 8007f20:	d805      	bhi.n	8007f2e <osThreadNew+0x6e>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <osThreadNew+0x72>
        return (NULL);
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e054      	b.n	8007fdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	089b      	lsrs	r3, r3, #2
 8007f40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00e      	beq.n	8007f68 <osThreadNew+0xa8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b5b      	cmp	r3, #91	; 0x5b
 8007f50:	d90a      	bls.n	8007f68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d006      	beq.n	8007f68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <osThreadNew+0xa8>
        mem = 1;
 8007f62:	2301      	movs	r3, #1
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e010      	b.n	8007f8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10c      	bne.n	8007f8a <osThreadNew+0xca>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d108      	bne.n	8007f8a <osThreadNew+0xca>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <osThreadNew+0xca>
          mem = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	e001      	b.n	8007f8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d110      	bne.n	8007fb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f98:	9202      	str	r2, [sp, #8]
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	6a3a      	ldr	r2, [r7, #32]
 8007fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fdf0 	bl	8008b8c <xTaskCreateStatic>
 8007fac:	4603      	mov	r3, r0
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	e013      	b.n	8007fda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d110      	bne.n	8007fda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	f107 0310 	add.w	r3, r7, #16
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fe3b 	bl	8008c46 <xTaskCreate>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d001      	beq.n	8007fda <osThreadNew+0x11a>
            hTask = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007fda:	693b      	ldr	r3, [r7, #16]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3728      	adds	r7, #40	; 0x28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a07      	ldr	r2, [pc, #28]	; (8008010 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	4a06      	ldr	r2, [pc, #24]	; (8008014 <vApplicationGetIdleTaskMemory+0x30>)
 8007ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2280      	movs	r2, #128	; 0x80
 8008000:	601a      	str	r2, [r3, #0]
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	20000750 	.word	0x20000750
 8008014:	200007ac 	.word	0x200007ac

08008018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4a07      	ldr	r2, [pc, #28]	; (8008044 <vApplicationGetTimerTaskMemory+0x2c>)
 8008028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	4a06      	ldr	r2, [pc, #24]	; (8008048 <vApplicationGetTimerTaskMemory+0x30>)
 800802e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008036:	601a      	str	r2, [r3, #0]
}
 8008038:	bf00      	nop
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	200009ac 	.word	0x200009ac
 8008048:	20000a08 	.word	0x20000a08

0800804c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f103 0208 	add.w	r2, r3, #8
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f04f 32ff 	mov.w	r2, #4294967295
 8008064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f103 0208 	add.w	r2, r3, #8
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f103 0208 	add.w	r2, r3, #8
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	601a      	str	r2, [r3, #0]
}
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d103      	bne.n	800810e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	e00c      	b.n	8008128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3308      	adds	r3, #8
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	e002      	b.n	800811c <vListInsert+0x2e>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	429a      	cmp	r2, r3
 8008126:	d2f6      	bcs.n	8008116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6892      	ldr	r2, [r2, #8]
 8008176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6852      	ldr	r2, [r2, #4]
 8008180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	429a      	cmp	r2, r3
 800818a:	d103      	bne.n	8008194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	1e5a      	subs	r2, r3, #1
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081de:	f002 f819 	bl	800a214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081ee:	fb01 f303 	mul.w	r3, r1, r3
 80081f2:	441a      	add	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	3b01      	subs	r3, #1
 8008210:	68f9      	ldr	r1, [r7, #12]
 8008212:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008214:	fb01 f303 	mul.w	r3, r1, r3
 8008218:	441a      	add	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	22ff      	movs	r2, #255	; 0xff
 8008222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	22ff      	movs	r2, #255	; 0xff
 800822a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d114      	bne.n	800825e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d01a      	beq.n	8008272 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3310      	adds	r3, #16
 8008240:	4618      	mov	r0, r3
 8008242:	f001 f8cf 	bl	80093e4 <xTaskRemoveFromEventList>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d012      	beq.n	8008272 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800824c:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <xQueueGenericReset+0xcc>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	e009      	b.n	8008272 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3310      	adds	r3, #16
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fef2 	bl	800804c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3324      	adds	r3, #36	; 0x24
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff feed 	bl	800804c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008272:	f001 ffff 	bl	800a274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008276:	2301      	movs	r3, #1
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08e      	sub	sp, #56	; 0x38
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <xQueueGenericCreateStatic+0x52>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <xQueueGenericCreateStatic+0x56>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e000      	b.n	80082dc <xQueueGenericCreateStatic+0x58>
 80082da:	2300      	movs	r3, #0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	623b      	str	r3, [r7, #32]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <xQueueGenericCreateStatic+0x7e>
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <xQueueGenericCreateStatic+0x82>
 8008302:	2301      	movs	r3, #1
 8008304:	e000      	b.n	8008308 <xQueueGenericCreateStatic+0x84>
 8008306:	2300      	movs	r3, #0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	61fb      	str	r3, [r7, #28]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008322:	2350      	movs	r3, #80	; 0x50
 8008324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b50      	cmp	r3, #80	; 0x50
 800832a:	d00a      	beq.n	8008342 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	61bb      	str	r3, [r7, #24]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008342:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00d      	beq.n	800836a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008356:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	4613      	mov	r3, r2
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	68b9      	ldr	r1, [r7, #8]
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 f805 	bl	8008374 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800836c:	4618      	mov	r0, r3
 800836e:	3730      	adds	r7, #48	; 0x30
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d103      	bne.n	8008390 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	e002      	b.n	8008396 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083a2:	2101      	movs	r1, #1
 80083a4:	69b8      	ldr	r0, [r7, #24]
 80083a6:	f7ff ff05 	bl	80081b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	78fa      	ldrb	r2, [r7, #3]
 80083ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08e      	sub	sp, #56	; 0x38
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ca:	2300      	movs	r3, #0
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <xQueueGenericSend+0x32>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d103      	bne.n	80083fc <xQueueGenericSend+0x40>
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <xQueueGenericSend+0x44>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <xQueueGenericSend+0x46>
 8008400:	2300      	movs	r3, #0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <xQueueGenericSend+0x60>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d103      	bne.n	800842a <xQueueGenericSend+0x6e>
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <xQueueGenericSend+0x72>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <xQueueGenericSend+0x74>
 800842e:	2300      	movs	r3, #0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <xQueueGenericSend+0x8e>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	623b      	str	r3, [r7, #32]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800844a:	f001 f989 	bl	8009760 <xTaskGetSchedulerState>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <xQueueGenericSend+0x9e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <xQueueGenericSend+0xa2>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <xQueueGenericSend+0xa4>
 800845e:	2300      	movs	r3, #0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <xQueueGenericSend+0xbe>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	61fb      	str	r3, [r7, #28]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800847a:	f001 fecb 	bl	800a214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	429a      	cmp	r2, r3
 8008488:	d302      	bcc.n	8008490 <xQueueGenericSend+0xd4>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d129      	bne.n	80084e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008496:	f000 fa0b 	bl	80088b0 <prvCopyDataToQueue>
 800849a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d010      	beq.n	80084c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a6:	3324      	adds	r3, #36	; 0x24
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 ff9b 	bl	80093e4 <xTaskRemoveFromEventList>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d013      	beq.n	80084dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084b4:	4b3f      	ldr	r3, [pc, #252]	; (80085b4 <xQueueGenericSend+0x1f8>)
 80084b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	e00a      	b.n	80084dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d007      	beq.n	80084dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084cc:	4b39      	ldr	r3, [pc, #228]	; (80085b4 <xQueueGenericSend+0x1f8>)
 80084ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084dc:	f001 feca 	bl	800a274 <vPortExitCritical>
				return pdPASS;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e063      	b.n	80085ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084ea:	f001 fec3 	bl	800a274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e05c      	b.n	80085ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084f8:	f107 0314 	add.w	r3, r7, #20
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 ffd5 	bl	80094ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008502:	2301      	movs	r3, #1
 8008504:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008506:	f001 feb5 	bl	800a274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800850a:	f000 fd47 	bl	8008f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800850e:	f001 fe81 	bl	800a214 <vPortEnterCritical>
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008518:	b25b      	sxtb	r3, r3
 800851a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851e:	d103      	bne.n	8008528 <xQueueGenericSend+0x16c>
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800852e:	b25b      	sxtb	r3, r3
 8008530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008534:	d103      	bne.n	800853e <xQueueGenericSend+0x182>
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800853e:	f001 fe99 	bl	800a274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008542:	1d3a      	adds	r2, r7, #4
 8008544:	f107 0314 	add.w	r3, r7, #20
 8008548:	4611      	mov	r1, r2
 800854a:	4618      	mov	r0, r3
 800854c:	f000 ffc4 	bl	80094d8 <xTaskCheckForTimeOut>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d124      	bne.n	80085a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008558:	f000 faa2 	bl	8008aa0 <prvIsQueueFull>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d018      	beq.n	8008594 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	3310      	adds	r3, #16
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f000 feea 	bl	8009344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008572:	f000 fa2d 	bl	80089d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008576:	f000 fd1f 	bl	8008fb8 <xTaskResumeAll>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	f47f af7c 	bne.w	800847a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008582:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <xQueueGenericSend+0x1f8>)
 8008584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	e772      	b.n	800847a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008596:	f000 fa1b 	bl	80089d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800859a:	f000 fd0d 	bl	8008fb8 <xTaskResumeAll>
 800859e:	e76c      	b.n	800847a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085a2:	f000 fa15 	bl	80089d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085a6:	f000 fd07 	bl	8008fb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3738      	adds	r7, #56	; 0x38
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	e000ed04 	.word	0xe000ed04

080085b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b090      	sub	sp, #64	; 0x40
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <xQueueGenericSendFromISR+0x3c>
 80085ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <xQueueGenericSendFromISR+0x40>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e000      	b.n	80085fa <xQueueGenericSendFromISR+0x42>
 80085f8:	2300      	movs	r3, #0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10a      	bne.n	8008614 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d103      	bne.n	8008622 <xQueueGenericSendFromISR+0x6a>
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	2b01      	cmp	r3, #1
 8008620:	d101      	bne.n	8008626 <xQueueGenericSendFromISR+0x6e>
 8008622:	2301      	movs	r3, #1
 8008624:	e000      	b.n	8008628 <xQueueGenericSendFromISR+0x70>
 8008626:	2300      	movs	r3, #0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	623b      	str	r3, [r7, #32]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008642:	f001 fec9 	bl	800a3d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008646:	f3ef 8211 	mrs	r2, BASEPRI
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	61fa      	str	r2, [r7, #28]
 800865c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800865e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	429a      	cmp	r2, r3
 800866c:	d302      	bcc.n	8008674 <xQueueGenericSendFromISR+0xbc>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d12f      	bne.n	80086d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800867a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800867e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800868a:	f000 f911 	bl	80088b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800868e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008696:	d112      	bne.n	80086be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	d016      	beq.n	80086ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	3324      	adds	r3, #36	; 0x24
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fe9d 	bl	80093e4 <xTaskRemoveFromEventList>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00e      	beq.n	80086ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	e007      	b.n	80086ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086c2:	3301      	adds	r3, #1
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	b25a      	sxtb	r2, r3
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086ce:	2301      	movs	r3, #1
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80086d2:	e001      	b.n	80086d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3740      	adds	r7, #64	; 0x40
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08c      	sub	sp, #48	; 0x30
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <xQueueReceive+0x30>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	623b      	str	r3, [r7, #32]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d103      	bne.n	800872e <xQueueReceive+0x3e>
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <xQueueReceive+0x42>
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <xQueueReceive+0x44>
 8008732:	2300      	movs	r3, #0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <xQueueReceive+0x5e>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	61fb      	str	r3, [r7, #28]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800874e:	f001 f807 	bl	8009760 <xTaskGetSchedulerState>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <xQueueReceive+0x6e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <xQueueReceive+0x72>
 800875e:	2301      	movs	r3, #1
 8008760:	e000      	b.n	8008764 <xQueueReceive+0x74>
 8008762:	2300      	movs	r3, #0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <xQueueReceive+0x8e>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	61bb      	str	r3, [r7, #24]
}
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800877e:	f001 fd49 	bl	800a214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01f      	beq.n	80087ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008792:	f000 f8f7 	bl	8008984 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	1e5a      	subs	r2, r3, #1
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00f      	beq.n	80087c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	3310      	adds	r3, #16
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fe1a 	bl	80093e4 <xTaskRemoveFromEventList>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087b6:	4b3d      	ldr	r3, [pc, #244]	; (80088ac <xQueueReceive+0x1bc>)
 80087b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087c6:	f001 fd55 	bl	800a274 <vPortExitCritical>
				return pdPASS;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e069      	b.n	80088a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d103      	bne.n	80087dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087d4:	f001 fd4e 	bl	800a274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087d8:	2300      	movs	r3, #0
 80087da:	e062      	b.n	80088a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087e2:	f107 0310 	add.w	r3, r7, #16
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fe60 	bl	80094ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087f0:	f001 fd40 	bl	800a274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087f4:	f000 fbd2 	bl	8008f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087f8:	f001 fd0c 	bl	800a214 <vPortEnterCritical>
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008802:	b25b      	sxtb	r3, r3
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d103      	bne.n	8008812 <xQueueReceive+0x122>
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008818:	b25b      	sxtb	r3, r3
 800881a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881e:	d103      	bne.n	8008828 <xQueueReceive+0x138>
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008828:	f001 fd24 	bl	800a274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800882c:	1d3a      	adds	r2, r7, #4
 800882e:	f107 0310 	add.w	r3, r7, #16
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fe4f 	bl	80094d8 <xTaskCheckForTimeOut>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d123      	bne.n	8008888 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008842:	f000 f917 	bl	8008a74 <prvIsQueueEmpty>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d017      	beq.n	800887c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	3324      	adds	r3, #36	; 0x24
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fd75 	bl	8009344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800885a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800885c:	f000 f8b8 	bl	80089d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008860:	f000 fbaa 	bl	8008fb8 <xTaskResumeAll>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d189      	bne.n	800877e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800886a:	4b10      	ldr	r3, [pc, #64]	; (80088ac <xQueueReceive+0x1bc>)
 800886c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	e780      	b.n	800877e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800887c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800887e:	f000 f8a7 	bl	80089d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008882:	f000 fb99 	bl	8008fb8 <xTaskResumeAll>
 8008886:	e77a      	b.n	800877e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800888a:	f000 f8a1 	bl	80089d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800888e:	f000 fb93 	bl	8008fb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008894:	f000 f8ee 	bl	8008a74 <prvIsQueueEmpty>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	f43f af6f 	beq.w	800877e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3730      	adds	r7, #48	; 0x30
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	e000ed04 	.word	0xe000ed04

080088b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088bc:	2300      	movs	r3, #0
 80088be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10d      	bne.n	80088ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d14d      	bne.n	8008972 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 ff5e 	bl	800979c <xTaskPriorityDisinherit>
 80088e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	609a      	str	r2, [r3, #8]
 80088e8:	e043      	b.n	8008972 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d119      	bne.n	8008924 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6858      	ldr	r0, [r3, #4]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f8:	461a      	mov	r2, r3
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	f001 ffc0 	bl	800a880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008908:	441a      	add	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	d32b      	bcc.n	8008972 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	e026      	b.n	8008972 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	68d8      	ldr	r0, [r3, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	461a      	mov	r2, r3
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	f001 ffa6 	bl	800a880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893c:	425b      	negs	r3, r3
 800893e:	441a      	add	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d207      	bcs.n	8008960 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	425b      	negs	r3, r3
 800895a:	441a      	add	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d105      	bne.n	8008972 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	3b01      	subs	r3, #1
 8008970:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800897a:	697b      	ldr	r3, [r7, #20]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d018      	beq.n	80089c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	441a      	add	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68da      	ldr	r2, [r3, #12]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d303      	bcc.n	80089b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68d9      	ldr	r1, [r3, #12]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	461a      	mov	r2, r3
 80089c2:	6838      	ldr	r0, [r7, #0]
 80089c4:	f001 ff5c 	bl	800a880 <memcpy>
	}
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089d8:	f001 fc1c 	bl	800a214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089e4:	e011      	b.n	8008a0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d012      	beq.n	8008a14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3324      	adds	r3, #36	; 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fcf6 	bl	80093e4 <xTaskRemoveFromEventList>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089fe:	f000 fdcd 	bl	800959c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dce9      	bgt.n	80089e6 <prvUnlockQueue+0x16>
 8008a12:	e000      	b.n	8008a16 <prvUnlockQueue+0x46>
					break;
 8008a14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	22ff      	movs	r2, #255	; 0xff
 8008a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a1e:	f001 fc29 	bl	800a274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a22:	f001 fbf7 	bl	800a214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a2e:	e011      	b.n	8008a54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d012      	beq.n	8008a5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3310      	adds	r3, #16
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 fcd1 	bl	80093e4 <xTaskRemoveFromEventList>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a48:	f000 fda8 	bl	800959c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dce9      	bgt.n	8008a30 <prvUnlockQueue+0x60>
 8008a5c:	e000      	b.n	8008a60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	22ff      	movs	r2, #255	; 0xff
 8008a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a68:	f001 fc04 	bl	800a274 <vPortExitCritical>
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a7c:	f001 fbca 	bl	800a214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e001      	b.n	8008a92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a92:	f001 fbef 	bl	800a274 <vPortExitCritical>

	return xReturn;
 8008a96:	68fb      	ldr	r3, [r7, #12]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008aa8:	f001 fbb4 	bl	800a214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d102      	bne.n	8008abe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	e001      	b.n	8008ac2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ac2:	f001 fbd7 	bl	800a274 <vPortExitCritical>

	return xReturn;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	e014      	b.n	8008b0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ae0:	4a0f      	ldr	r2, [pc, #60]	; (8008b20 <vQueueAddToRegistry+0x50>)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10b      	bne.n	8008b04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008aec:	490c      	ldr	r1, [pc, #48]	; (8008b20 <vQueueAddToRegistry+0x50>)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008af6:	4a0a      	ldr	r2, [pc, #40]	; (8008b20 <vQueueAddToRegistry+0x50>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	4413      	add	r3, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b02:	e006      	b.n	8008b12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b07      	cmp	r3, #7
 8008b0e:	d9e7      	bls.n	8008ae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000e08 	.word	0x20000e08

08008b24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b34:	f001 fb6e 	bl	800a214 <vPortEnterCritical>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b44:	d103      	bne.n	8008b4e <vQueueWaitForMessageRestricted+0x2a>
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b54:	b25b      	sxtb	r3, r3
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5a:	d103      	bne.n	8008b64 <vQueueWaitForMessageRestricted+0x40>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b64:	f001 fb86 	bl	800a274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	3324      	adds	r3, #36	; 0x24
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fc07 	bl	800938c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b7e:	6978      	ldr	r0, [r7, #20]
 8008b80:	f7ff ff26 	bl	80089d0 <prvUnlockQueue>
	}
 8008b84:	bf00      	nop
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08e      	sub	sp, #56	; 0x38
 8008b90:	af04      	add	r7, sp, #16
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	623b      	str	r3, [r7, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	61fb      	str	r3, [r7, #28]
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bd2:	235c      	movs	r3, #92	; 0x5c
 8008bd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b5c      	cmp	r3, #92	; 0x5c
 8008bda:	d00a      	beq.n	8008bf2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	61bb      	str	r3, [r7, #24]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bf2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01e      	beq.n	8008c38 <xTaskCreateStatic+0xac>
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01b      	beq.n	8008c38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c12:	2300      	movs	r3, #0
 8008c14:	9303      	str	r3, [sp, #12]
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	9302      	str	r3, [sp, #8]
 8008c1a:	f107 0314 	add.w	r3, r7, #20
 8008c1e:	9301      	str	r3, [sp, #4]
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 f850 	bl	8008cd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c32:	f000 f8dd 	bl	8008df0 <prvAddNewTaskToReadyList>
 8008c36:	e001      	b.n	8008c3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c3c:	697b      	ldr	r3, [r7, #20]
	}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3728      	adds	r7, #40	; 0x28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b08c      	sub	sp, #48	; 0x30
 8008c4a:	af04      	add	r7, sp, #16
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	603b      	str	r3, [r7, #0]
 8008c52:	4613      	mov	r3, r2
 8008c54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c56:	88fb      	ldrh	r3, [r7, #6]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fbfc 	bl	800a458 <pvPortMalloc>
 8008c60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00e      	beq.n	8008c86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c68:	205c      	movs	r0, #92	; 0x5c
 8008c6a:	f001 fbf5 	bl	800a458 <pvPortMalloc>
 8008c6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8008c7c:	e005      	b.n	8008c8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f001 fcb6 	bl	800a5f0 <vPortFree>
 8008c84:	e001      	b.n	8008c8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d017      	beq.n	8008cc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c98:	88fa      	ldrh	r2, [r7, #6]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9303      	str	r3, [sp, #12]
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	9302      	str	r3, [sp, #8]
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68b9      	ldr	r1, [r7, #8]
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 f80e 	bl	8008cd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cb4:	69f8      	ldr	r0, [r7, #28]
 8008cb6:	f000 f89b 	bl	8008df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	61bb      	str	r3, [r7, #24]
 8008cbe:	e002      	b.n	8008cc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cc6:	69bb      	ldr	r3, [r7, #24]
	}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3720      	adds	r7, #32
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	21a5      	movs	r1, #165	; 0xa5
 8008cea:	f001 fdd7 	bl	800a89c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f023 0307 	bic.w	r3, r3, #7
 8008d06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	617b      	str	r3, [r7, #20]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01f      	beq.n	8008d6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e012      	b.n	8008d5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	4413      	add	r3, r2
 8008d3a:	7819      	ldrb	r1, [r3, #0]
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	3334      	adds	r3, #52	; 0x34
 8008d44:	460a      	mov	r2, r1
 8008d46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d006      	beq.n	8008d62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	3301      	adds	r3, #1
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	2b0f      	cmp	r3, #15
 8008d5e:	d9e9      	bls.n	8008d34 <prvInitialiseNewTask+0x64>
 8008d60:	e000      	b.n	8008d64 <prvInitialiseNewTask+0x94>
			{
				break;
 8008d62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d6c:	e003      	b.n	8008d76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	2b37      	cmp	r3, #55	; 0x37
 8008d7a:	d901      	bls.n	8008d80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d7c:	2337      	movs	r3, #55	; 0x37
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	2200      	movs	r2, #0
 8008d90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	3304      	adds	r3, #4
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff f978 	bl	800808c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	3318      	adds	r3, #24
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7ff f973 	bl	800808c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008daa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	68f9      	ldr	r1, [r7, #12]
 8008dce:	69b8      	ldr	r0, [r7, #24]
 8008dd0:	f001 f8f4 	bl	8009fbc <pxPortInitialiseStack>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008de6:	bf00      	nop
 8008de8:	3720      	adds	r7, #32
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008df8:	f001 fa0c 	bl	800a214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008dfc:	4b2d      	ldr	r3, [pc, #180]	; (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3301      	adds	r3, #1
 8008e02:	4a2c      	ldr	r2, [pc, #176]	; (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e06:	4b2c      	ldr	r3, [pc, #176]	; (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e0e:	4a2a      	ldr	r2, [pc, #168]	; (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e14:	4b27      	ldr	r3, [pc, #156]	; (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d110      	bne.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e1c:	f000 fbe2 	bl	80095e4 <prvInitialiseTaskLists>
 8008e20:	e00d      	b.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e22:	4b26      	ldr	r3, [pc, #152]	; (8008ebc <prvAddNewTaskToReadyList+0xcc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e2a:	4b23      	ldr	r3, [pc, #140]	; (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d802      	bhi.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e38:	4a1f      	ldr	r2, [pc, #124]	; (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e3e:	4b20      	ldr	r3, [pc, #128]	; (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e54:	4b1b      	ldr	r3, [pc, #108]	; (8008ec4 <prvAddNewTaskToReadyList+0xd4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d903      	bls.n	8008e64 <prvAddNewTaskToReadyList+0x74>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	4a18      	ldr	r2, [pc, #96]	; (8008ec4 <prvAddNewTaskToReadyList+0xd4>)
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4a15      	ldr	r2, [pc, #84]	; (8008ec8 <prvAddNewTaskToReadyList+0xd8>)
 8008e72:	441a      	add	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7ff f913 	bl	80080a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e80:	f001 f9f8 	bl	800a274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e84:	4b0d      	ldr	r3, [pc, #52]	; (8008ebc <prvAddNewTaskToReadyList+0xcc>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00e      	beq.n	8008eaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d207      	bcs.n	8008eaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <prvAddNewTaskToReadyList+0xdc>)
 8008e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	2000131c 	.word	0x2000131c
 8008eb8:	20000e48 	.word	0x20000e48
 8008ebc:	20001328 	.word	0x20001328
 8008ec0:	20001338 	.word	0x20001338
 8008ec4:	20001324 	.word	0x20001324
 8008ec8:	20000e4c 	.word	0x20000e4c
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ede:	463a      	mov	r2, r7
 8008ee0:	1d39      	adds	r1, r7, #4
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff f87c 	bl	8007fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	9202      	str	r2, [sp, #8]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	460a      	mov	r2, r1
 8008efe:	4921      	ldr	r1, [pc, #132]	; (8008f84 <vTaskStartScheduler+0xb4>)
 8008f00:	4821      	ldr	r0, [pc, #132]	; (8008f88 <vTaskStartScheduler+0xb8>)
 8008f02:	f7ff fe43 	bl	8008b8c <xTaskCreateStatic>
 8008f06:	4603      	mov	r3, r0
 8008f08:	4a20      	ldr	r2, [pc, #128]	; (8008f8c <vTaskStartScheduler+0xbc>)
 8008f0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f0c:	4b1f      	ldr	r3, [pc, #124]	; (8008f8c <vTaskStartScheduler+0xbc>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f14:	2301      	movs	r3, #1
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e001      	b.n	8008f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d102      	bne.n	8008f2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f24:	f000 fcfc 	bl	8009920 <xTimerCreateTimerTask>
 8008f28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d116      	bne.n	8008f5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	613b      	str	r3, [r7, #16]
}
 8008f42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f44:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <vTaskStartScheduler+0xc0>)
 8008f46:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f4c:	4b11      	ldr	r3, [pc, #68]	; (8008f94 <vTaskStartScheduler+0xc4>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f52:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <vTaskStartScheduler+0xc8>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f58:	f001 f8ba 	bl	800a0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f5c:	e00e      	b.n	8008f7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f64:	d10a      	bne.n	8008f7c <vTaskStartScheduler+0xac>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <vTaskStartScheduler+0xaa>
}
 8008f7c:	bf00      	nop
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	0800f398 	.word	0x0800f398
 8008f88:	080095b5 	.word	0x080095b5
 8008f8c:	20001340 	.word	0x20001340
 8008f90:	2000133c 	.word	0x2000133c
 8008f94:	20001328 	.word	0x20001328
 8008f98:	20001320 	.word	0x20001320

08008f9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008fa0:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <vTaskSuspendAll+0x18>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	4a03      	ldr	r2, [pc, #12]	; (8008fb4 <vTaskSuspendAll+0x18>)
 8008fa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008faa:	bf00      	nop
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	20001344 	.word	0x20001344

08008fb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fc6:	4b42      	ldr	r3, [pc, #264]	; (80090d0 <xTaskResumeAll+0x118>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	603b      	str	r3, [r7, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fe4:	f001 f916 	bl	800a214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fe8:	4b39      	ldr	r3, [pc, #228]	; (80090d0 <xTaskResumeAll+0x118>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	4a38      	ldr	r2, [pc, #224]	; (80090d0 <xTaskResumeAll+0x118>)
 8008ff0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ff2:	4b37      	ldr	r3, [pc, #220]	; (80090d0 <xTaskResumeAll+0x118>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d162      	bne.n	80090c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ffa:	4b36      	ldr	r3, [pc, #216]	; (80090d4 <xTaskResumeAll+0x11c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d05e      	beq.n	80090c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009002:	e02f      	b.n	8009064 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009004:	4b34      	ldr	r3, [pc, #208]	; (80090d8 <xTaskResumeAll+0x120>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3318      	adds	r3, #24
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff f8a5 	bl	8008160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	3304      	adds	r3, #4
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff f8a0 	bl	8008160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009024:	4b2d      	ldr	r3, [pc, #180]	; (80090dc <xTaskResumeAll+0x124>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d903      	bls.n	8009034 <xTaskResumeAll+0x7c>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009030:	4a2a      	ldr	r2, [pc, #168]	; (80090dc <xTaskResumeAll+0x124>)
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	4613      	mov	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4a27      	ldr	r2, [pc, #156]	; (80090e0 <xTaskResumeAll+0x128>)
 8009042:	441a      	add	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3304      	adds	r3, #4
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f7ff f82b 	bl	80080a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009054:	4b23      	ldr	r3, [pc, #140]	; (80090e4 <xTaskResumeAll+0x12c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905a:	429a      	cmp	r2, r3
 800905c:	d302      	bcc.n	8009064 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800905e:	4b22      	ldr	r3, [pc, #136]	; (80090e8 <xTaskResumeAll+0x130>)
 8009060:	2201      	movs	r2, #1
 8009062:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009064:	4b1c      	ldr	r3, [pc, #112]	; (80090d8 <xTaskResumeAll+0x120>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1cb      	bne.n	8009004 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009072:	f000 fb55 	bl	8009720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009076:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <xTaskResumeAll+0x134>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d010      	beq.n	80090a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009082:	f000 f847 	bl	8009114 <xTaskIncrementTick>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800908c:	4b16      	ldr	r3, [pc, #88]	; (80090e8 <xTaskResumeAll+0x130>)
 800908e:	2201      	movs	r2, #1
 8009090:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3b01      	subs	r3, #1
 8009096:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1f1      	bne.n	8009082 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800909e:	4b13      	ldr	r3, [pc, #76]	; (80090ec <xTaskResumeAll+0x134>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090a4:	4b10      	ldr	r3, [pc, #64]	; (80090e8 <xTaskResumeAll+0x130>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d009      	beq.n	80090c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090ac:	2301      	movs	r3, #1
 80090ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090b0:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <xTaskResumeAll+0x138>)
 80090b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090c0:	f001 f8d8 	bl	800a274 <vPortExitCritical>

	return xAlreadyYielded;
 80090c4:	68bb      	ldr	r3, [r7, #8]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20001344 	.word	0x20001344
 80090d4:	2000131c 	.word	0x2000131c
 80090d8:	200012dc 	.word	0x200012dc
 80090dc:	20001324 	.word	0x20001324
 80090e0:	20000e4c 	.word	0x20000e4c
 80090e4:	20000e48 	.word	0x20000e48
 80090e8:	20001330 	.word	0x20001330
 80090ec:	2000132c 	.word	0x2000132c
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090fa:	4b05      	ldr	r3, [pc, #20]	; (8009110 <xTaskGetTickCount+0x1c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009100:	687b      	ldr	r3, [r7, #4]
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20001320 	.word	0x20001320

08009114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800911a:	2300      	movs	r3, #0
 800911c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911e:	4b4f      	ldr	r3, [pc, #316]	; (800925c <xTaskIncrementTick+0x148>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f040 808f 	bne.w	8009246 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009128:	4b4d      	ldr	r3, [pc, #308]	; (8009260 <xTaskIncrementTick+0x14c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3301      	adds	r3, #1
 800912e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009130:	4a4b      	ldr	r2, [pc, #300]	; (8009260 <xTaskIncrementTick+0x14c>)
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d120      	bne.n	800917e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800913c:	4b49      	ldr	r3, [pc, #292]	; (8009264 <xTaskIncrementTick+0x150>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <xTaskIncrementTick+0x48>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	603b      	str	r3, [r7, #0]
}
 8009158:	bf00      	nop
 800915a:	e7fe      	b.n	800915a <xTaskIncrementTick+0x46>
 800915c:	4b41      	ldr	r3, [pc, #260]	; (8009264 <xTaskIncrementTick+0x150>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	4b41      	ldr	r3, [pc, #260]	; (8009268 <xTaskIncrementTick+0x154>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a3f      	ldr	r2, [pc, #252]	; (8009264 <xTaskIncrementTick+0x150>)
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	4a3f      	ldr	r2, [pc, #252]	; (8009268 <xTaskIncrementTick+0x154>)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	4b3e      	ldr	r3, [pc, #248]	; (800926c <xTaskIncrementTick+0x158>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	4a3d      	ldr	r2, [pc, #244]	; (800926c <xTaskIncrementTick+0x158>)
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	f000 fad1 	bl	8009720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800917e:	4b3c      	ldr	r3, [pc, #240]	; (8009270 <xTaskIncrementTick+0x15c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	429a      	cmp	r2, r3
 8009186:	d349      	bcc.n	800921c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009188:	4b36      	ldr	r3, [pc, #216]	; (8009264 <xTaskIncrementTick+0x150>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d104      	bne.n	800919c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009192:	4b37      	ldr	r3, [pc, #220]	; (8009270 <xTaskIncrementTick+0x15c>)
 8009194:	f04f 32ff 	mov.w	r2, #4294967295
 8009198:	601a      	str	r2, [r3, #0]
					break;
 800919a:	e03f      	b.n	800921c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919c:	4b31      	ldr	r3, [pc, #196]	; (8009264 <xTaskIncrementTick+0x150>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d203      	bcs.n	80091bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091b4:	4a2e      	ldr	r2, [pc, #184]	; (8009270 <xTaskIncrementTick+0x15c>)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091ba:	e02f      	b.n	800921c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	3304      	adds	r3, #4
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe ffcd 	bl	8008160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d004      	beq.n	80091d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	3318      	adds	r3, #24
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe ffc4 	bl	8008160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4b25      	ldr	r3, [pc, #148]	; (8009274 <xTaskIncrementTick+0x160>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d903      	bls.n	80091ec <xTaskIncrementTick+0xd8>
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	4a22      	ldr	r2, [pc, #136]	; (8009274 <xTaskIncrementTick+0x160>)
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4a1f      	ldr	r2, [pc, #124]	; (8009278 <xTaskIncrementTick+0x164>)
 80091fa:	441a      	add	r2, r3
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f7fe ff4f 	bl	80080a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920c:	4b1b      	ldr	r3, [pc, #108]	; (800927c <xTaskIncrementTick+0x168>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	429a      	cmp	r2, r3
 8009214:	d3b8      	bcc.n	8009188 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009216:	2301      	movs	r3, #1
 8009218:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800921a:	e7b5      	b.n	8009188 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800921c:	4b17      	ldr	r3, [pc, #92]	; (800927c <xTaskIncrementTick+0x168>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009222:	4915      	ldr	r1, [pc, #84]	; (8009278 <xTaskIncrementTick+0x164>)
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d901      	bls.n	8009238 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009234:	2301      	movs	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009238:	4b11      	ldr	r3, [pc, #68]	; (8009280 <xTaskIncrementTick+0x16c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009240:	2301      	movs	r3, #1
 8009242:	617b      	str	r3, [r7, #20]
 8009244:	e004      	b.n	8009250 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <xTaskIncrementTick+0x170>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3301      	adds	r3, #1
 800924c:	4a0d      	ldr	r2, [pc, #52]	; (8009284 <xTaskIncrementTick+0x170>)
 800924e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009250:	697b      	ldr	r3, [r7, #20]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20001344 	.word	0x20001344
 8009260:	20001320 	.word	0x20001320
 8009264:	200012d4 	.word	0x200012d4
 8009268:	200012d8 	.word	0x200012d8
 800926c:	20001334 	.word	0x20001334
 8009270:	2000133c 	.word	0x2000133c
 8009274:	20001324 	.word	0x20001324
 8009278:	20000e4c 	.word	0x20000e4c
 800927c:	20000e48 	.word	0x20000e48
 8009280:	20001330 	.word	0x20001330
 8009284:	2000132c 	.word	0x2000132c

08009288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800928e:	4b28      	ldr	r3, [pc, #160]	; (8009330 <vTaskSwitchContext+0xa8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009296:	4b27      	ldr	r3, [pc, #156]	; (8009334 <vTaskSwitchContext+0xac>)
 8009298:	2201      	movs	r2, #1
 800929a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800929c:	e041      	b.n	8009322 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800929e:	4b25      	ldr	r3, [pc, #148]	; (8009334 <vTaskSwitchContext+0xac>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a4:	4b24      	ldr	r3, [pc, #144]	; (8009338 <vTaskSwitchContext+0xb0>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	e010      	b.n	80092ce <vTaskSwitchContext+0x46>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	607b      	str	r3, [r7, #4]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <vTaskSwitchContext+0x3e>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	491b      	ldr	r1, [pc, #108]	; (800933c <vTaskSwitchContext+0xb4>)
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0e4      	beq.n	80092ac <vTaskSwitchContext+0x24>
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4a13      	ldr	r2, [pc, #76]	; (800933c <vTaskSwitchContext+0xb4>)
 80092ee:	4413      	add	r3, r2
 80092f0:	60bb      	str	r3, [r7, #8]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	605a      	str	r2, [r3, #4]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	3308      	adds	r3, #8
 8009304:	429a      	cmp	r2, r3
 8009306:	d104      	bne.n	8009312 <vTaskSwitchContext+0x8a>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	605a      	str	r2, [r3, #4]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	4a09      	ldr	r2, [pc, #36]	; (8009340 <vTaskSwitchContext+0xb8>)
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	4a06      	ldr	r2, [pc, #24]	; (8009338 <vTaskSwitchContext+0xb0>)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6013      	str	r3, [r2, #0]
}
 8009322:	bf00      	nop
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	20001344 	.word	0x20001344
 8009334:	20001330 	.word	0x20001330
 8009338:	20001324 	.word	0x20001324
 800933c:	20000e4c 	.word	0x20000e4c
 8009340:	20000e48 	.word	0x20000e48

08009344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	60fb      	str	r3, [r7, #12]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <vTaskPlaceOnEventList+0x44>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3318      	adds	r3, #24
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7fe febb 	bl	80080ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009378:	2101      	movs	r1, #1
 800937a:	6838      	ldr	r0, [r7, #0]
 800937c:	f000 fa7c 	bl	8009878 <prvAddCurrentTaskToDelayedList>
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	20000e48 	.word	0x20000e48

0800938c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	617b      	str	r3, [r7, #20]
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093b4:	4b0a      	ldr	r3, [pc, #40]	; (80093e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3318      	adds	r3, #24
 80093ba:	4619      	mov	r1, r3
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f7fe fe72 	bl	80080a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80093c8:	f04f 33ff 	mov.w	r3, #4294967295
 80093cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	68b8      	ldr	r0, [r7, #8]
 80093d2:	f000 fa51 	bl	8009878 <prvAddCurrentTaskToDelayedList>
	}
 80093d6:	bf00      	nop
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000e48 	.word	0x20000e48

080093e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	60fb      	str	r3, [r7, #12]
}
 800940c:	bf00      	nop
 800940e:	e7fe      	b.n	800940e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	3318      	adds	r3, #24
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fea3 	bl	8008160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800941a:	4b1e      	ldr	r3, [pc, #120]	; (8009494 <xTaskRemoveFromEventList+0xb0>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d11d      	bne.n	800945e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	3304      	adds	r3, #4
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fe9a 	bl	8008160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009430:	4b19      	ldr	r3, [pc, #100]	; (8009498 <xTaskRemoveFromEventList+0xb4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d903      	bls.n	8009440 <xTaskRemoveFromEventList+0x5c>
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	4a16      	ldr	r2, [pc, #88]	; (8009498 <xTaskRemoveFromEventList+0xb4>)
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4a13      	ldr	r2, [pc, #76]	; (800949c <xTaskRemoveFromEventList+0xb8>)
 800944e:	441a      	add	r2, r3
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	3304      	adds	r3, #4
 8009454:	4619      	mov	r1, r3
 8009456:	4610      	mov	r0, r2
 8009458:	f7fe fe25 	bl	80080a6 <vListInsertEnd>
 800945c:	e005      	b.n	800946a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3318      	adds	r3, #24
 8009462:	4619      	mov	r1, r3
 8009464:	480e      	ldr	r0, [pc, #56]	; (80094a0 <xTaskRemoveFromEventList+0xbc>)
 8009466:	f7fe fe1e 	bl	80080a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946e:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <xTaskRemoveFromEventList+0xc0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	429a      	cmp	r2, r3
 8009476:	d905      	bls.n	8009484 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009478:	2301      	movs	r3, #1
 800947a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800947c:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <xTaskRemoveFromEventList+0xc4>)
 800947e:	2201      	movs	r2, #1
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e001      	b.n	8009488 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009488:	697b      	ldr	r3, [r7, #20]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20001344 	.word	0x20001344
 8009498:	20001324 	.word	0x20001324
 800949c:	20000e4c 	.word	0x20000e4c
 80094a0:	200012dc 	.word	0x200012dc
 80094a4:	20000e48 	.word	0x20000e48
 80094a8:	20001330 	.word	0x20001330

080094ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094b4:	4b06      	ldr	r3, [pc, #24]	; (80094d0 <vTaskInternalSetTimeOutState+0x24>)
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094bc:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <vTaskInternalSetTimeOutState+0x28>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	605a      	str	r2, [r3, #4]
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	20001334 	.word	0x20001334
 80094d4:	20001320 	.word	0x20001320

080094d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	613b      	str	r3, [r7, #16]
}
 80094fa:	bf00      	nop
 80094fc:	e7fe      	b.n	80094fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	60fb      	str	r3, [r7, #12]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800951a:	f000 fe7b 	bl	800a214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800951e:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <xTaskCheckForTimeOut+0xbc>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d102      	bne.n	800953e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009538:	2300      	movs	r3, #0
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	e023      	b.n	8009586 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	4b15      	ldr	r3, [pc, #84]	; (8009598 <xTaskCheckForTimeOut+0xc0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d007      	beq.n	800955a <xTaskCheckForTimeOut+0x82>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	429a      	cmp	r2, r3
 8009552:	d302      	bcc.n	800955a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	e015      	b.n	8009586 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	429a      	cmp	r2, r3
 8009562:	d20b      	bcs.n	800957c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	1ad2      	subs	r2, r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7ff ff9b 	bl	80094ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009576:	2300      	movs	r3, #0
 8009578:	61fb      	str	r3, [r7, #28]
 800957a:	e004      	b.n	8009586 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009582:	2301      	movs	r3, #1
 8009584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009586:	f000 fe75 	bl	800a274 <vPortExitCritical>

	return xReturn;
 800958a:	69fb      	ldr	r3, [r7, #28]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3720      	adds	r7, #32
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20001320 	.word	0x20001320
 8009598:	20001334 	.word	0x20001334

0800959c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095a0:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <vTaskMissedYield+0x14>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	20001330 	.word	0x20001330

080095b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095bc:	f000 f852 	bl	8009664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095c0:	4b06      	ldr	r3, [pc, #24]	; (80095dc <prvIdleTask+0x28>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d9f9      	bls.n	80095bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <prvIdleTask+0x2c>)
 80095ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095d8:	e7f0      	b.n	80095bc <prvIdleTask+0x8>
 80095da:	bf00      	nop
 80095dc:	20000e4c 	.word	0x20000e4c
 80095e0:	e000ed04 	.word	0xe000ed04

080095e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095ea:	2300      	movs	r3, #0
 80095ec:	607b      	str	r3, [r7, #4]
 80095ee:	e00c      	b.n	800960a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4a12      	ldr	r2, [pc, #72]	; (8009644 <prvInitialiseTaskLists+0x60>)
 80095fc:	4413      	add	r3, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fd24 	bl	800804c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3301      	adds	r3, #1
 8009608:	607b      	str	r3, [r7, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b37      	cmp	r3, #55	; 0x37
 800960e:	d9ef      	bls.n	80095f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009610:	480d      	ldr	r0, [pc, #52]	; (8009648 <prvInitialiseTaskLists+0x64>)
 8009612:	f7fe fd1b 	bl	800804c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009616:	480d      	ldr	r0, [pc, #52]	; (800964c <prvInitialiseTaskLists+0x68>)
 8009618:	f7fe fd18 	bl	800804c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800961c:	480c      	ldr	r0, [pc, #48]	; (8009650 <prvInitialiseTaskLists+0x6c>)
 800961e:	f7fe fd15 	bl	800804c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009622:	480c      	ldr	r0, [pc, #48]	; (8009654 <prvInitialiseTaskLists+0x70>)
 8009624:	f7fe fd12 	bl	800804c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009628:	480b      	ldr	r0, [pc, #44]	; (8009658 <prvInitialiseTaskLists+0x74>)
 800962a:	f7fe fd0f 	bl	800804c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <prvInitialiseTaskLists+0x78>)
 8009630:	4a05      	ldr	r2, [pc, #20]	; (8009648 <prvInitialiseTaskLists+0x64>)
 8009632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009634:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <prvInitialiseTaskLists+0x7c>)
 8009636:	4a05      	ldr	r2, [pc, #20]	; (800964c <prvInitialiseTaskLists+0x68>)
 8009638:	601a      	str	r2, [r3, #0]
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000e4c 	.word	0x20000e4c
 8009648:	200012ac 	.word	0x200012ac
 800964c:	200012c0 	.word	0x200012c0
 8009650:	200012dc 	.word	0x200012dc
 8009654:	200012f0 	.word	0x200012f0
 8009658:	20001308 	.word	0x20001308
 800965c:	200012d4 	.word	0x200012d4
 8009660:	200012d8 	.word	0x200012d8

08009664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800966a:	e019      	b.n	80096a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800966c:	f000 fdd2 	bl	800a214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009670:	4b10      	ldr	r3, [pc, #64]	; (80096b4 <prvCheckTasksWaitingTermination+0x50>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3304      	adds	r3, #4
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fd6f 	bl	8008160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009682:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <prvCheckTasksWaitingTermination+0x54>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3b01      	subs	r3, #1
 8009688:	4a0b      	ldr	r2, [pc, #44]	; (80096b8 <prvCheckTasksWaitingTermination+0x54>)
 800968a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800968c:	4b0b      	ldr	r3, [pc, #44]	; (80096bc <prvCheckTasksWaitingTermination+0x58>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3b01      	subs	r3, #1
 8009692:	4a0a      	ldr	r2, [pc, #40]	; (80096bc <prvCheckTasksWaitingTermination+0x58>)
 8009694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009696:	f000 fded 	bl	800a274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f810 	bl	80096c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <prvCheckTasksWaitingTermination+0x58>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e1      	bne.n	800966c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	200012f0 	.word	0x200012f0
 80096b8:	2000131c 	.word	0x2000131c
 80096bc:	20001304 	.word	0x20001304

080096c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d108      	bne.n	80096e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 ff8a 	bl	800a5f0 <vPortFree>
				vPortFree( pxTCB );
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 ff87 	bl	800a5f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096e2:	e018      	b.n	8009716 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d103      	bne.n	80096f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 ff7e 	bl	800a5f0 <vPortFree>
	}
 80096f4:	e00f      	b.n	8009716 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d00a      	beq.n	8009716 <prvDeleteTCB+0x56>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	60fb      	str	r3, [r7, #12]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <prvDeleteTCB+0x54>
	}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009726:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <prvResetNextTaskUnblockTime+0x38>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d104      	bne.n	800973a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009730:	4b0a      	ldr	r3, [pc, #40]	; (800975c <prvResetNextTaskUnblockTime+0x3c>)
 8009732:	f04f 32ff 	mov.w	r2, #4294967295
 8009736:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009738:	e008      	b.n	800974c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800973a:	4b07      	ldr	r3, [pc, #28]	; (8009758 <prvResetNextTaskUnblockTime+0x38>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	4a04      	ldr	r2, [pc, #16]	; (800975c <prvResetNextTaskUnblockTime+0x3c>)
 800974a:	6013      	str	r3, [r2, #0]
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	200012d4 	.word	0x200012d4
 800975c:	2000133c 	.word	0x2000133c

08009760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009766:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <xTaskGetSchedulerState+0x34>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d102      	bne.n	8009774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800976e:	2301      	movs	r3, #1
 8009770:	607b      	str	r3, [r7, #4]
 8009772:	e008      	b.n	8009786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009774:	4b08      	ldr	r3, [pc, #32]	; (8009798 <xTaskGetSchedulerState+0x38>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800977c:	2302      	movs	r3, #2
 800977e:	607b      	str	r3, [r7, #4]
 8009780:	e001      	b.n	8009786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009782:	2300      	movs	r3, #0
 8009784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009786:	687b      	ldr	r3, [r7, #4]
	}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	20001328 	.word	0x20001328
 8009798:	20001344 	.word	0x20001344

0800979c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d056      	beq.n	8009860 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097b2:	4b2e      	ldr	r3, [pc, #184]	; (800986c <xTaskPriorityDisinherit+0xd0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d00a      	beq.n	80097d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	60fb      	str	r3, [r7, #12]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10a      	bne.n	80097f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	60bb      	str	r3, [r7, #8]
}
 80097ec:	bf00      	nop
 80097ee:	e7fe      	b.n	80097ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f4:	1e5a      	subs	r2, r3, #1
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009802:	429a      	cmp	r2, r3
 8009804:	d02c      	beq.n	8009860 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980a:	2b00      	cmp	r3, #0
 800980c:	d128      	bne.n	8009860 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	3304      	adds	r3, #4
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fca4 	bl	8008160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009830:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <xTaskPriorityDisinherit+0xd4>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d903      	bls.n	8009840 <xTaskPriorityDisinherit+0xa4>
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983c:	4a0c      	ldr	r2, [pc, #48]	; (8009870 <xTaskPriorityDisinherit+0xd4>)
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009844:	4613      	mov	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4a09      	ldr	r2, [pc, #36]	; (8009874 <xTaskPriorityDisinherit+0xd8>)
 800984e:	441a      	add	r2, r3
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	3304      	adds	r3, #4
 8009854:	4619      	mov	r1, r3
 8009856:	4610      	mov	r0, r2
 8009858:	f7fe fc25 	bl	80080a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009860:	697b      	ldr	r3, [r7, #20]
	}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20000e48 	.word	0x20000e48
 8009870:	20001324 	.word	0x20001324
 8009874:	20000e4c 	.word	0x20000e4c

08009878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009882:	4b21      	ldr	r3, [pc, #132]	; (8009908 <prvAddCurrentTaskToDelayedList+0x90>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009888:	4b20      	ldr	r3, [pc, #128]	; (800990c <prvAddCurrentTaskToDelayedList+0x94>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3304      	adds	r3, #4
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fc66 	bl	8008160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d10a      	bne.n	80098b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098a2:	4b1a      	ldr	r3, [pc, #104]	; (800990c <prvAddCurrentTaskToDelayedList+0x94>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3304      	adds	r3, #4
 80098a8:	4619      	mov	r1, r3
 80098aa:	4819      	ldr	r0, [pc, #100]	; (8009910 <prvAddCurrentTaskToDelayedList+0x98>)
 80098ac:	f7fe fbfb 	bl	80080a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098b0:	e026      	b.n	8009900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4413      	add	r3, r2
 80098b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098ba:	4b14      	ldr	r3, [pc, #80]	; (800990c <prvAddCurrentTaskToDelayedList+0x94>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d209      	bcs.n	80098de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ca:	4b12      	ldr	r3, [pc, #72]	; (8009914 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <prvAddCurrentTaskToDelayedList+0x94>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fe fc09 	bl	80080ee <vListInsert>
}
 80098dc:	e010      	b.n	8009900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	4b0a      	ldr	r3, [pc, #40]	; (800990c <prvAddCurrentTaskToDelayedList+0x94>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4619      	mov	r1, r3
 80098ea:	4610      	mov	r0, r2
 80098ec:	f7fe fbff 	bl	80080ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098f0:	4b0a      	ldr	r3, [pc, #40]	; (800991c <prvAddCurrentTaskToDelayedList+0xa4>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d202      	bcs.n	8009900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098fa:	4a08      	ldr	r2, [pc, #32]	; (800991c <prvAddCurrentTaskToDelayedList+0xa4>)
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	6013      	str	r3, [r2, #0]
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20001320 	.word	0x20001320
 800990c:	20000e48 	.word	0x20000e48
 8009910:	20001308 	.word	0x20001308
 8009914:	200012d8 	.word	0x200012d8
 8009918:	200012d4 	.word	0x200012d4
 800991c:	2000133c 	.word	0x2000133c

08009920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800992a:	f000 fb07 	bl	8009f3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800992e:	4b1c      	ldr	r3, [pc, #112]	; (80099a0 <xTimerCreateTimerTask+0x80>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d021      	beq.n	800997a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009936:	2300      	movs	r3, #0
 8009938:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800993a:	2300      	movs	r3, #0
 800993c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800993e:	1d3a      	adds	r2, r7, #4
 8009940:	f107 0108 	add.w	r1, r7, #8
 8009944:	f107 030c 	add.w	r3, r7, #12
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe fb65 	bl	8008018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800994e:	6879      	ldr	r1, [r7, #4]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	9202      	str	r2, [sp, #8]
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	2302      	movs	r3, #2
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2300      	movs	r3, #0
 800995e:	460a      	mov	r2, r1
 8009960:	4910      	ldr	r1, [pc, #64]	; (80099a4 <xTimerCreateTimerTask+0x84>)
 8009962:	4811      	ldr	r0, [pc, #68]	; (80099a8 <xTimerCreateTimerTask+0x88>)
 8009964:	f7ff f912 	bl	8008b8c <xTaskCreateStatic>
 8009968:	4603      	mov	r3, r0
 800996a:	4a10      	ldr	r2, [pc, #64]	; (80099ac <xTimerCreateTimerTask+0x8c>)
 800996c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800996e:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <xTimerCreateTimerTask+0x8c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009976:	2301      	movs	r3, #1
 8009978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	613b      	str	r3, [r7, #16]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009996:	697b      	ldr	r3, [r7, #20]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20001378 	.word	0x20001378
 80099a4:	0800f3a0 	.word	0x0800f3a0
 80099a8:	08009ae5 	.word	0x08009ae5
 80099ac:	2000137c 	.word	0x2000137c

080099b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08a      	sub	sp, #40	; 0x28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099be:	2300      	movs	r3, #0
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xTimerGenericCommand+0x2e>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	623b      	str	r3, [r7, #32]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099de:	4b1a      	ldr	r3, [pc, #104]	; (8009a48 <xTimerGenericCommand+0x98>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d02a      	beq.n	8009a3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2b05      	cmp	r3, #5
 80099f6:	dc18      	bgt.n	8009a2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099f8:	f7ff feb2 	bl	8009760 <xTaskGetSchedulerState>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d109      	bne.n	8009a16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a02:	4b11      	ldr	r3, [pc, #68]	; (8009a48 <xTimerGenericCommand+0x98>)
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	f107 0110 	add.w	r1, r7, #16
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a0e:	f7fe fcd5 	bl	80083bc <xQueueGenericSend>
 8009a12:	6278      	str	r0, [r7, #36]	; 0x24
 8009a14:	e012      	b.n	8009a3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a16:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <xTimerGenericCommand+0x98>)
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	f107 0110 	add.w	r1, r7, #16
 8009a1e:	2300      	movs	r3, #0
 8009a20:	2200      	movs	r2, #0
 8009a22:	f7fe fccb 	bl	80083bc <xQueueGenericSend>
 8009a26:	6278      	str	r0, [r7, #36]	; 0x24
 8009a28:	e008      	b.n	8009a3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a2a:	4b07      	ldr	r3, [pc, #28]	; (8009a48 <xTimerGenericCommand+0x98>)
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	f107 0110 	add.w	r1, r7, #16
 8009a32:	2300      	movs	r3, #0
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	f7fe fdbf 	bl	80085b8 <xQueueGenericSendFromISR>
 8009a3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3728      	adds	r7, #40	; 0x28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20001378 	.word	0x20001378

08009a4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a56:	4b22      	ldr	r3, [pc, #136]	; (8009ae0 <prvProcessExpiredTimer+0x94>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fe fb7b 	bl	8008160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d022      	beq.n	8009abe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	18d1      	adds	r1, r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	6978      	ldr	r0, [r7, #20]
 8009a86:	f000 f8d1 	bl	8009c2c <prvInsertTimerInActiveList>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01f      	beq.n	8009ad0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a90:	2300      	movs	r3, #0
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	2300      	movs	r3, #0
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6978      	ldr	r0, [r7, #20]
 8009a9c:	f7ff ff88 	bl	80099b0 <xTimerGenericCommand>
 8009aa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d113      	bne.n	8009ad0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	60fb      	str	r3, [r7, #12]
}
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	6978      	ldr	r0, [r7, #20]
 8009ad6:	4798      	blx	r3
}
 8009ad8:	bf00      	nop
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20001370 	.word	0x20001370

08009ae4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009aec:	f107 0308 	add.w	r3, r7, #8
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f857 	bl	8009ba4 <prvGetNextExpireTime>
 8009af6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 f803 	bl	8009b08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b02:	f000 f8d5 	bl	8009cb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b06:	e7f1      	b.n	8009aec <prvTimerTask+0x8>

08009b08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b12:	f7ff fa43 	bl	8008f9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b16:	f107 0308 	add.w	r3, r7, #8
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 f866 	bl	8009bec <prvSampleTimeNow>
 8009b20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d130      	bne.n	8009b8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10a      	bne.n	8009b44 <prvProcessTimerOrBlockTask+0x3c>
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d806      	bhi.n	8009b44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b36:	f7ff fa3f 	bl	8008fb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b3a:	68f9      	ldr	r1, [r7, #12]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff ff85 	bl	8009a4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b42:	e024      	b.n	8009b8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d008      	beq.n	8009b5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b4a:	4b13      	ldr	r3, [pc, #76]	; (8009b98 <prvProcessTimerOrBlockTask+0x90>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <prvProcessTimerOrBlockTask+0x50>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e000      	b.n	8009b5a <prvProcessTimerOrBlockTask+0x52>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b5c:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <prvProcessTimerOrBlockTask+0x94>)
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f7fe ffdb 	bl	8008b24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b6e:	f7ff fa23 	bl	8008fb8 <xTaskResumeAll>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b78:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <prvProcessTimerOrBlockTask+0x98>)
 8009b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	f3bf 8f6f 	isb	sy
}
 8009b88:	e001      	b.n	8009b8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b8a:	f7ff fa15 	bl	8008fb8 <xTaskResumeAll>
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20001374 	.word	0x20001374
 8009b9c:	20001378 	.word	0x20001378
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bac:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <prvGetNextExpireTime+0x44>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <prvGetNextExpireTime+0x16>
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	e000      	b.n	8009bbc <prvGetNextExpireTime+0x18>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d105      	bne.n	8009bd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bc8:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <prvGetNextExpireTime+0x44>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	e001      	b.n	8009bd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3714      	adds	r7, #20
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	20001370 	.word	0x20001370

08009bec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009bf4:	f7ff fa7e 	bl	80090f4 <xTaskGetTickCount>
 8009bf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009bfa:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <prvSampleTimeNow+0x3c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d205      	bcs.n	8009c10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c04:	f000 f936 	bl	8009e74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	e002      	b.n	8009c16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c16:	4a04      	ldr	r2, [pc, #16]	; (8009c28 <prvSampleTimeNow+0x3c>)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20001380 	.word	0x20001380

08009c2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d812      	bhi.n	8009c78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	1ad2      	subs	r2, r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d302      	bcc.n	8009c66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c60:	2301      	movs	r3, #1
 8009c62:	617b      	str	r3, [r7, #20]
 8009c64:	e01b      	b.n	8009c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c66:	4b10      	ldr	r3, [pc, #64]	; (8009ca8 <prvInsertTimerInActiveList+0x7c>)
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4610      	mov	r0, r2
 8009c72:	f7fe fa3c 	bl	80080ee <vListInsert>
 8009c76:	e012      	b.n	8009c9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d206      	bcs.n	8009c8e <prvInsertTimerInActiveList+0x62>
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d302      	bcc.n	8009c8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e007      	b.n	8009c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c8e:	4b07      	ldr	r3, [pc, #28]	; (8009cac <prvInsertTimerInActiveList+0x80>)
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3304      	adds	r3, #4
 8009c96:	4619      	mov	r1, r3
 8009c98:	4610      	mov	r0, r2
 8009c9a:	f7fe fa28 	bl	80080ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c9e:	697b      	ldr	r3, [r7, #20]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20001374 	.word	0x20001374
 8009cac:	20001370 	.word	0x20001370

08009cb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08e      	sub	sp, #56	; 0x38
 8009cb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cb6:	e0ca      	b.n	8009e4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	da18      	bge.n	8009cf0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cbe:	1d3b      	adds	r3, r7, #4
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10a      	bne.n	8009ce0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	61fb      	str	r3, [r7, #28]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ce6:	6850      	ldr	r0, [r2, #4]
 8009ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cea:	6892      	ldr	r2, [r2, #8]
 8009cec:	4611      	mov	r1, r2
 8009cee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f2c0 80aa 	blt.w	8009e4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	3304      	adds	r3, #4
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fa29 	bl	8008160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d0e:	463b      	mov	r3, r7
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff ff6b 	bl	8009bec <prvSampleTimeNow>
 8009d16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b09      	cmp	r3, #9
 8009d1c:	f200 8097 	bhi.w	8009e4e <prvProcessReceivedCommands+0x19e>
 8009d20:	a201      	add	r2, pc, #4	; (adr r2, 8009d28 <prvProcessReceivedCommands+0x78>)
 8009d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d26:	bf00      	nop
 8009d28:	08009d51 	.word	0x08009d51
 8009d2c:	08009d51 	.word	0x08009d51
 8009d30:	08009d51 	.word	0x08009d51
 8009d34:	08009dc5 	.word	0x08009dc5
 8009d38:	08009dd9 	.word	0x08009dd9
 8009d3c:	08009e23 	.word	0x08009e23
 8009d40:	08009d51 	.word	0x08009d51
 8009d44:	08009d51 	.word	0x08009d51
 8009d48:	08009dc5 	.word	0x08009dc5
 8009d4c:	08009dd9 	.word	0x08009dd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d56:	f043 0301 	orr.w	r3, r3, #1
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	18d1      	adds	r1, r2, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d70:	f7ff ff5c 	bl	8009c2c <prvInsertTimerInActiveList>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d069      	beq.n	8009e4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d05e      	beq.n	8009e4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	441a      	add	r2, r3
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da2:	f7ff fe05 	bl	80099b0 <xTimerGenericCommand>
 8009da6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d14f      	bne.n	8009e4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	61bb      	str	r3, [r7, #24]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dca:	f023 0301 	bic.w	r3, r3, #1
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009dd6:	e03a      	b.n	8009e4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dde:	f043 0301 	orr.w	r3, r3, #1
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	617b      	str	r3, [r7, #20]
}
 8009e0a:	bf00      	nop
 8009e0c:	e7fe      	b.n	8009e0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	699a      	ldr	r2, [r3, #24]
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	18d1      	adds	r1, r2, r3
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e1c:	f7ff ff06 	bl	8009c2c <prvInsertTimerInActiveList>
					break;
 8009e20:	e015      	b.n	8009e4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e28:	f003 0302 	and.w	r3, r3, #2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d103      	bne.n	8009e38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e32:	f000 fbdd 	bl	800a5f0 <vPortFree>
 8009e36:	e00a      	b.n	8009e4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e3e:	f023 0301 	bic.w	r3, r3, #1
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e4a:	e000      	b.n	8009e4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e4e:	4b08      	ldr	r3, [pc, #32]	; (8009e70 <prvProcessReceivedCommands+0x1c0>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	1d39      	adds	r1, r7, #4
 8009e54:	2200      	movs	r2, #0
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fc4a 	bl	80086f0 <xQueueReceive>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f47f af2a 	bne.w	8009cb8 <prvProcessReceivedCommands+0x8>
	}
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	3730      	adds	r7, #48	; 0x30
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20001378 	.word	0x20001378

08009e74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e7a:	e048      	b.n	8009f0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e7c:	4b2d      	ldr	r3, [pc, #180]	; (8009f34 <prvSwitchTimerLists+0xc0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e86:	4b2b      	ldr	r3, [pc, #172]	; (8009f34 <prvSwitchTimerLists+0xc0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fe f963 	bl	8008160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d02e      	beq.n	8009f0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d90e      	bls.n	8009ee0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ece:	4b19      	ldr	r3, [pc, #100]	; (8009f34 <prvSwitchTimerLists+0xc0>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4610      	mov	r0, r2
 8009eda:	f7fe f908 	bl	80080ee <vListInsert>
 8009ede:	e016      	b.n	8009f0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	2100      	movs	r1, #0
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7ff fd60 	bl	80099b0 <xTimerGenericCommand>
 8009ef0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	603b      	str	r3, [r7, #0]
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <prvSwitchTimerLists+0xc0>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1b1      	bne.n	8009e7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f18:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <prvSwitchTimerLists+0xc0>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f1e:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <prvSwitchTimerLists+0xc4>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <prvSwitchTimerLists+0xc0>)
 8009f24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f26:	4a04      	ldr	r2, [pc, #16]	; (8009f38 <prvSwitchTimerLists+0xc4>)
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	6013      	str	r3, [r2, #0]
}
 8009f2c:	bf00      	nop
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20001370 	.word	0x20001370
 8009f38:	20001374 	.word	0x20001374

08009f3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f42:	f000 f967 	bl	800a214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f46:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <prvCheckForValidListAndQueue+0x60>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d120      	bne.n	8009f90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f4e:	4814      	ldr	r0, [pc, #80]	; (8009fa0 <prvCheckForValidListAndQueue+0x64>)
 8009f50:	f7fe f87c 	bl	800804c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f54:	4813      	ldr	r0, [pc, #76]	; (8009fa4 <prvCheckForValidListAndQueue+0x68>)
 8009f56:	f7fe f879 	bl	800804c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f5a:	4b13      	ldr	r3, [pc, #76]	; (8009fa8 <prvCheckForValidListAndQueue+0x6c>)
 8009f5c:	4a10      	ldr	r2, [pc, #64]	; (8009fa0 <prvCheckForValidListAndQueue+0x64>)
 8009f5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f60:	4b12      	ldr	r3, [pc, #72]	; (8009fac <prvCheckForValidListAndQueue+0x70>)
 8009f62:	4a10      	ldr	r2, [pc, #64]	; (8009fa4 <prvCheckForValidListAndQueue+0x68>)
 8009f64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f66:	2300      	movs	r3, #0
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	4b11      	ldr	r3, [pc, #68]	; (8009fb0 <prvCheckForValidListAndQueue+0x74>)
 8009f6c:	4a11      	ldr	r2, [pc, #68]	; (8009fb4 <prvCheckForValidListAndQueue+0x78>)
 8009f6e:	2110      	movs	r1, #16
 8009f70:	200a      	movs	r0, #10
 8009f72:	f7fe f987 	bl	8008284 <xQueueGenericCreateStatic>
 8009f76:	4603      	mov	r3, r0
 8009f78:	4a08      	ldr	r2, [pc, #32]	; (8009f9c <prvCheckForValidListAndQueue+0x60>)
 8009f7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f7c:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <prvCheckForValidListAndQueue+0x60>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d005      	beq.n	8009f90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <prvCheckForValidListAndQueue+0x60>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	490b      	ldr	r1, [pc, #44]	; (8009fb8 <prvCheckForValidListAndQueue+0x7c>)
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fda0 	bl	8008ad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f90:	f000 f970 	bl	800a274 <vPortExitCritical>
}
 8009f94:	bf00      	nop
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20001378 	.word	0x20001378
 8009fa0:	20001348 	.word	0x20001348
 8009fa4:	2000135c 	.word	0x2000135c
 8009fa8:	20001370 	.word	0x20001370
 8009fac:	20001374 	.word	0x20001374
 8009fb0:	20001424 	.word	0x20001424
 8009fb4:	20001384 	.word	0x20001384
 8009fb8:	0800f3a8 	.word	0x0800f3a8

08009fbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3b04      	subs	r3, #4
 8009fcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3b04      	subs	r3, #4
 8009fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f023 0201 	bic.w	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3b04      	subs	r3, #4
 8009fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fec:	4a0c      	ldr	r2, [pc, #48]	; (800a020 <pxPortInitialiseStack+0x64>)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3b14      	subs	r3, #20
 8009ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3b04      	subs	r3, #4
 800a002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f06f 0202 	mvn.w	r2, #2
 800a00a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	3b20      	subs	r3, #32
 800a010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a012:	68fb      	ldr	r3, [r7, #12]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	0800a025 	.word	0x0800a025

0800a024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a02e:	4b12      	ldr	r3, [pc, #72]	; (800a078 <prvTaskExitError+0x54>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a036:	d00a      	beq.n	800a04e <prvTaskExitError+0x2a>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	60fb      	str	r3, [r7, #12]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <prvTaskExitError+0x28>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60bb      	str	r3, [r7, #8]
}
 800a060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a062:	bf00      	nop
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0fc      	beq.n	800a064 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a06a:	bf00      	nop
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	2000000c 	.word	0x2000000c
 800a07c:	00000000 	.word	0x00000000

0800a080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <pxCurrentTCBConst2>)
 800a082:	6819      	ldr	r1, [r3, #0]
 800a084:	6808      	ldr	r0, [r1, #0]
 800a086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	f380 8809 	msr	PSP, r0
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f380 8811 	msr	BASEPRI, r0
 800a09a:	4770      	bx	lr
 800a09c:	f3af 8000 	nop.w

0800a0a0 <pxCurrentTCBConst2>:
 800a0a0:	20000e48 	.word	0x20000e48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop

0800a0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0a8:	4808      	ldr	r0, [pc, #32]	; (800a0cc <prvPortStartFirstTask+0x24>)
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	6800      	ldr	r0, [r0, #0]
 800a0ae:	f380 8808 	msr	MSP, r0
 800a0b2:	f04f 0000 	mov.w	r0, #0
 800a0b6:	f380 8814 	msr	CONTROL, r0
 800a0ba:	b662      	cpsie	i
 800a0bc:	b661      	cpsie	f
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	df00      	svc	0
 800a0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0ca:	bf00      	nop
 800a0cc:	e000ed08 	.word	0xe000ed08

0800a0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0d6:	4b46      	ldr	r3, [pc, #280]	; (800a1f0 <xPortStartScheduler+0x120>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a46      	ldr	r2, [pc, #280]	; (800a1f4 <xPortStartScheduler+0x124>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d10a      	bne.n	800a0f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	613b      	str	r3, [r7, #16]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0f6:	4b3e      	ldr	r3, [pc, #248]	; (800a1f0 <xPortStartScheduler+0x120>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a3f      	ldr	r2, [pc, #252]	; (800a1f8 <xPortStartScheduler+0x128>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d10a      	bne.n	800a116 <xPortStartScheduler+0x46>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	60fb      	str	r3, [r7, #12]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a116:	4b39      	ldr	r3, [pc, #228]	; (800a1fc <xPortStartScheduler+0x12c>)
 800a118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	22ff      	movs	r2, #255	; 0xff
 800a126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	4b31      	ldr	r3, [pc, #196]	; (800a200 <xPortStartScheduler+0x130>)
 800a13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a13e:	4b31      	ldr	r3, [pc, #196]	; (800a204 <xPortStartScheduler+0x134>)
 800a140:	2207      	movs	r2, #7
 800a142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a144:	e009      	b.n	800a15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a146:	4b2f      	ldr	r3, [pc, #188]	; (800a204 <xPortStartScheduler+0x134>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	4a2d      	ldr	r2, [pc, #180]	; (800a204 <xPortStartScheduler+0x134>)
 800a14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	b2db      	uxtb	r3, r3
 800a158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a162:	2b80      	cmp	r3, #128	; 0x80
 800a164:	d0ef      	beq.n	800a146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a166:	4b27      	ldr	r3, [pc, #156]	; (800a204 <xPortStartScheduler+0x134>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f1c3 0307 	rsb	r3, r3, #7
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d00a      	beq.n	800a188 <xPortStartScheduler+0xb8>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	60bb      	str	r3, [r7, #8]
}
 800a184:	bf00      	nop
 800a186:	e7fe      	b.n	800a186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a188:	4b1e      	ldr	r3, [pc, #120]	; (800a204 <xPortStartScheduler+0x134>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	021b      	lsls	r3, r3, #8
 800a18e:	4a1d      	ldr	r2, [pc, #116]	; (800a204 <xPortStartScheduler+0x134>)
 800a190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a192:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <xPortStartScheduler+0x134>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a19a:	4a1a      	ldr	r2, [pc, #104]	; (800a204 <xPortStartScheduler+0x134>)
 800a19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1a6:	4b18      	ldr	r3, [pc, #96]	; (800a208 <xPortStartScheduler+0x138>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a17      	ldr	r2, [pc, #92]	; (800a208 <xPortStartScheduler+0x138>)
 800a1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1b2:	4b15      	ldr	r3, [pc, #84]	; (800a208 <xPortStartScheduler+0x138>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a14      	ldr	r2, [pc, #80]	; (800a208 <xPortStartScheduler+0x138>)
 800a1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1be:	f000 f8dd 	bl	800a37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1c2:	4b12      	ldr	r3, [pc, #72]	; (800a20c <xPortStartScheduler+0x13c>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1c8:	f000 f8fc 	bl	800a3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1cc:	4b10      	ldr	r3, [pc, #64]	; (800a210 <xPortStartScheduler+0x140>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a0f      	ldr	r2, [pc, #60]	; (800a210 <xPortStartScheduler+0x140>)
 800a1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1d8:	f7ff ff66 	bl	800a0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1dc:	f7ff f854 	bl	8009288 <vTaskSwitchContext>
	prvTaskExitError();
 800a1e0:	f7ff ff20 	bl	800a024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	e000ed00 	.word	0xe000ed00
 800a1f4:	410fc271 	.word	0x410fc271
 800a1f8:	410fc270 	.word	0x410fc270
 800a1fc:	e000e400 	.word	0xe000e400
 800a200:	20001474 	.word	0x20001474
 800a204:	20001478 	.word	0x20001478
 800a208:	e000ed20 	.word	0xe000ed20
 800a20c:	2000000c 	.word	0x2000000c
 800a210:	e000ef34 	.word	0xe000ef34

0800a214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	607b      	str	r3, [r7, #4]
}
 800a22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a22e:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <vPortEnterCritical+0x58>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	4a0d      	ldr	r2, [pc, #52]	; (800a26c <vPortEnterCritical+0x58>)
 800a236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <vPortEnterCritical+0x58>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d10f      	bne.n	800a260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <vPortEnterCritical+0x5c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <vPortEnterCritical+0x4c>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	603b      	str	r3, [r7, #0]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <vPortEnterCritical+0x4a>
	}
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	2000000c 	.word	0x2000000c
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a27a:	4b12      	ldr	r3, [pc, #72]	; (800a2c4 <vPortExitCritical+0x50>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <vPortExitCritical+0x24>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	607b      	str	r3, [r7, #4]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a298:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <vPortExitCritical+0x50>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	4a09      	ldr	r2, [pc, #36]	; (800a2c4 <vPortExitCritical+0x50>)
 800a2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2a2:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <vPortExitCritical+0x50>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d105      	bne.n	800a2b6 <vPortExitCritical+0x42>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	f383 8811 	msr	BASEPRI, r3
}
 800a2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	2000000c 	.word	0x2000000c
	...

0800a2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2d0:	f3ef 8009 	mrs	r0, PSP
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	4b15      	ldr	r3, [pc, #84]	; (800a330 <pxCurrentTCBConst>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	f01e 0f10 	tst.w	lr, #16
 800a2e0:	bf08      	it	eq
 800a2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ea:	6010      	str	r0, [r2, #0]
 800a2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2f4:	f380 8811 	msr	BASEPRI, r0
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f7fe ffc2 	bl	8009288 <vTaskSwitchContext>
 800a304:	f04f 0000 	mov.w	r0, #0
 800a308:	f380 8811 	msr	BASEPRI, r0
 800a30c:	bc09      	pop	{r0, r3}
 800a30e:	6819      	ldr	r1, [r3, #0]
 800a310:	6808      	ldr	r0, [r1, #0]
 800a312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a316:	f01e 0f10 	tst.w	lr, #16
 800a31a:	bf08      	it	eq
 800a31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a320:	f380 8809 	msr	PSP, r0
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w

0800a330 <pxCurrentTCBConst>:
 800a330:	20000e48 	.word	0x20000e48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop

0800a338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	607b      	str	r3, [r7, #4]
}
 800a350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a352:	f7fe fedf 	bl	8009114 <xTaskIncrementTick>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a35c:	4b06      	ldr	r3, [pc, #24]	; (800a378 <xPortSysTickHandler+0x40>)
 800a35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	2300      	movs	r3, #0
 800a366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	f383 8811 	msr	BASEPRI, r3
}
 800a36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a380:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <vPortSetupTimerInterrupt+0x34>)
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a386:	4b0b      	ldr	r3, [pc, #44]	; (800a3b4 <vPortSetupTimerInterrupt+0x38>)
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <vPortSetupTimerInterrupt+0x3c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <vPortSetupTimerInterrupt+0x40>)
 800a392:	fba2 2303 	umull	r2, r3, r2, r3
 800a396:	099b      	lsrs	r3, r3, #6
 800a398:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <vPortSetupTimerInterrupt+0x44>)
 800a39a:	3b01      	subs	r3, #1
 800a39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a39e:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <vPortSetupTimerInterrupt+0x34>)
 800a3a0:	2207      	movs	r2, #7
 800a3a2:	601a      	str	r2, [r3, #0]
}
 800a3a4:	bf00      	nop
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	e000e010 	.word	0xe000e010
 800a3b4:	e000e018 	.word	0xe000e018
 800a3b8:	20000000 	.word	0x20000000
 800a3bc:	10624dd3 	.word	0x10624dd3
 800a3c0:	e000e014 	.word	0xe000e014

0800a3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3d4 <vPortEnableVFP+0x10>
 800a3c8:	6801      	ldr	r1, [r0, #0]
 800a3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3ce:	6001      	str	r1, [r0, #0]
 800a3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3d2:	bf00      	nop
 800a3d4:	e000ed88 	.word	0xe000ed88

0800a3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3de:	f3ef 8305 	mrs	r3, IPSR
 800a3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b0f      	cmp	r3, #15
 800a3e8:	d914      	bls.n	800a414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3ea:	4a17      	ldr	r2, [pc, #92]	; (800a448 <vPortValidateInterruptPriority+0x70>)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3f4:	4b15      	ldr	r3, [pc, #84]	; (800a44c <vPortValidateInterruptPriority+0x74>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	7afa      	ldrb	r2, [r7, #11]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d20a      	bcs.n	800a414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
 800a412:	e7fe      	b.n	800a412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a414:	4b0e      	ldr	r3, [pc, #56]	; (800a450 <vPortValidateInterruptPriority+0x78>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <vPortValidateInterruptPriority+0x7c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	429a      	cmp	r2, r3
 800a422:	d90a      	bls.n	800a43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	603b      	str	r3, [r7, #0]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <vPortValidateInterruptPriority+0x60>
	}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	e000e3f0 	.word	0xe000e3f0
 800a44c:	20001474 	.word	0x20001474
 800a450:	e000ed0c 	.word	0xe000ed0c
 800a454:	20001478 	.word	0x20001478

0800a458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08a      	sub	sp, #40	; 0x28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a460:	2300      	movs	r3, #0
 800a462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a464:	f7fe fd9a 	bl	8008f9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a468:	4b5b      	ldr	r3, [pc, #364]	; (800a5d8 <pvPortMalloc+0x180>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a470:	f000 f920 	bl	800a6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a474:	4b59      	ldr	r3, [pc, #356]	; (800a5dc <pvPortMalloc+0x184>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4013      	ands	r3, r2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f040 8093 	bne.w	800a5a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01d      	beq.n	800a4c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a488:	2208      	movs	r2, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4413      	add	r3, r2
 800a48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	2b00      	cmp	r3, #0
 800a498:	d014      	beq.n	800a4c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f023 0307 	bic.w	r3, r3, #7
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	617b      	str	r3, [r7, #20]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d06e      	beq.n	800a5a8 <pvPortMalloc+0x150>
 800a4ca:	4b45      	ldr	r3, [pc, #276]	; (800a5e0 <pvPortMalloc+0x188>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d869      	bhi.n	800a5a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4d4:	4b43      	ldr	r3, [pc, #268]	; (800a5e4 <pvPortMalloc+0x18c>)
 800a4d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4d8:	4b42      	ldr	r3, [pc, #264]	; (800a5e4 <pvPortMalloc+0x18c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4de:	e004      	b.n	800a4ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d903      	bls.n	800a4fc <pvPortMalloc+0xa4>
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f1      	bne.n	800a4e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4fc:	4b36      	ldr	r3, [pc, #216]	; (800a5d8 <pvPortMalloc+0x180>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a502:	429a      	cmp	r2, r3
 800a504:	d050      	beq.n	800a5a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2208      	movs	r2, #8
 800a50c:	4413      	add	r3, r2
 800a50e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	1ad2      	subs	r2, r2, r3
 800a520:	2308      	movs	r3, #8
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	429a      	cmp	r2, r3
 800a526:	d91f      	bls.n	800a568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4413      	add	r3, r2
 800a52e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00a      	beq.n	800a550 <pvPortMalloc+0xf8>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	613b      	str	r3, [r7, #16]
}
 800a54c:	bf00      	nop
 800a54e:	e7fe      	b.n	800a54e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	1ad2      	subs	r2, r2, r3
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a562:	69b8      	ldr	r0, [r7, #24]
 800a564:	f000 f908 	bl	800a778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a568:	4b1d      	ldr	r3, [pc, #116]	; (800a5e0 <pvPortMalloc+0x188>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	4a1b      	ldr	r2, [pc, #108]	; (800a5e0 <pvPortMalloc+0x188>)
 800a574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a576:	4b1a      	ldr	r3, [pc, #104]	; (800a5e0 <pvPortMalloc+0x188>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	4b1b      	ldr	r3, [pc, #108]	; (800a5e8 <pvPortMalloc+0x190>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d203      	bcs.n	800a58a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a582:	4b17      	ldr	r3, [pc, #92]	; (800a5e0 <pvPortMalloc+0x188>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a18      	ldr	r2, [pc, #96]	; (800a5e8 <pvPortMalloc+0x190>)
 800a588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <pvPortMalloc+0x184>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	431a      	orrs	r2, r3
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a59e:	4b13      	ldr	r3, [pc, #76]	; (800a5ec <pvPortMalloc+0x194>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	4a11      	ldr	r2, [pc, #68]	; (800a5ec <pvPortMalloc+0x194>)
 800a5a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5a8:	f7fe fd06 	bl	8008fb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <pvPortMalloc+0x174>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	60fb      	str	r3, [r7, #12]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <pvPortMalloc+0x172>
	return pvReturn;
 800a5cc:	69fb      	ldr	r3, [r7, #28]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3728      	adds	r7, #40	; 0x28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20005084 	.word	0x20005084
 800a5dc:	20005098 	.word	0x20005098
 800a5e0:	20005088 	.word	0x20005088
 800a5e4:	2000507c 	.word	0x2000507c
 800a5e8:	2000508c 	.word	0x2000508c
 800a5ec:	20005090 	.word	0x20005090

0800a5f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d04d      	beq.n	800a69e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a602:	2308      	movs	r3, #8
 800a604:	425b      	negs	r3, r3
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	4413      	add	r3, r2
 800a60a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	4b24      	ldr	r3, [pc, #144]	; (800a6a8 <vPortFree+0xb8>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4013      	ands	r3, r2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10a      	bne.n	800a634 <vPortFree+0x44>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	60fb      	str	r3, [r7, #12]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00a      	beq.n	800a652 <vPortFree+0x62>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	60bb      	str	r3, [r7, #8]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <vPortFree+0xb8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4013      	ands	r3, r2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01e      	beq.n	800a69e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d11a      	bne.n	800a69e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <vPortFree+0xb8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	43db      	mvns	r3, r3
 800a672:	401a      	ands	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a678:	f7fe fc90 	bl	8008f9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <vPortFree+0xbc>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4413      	add	r3, r2
 800a686:	4a09      	ldr	r2, [pc, #36]	; (800a6ac <vPortFree+0xbc>)
 800a688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a68a:	6938      	ldr	r0, [r7, #16]
 800a68c:	f000 f874 	bl	800a778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <vPortFree+0xc0>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	4a06      	ldr	r2, [pc, #24]	; (800a6b0 <vPortFree+0xc0>)
 800a698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a69a:	f7fe fc8d 	bl	8008fb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a69e:	bf00      	nop
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20005098 	.word	0x20005098
 800a6ac:	20005088 	.word	0x20005088
 800a6b0:	20005094 	.word	0x20005094

0800a6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6c0:	4b27      	ldr	r3, [pc, #156]	; (800a760 <prvHeapInit+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00c      	beq.n	800a6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3307      	adds	r3, #7
 800a6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 0307 	bic.w	r3, r3, #7
 800a6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	4a1f      	ldr	r2, [pc, #124]	; (800a760 <prvHeapInit+0xac>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6ec:	4a1d      	ldr	r2, [pc, #116]	; (800a764 <prvHeapInit+0xb0>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <prvHeapInit+0xb0>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a700:	2208      	movs	r2, #8
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1a9b      	subs	r3, r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0307 	bic.w	r3, r3, #7
 800a70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4a15      	ldr	r2, [pc, #84]	; (800a768 <prvHeapInit+0xb4>)
 800a714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a716:	4b14      	ldr	r3, [pc, #80]	; (800a768 <prvHeapInit+0xb4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2200      	movs	r2, #0
 800a71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a71e:	4b12      	ldr	r3, [pc, #72]	; (800a768 <prvHeapInit+0xb4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a734:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <prvHeapInit+0xb4>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	4a0a      	ldr	r2, [pc, #40]	; (800a76c <prvHeapInit+0xb8>)
 800a742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	4a09      	ldr	r2, [pc, #36]	; (800a770 <prvHeapInit+0xbc>)
 800a74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a74c:	4b09      	ldr	r3, [pc, #36]	; (800a774 <prvHeapInit+0xc0>)
 800a74e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a752:	601a      	str	r2, [r3, #0]
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	2000147c 	.word	0x2000147c
 800a764:	2000507c 	.word	0x2000507c
 800a768:	20005084 	.word	0x20005084
 800a76c:	2000508c 	.word	0x2000508c
 800a770:	20005088 	.word	0x20005088
 800a774:	20005098 	.word	0x20005098

0800a778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a780:	4b28      	ldr	r3, [pc, #160]	; (800a824 <prvInsertBlockIntoFreeList+0xac>)
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e002      	b.n	800a78c <prvInsertBlockIntoFreeList+0x14>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	429a      	cmp	r2, r3
 800a794:	d8f7      	bhi.n	800a786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d108      	bne.n	800a7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	441a      	add	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	441a      	add	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d118      	bne.n	800a800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b15      	ldr	r3, [pc, #84]	; (800a828 <prvInsertBlockIntoFreeList+0xb0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d00d      	beq.n	800a7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	441a      	add	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	e008      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7f6:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <prvInsertBlockIntoFreeList+0xb0>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	e003      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d002      	beq.n	800a816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a816:	bf00      	nop
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	2000507c 	.word	0x2000507c
 800a828:	20005084 	.word	0x20005084

0800a82c <__errno>:
 800a82c:	4b01      	ldr	r3, [pc, #4]	; (800a834 <__errno+0x8>)
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	20000010 	.word	0x20000010

0800a838 <__libc_init_array>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	4d0d      	ldr	r5, [pc, #52]	; (800a870 <__libc_init_array+0x38>)
 800a83c:	4c0d      	ldr	r4, [pc, #52]	; (800a874 <__libc_init_array+0x3c>)
 800a83e:	1b64      	subs	r4, r4, r5
 800a840:	10a4      	asrs	r4, r4, #2
 800a842:	2600      	movs	r6, #0
 800a844:	42a6      	cmp	r6, r4
 800a846:	d109      	bne.n	800a85c <__libc_init_array+0x24>
 800a848:	4d0b      	ldr	r5, [pc, #44]	; (800a878 <__libc_init_array+0x40>)
 800a84a:	4c0c      	ldr	r4, [pc, #48]	; (800a87c <__libc_init_array+0x44>)
 800a84c:	f004 fca4 	bl	800f198 <_init>
 800a850:	1b64      	subs	r4, r4, r5
 800a852:	10a4      	asrs	r4, r4, #2
 800a854:	2600      	movs	r6, #0
 800a856:	42a6      	cmp	r6, r4
 800a858:	d105      	bne.n	800a866 <__libc_init_array+0x2e>
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a860:	4798      	blx	r3
 800a862:	3601      	adds	r6, #1
 800a864:	e7ee      	b.n	800a844 <__libc_init_array+0xc>
 800a866:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86a:	4798      	blx	r3
 800a86c:	3601      	adds	r6, #1
 800a86e:	e7f2      	b.n	800a856 <__libc_init_array+0x1e>
 800a870:	0800f910 	.word	0x0800f910
 800a874:	0800f910 	.word	0x0800f910
 800a878:	0800f910 	.word	0x0800f910
 800a87c:	0800f914 	.word	0x0800f914

0800a880 <memcpy>:
 800a880:	440a      	add	r2, r1
 800a882:	4291      	cmp	r1, r2
 800a884:	f100 33ff 	add.w	r3, r0, #4294967295
 800a888:	d100      	bne.n	800a88c <memcpy+0xc>
 800a88a:	4770      	bx	lr
 800a88c:	b510      	push	{r4, lr}
 800a88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a892:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a896:	4291      	cmp	r1, r2
 800a898:	d1f9      	bne.n	800a88e <memcpy+0xe>
 800a89a:	bd10      	pop	{r4, pc}

0800a89c <memset>:
 800a89c:	4402      	add	r2, r0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d100      	bne.n	800a8a6 <memset+0xa>
 800a8a4:	4770      	bx	lr
 800a8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8aa:	e7f9      	b.n	800a8a0 <memset+0x4>

0800a8ac <__cvt>:
 800a8ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b0:	ec55 4b10 	vmov	r4, r5, d0
 800a8b4:	2d00      	cmp	r5, #0
 800a8b6:	460e      	mov	r6, r1
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	462b      	mov	r3, r5
 800a8bc:	bfbb      	ittet	lt
 800a8be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8c2:	461d      	movlt	r5, r3
 800a8c4:	2300      	movge	r3, #0
 800a8c6:	232d      	movlt	r3, #45	; 0x2d
 800a8c8:	700b      	strb	r3, [r1, #0]
 800a8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8d0:	4691      	mov	r9, r2
 800a8d2:	f023 0820 	bic.w	r8, r3, #32
 800a8d6:	bfbc      	itt	lt
 800a8d8:	4622      	movlt	r2, r4
 800a8da:	4614      	movlt	r4, r2
 800a8dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8e0:	d005      	beq.n	800a8ee <__cvt+0x42>
 800a8e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8e6:	d100      	bne.n	800a8ea <__cvt+0x3e>
 800a8e8:	3601      	adds	r6, #1
 800a8ea:	2102      	movs	r1, #2
 800a8ec:	e000      	b.n	800a8f0 <__cvt+0x44>
 800a8ee:	2103      	movs	r1, #3
 800a8f0:	ab03      	add	r3, sp, #12
 800a8f2:	9301      	str	r3, [sp, #4]
 800a8f4:	ab02      	add	r3, sp, #8
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	ec45 4b10 	vmov	d0, r4, r5
 800a8fc:	4653      	mov	r3, sl
 800a8fe:	4632      	mov	r2, r6
 800a900:	f001 fdde 	bl	800c4c0 <_dtoa_r>
 800a904:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a908:	4607      	mov	r7, r0
 800a90a:	d102      	bne.n	800a912 <__cvt+0x66>
 800a90c:	f019 0f01 	tst.w	r9, #1
 800a910:	d022      	beq.n	800a958 <__cvt+0xac>
 800a912:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a916:	eb07 0906 	add.w	r9, r7, r6
 800a91a:	d110      	bne.n	800a93e <__cvt+0x92>
 800a91c:	783b      	ldrb	r3, [r7, #0]
 800a91e:	2b30      	cmp	r3, #48	; 0x30
 800a920:	d10a      	bne.n	800a938 <__cvt+0x8c>
 800a922:	2200      	movs	r2, #0
 800a924:	2300      	movs	r3, #0
 800a926:	4620      	mov	r0, r4
 800a928:	4629      	mov	r1, r5
 800a92a:	f7f6 f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a92e:	b918      	cbnz	r0, 800a938 <__cvt+0x8c>
 800a930:	f1c6 0601 	rsb	r6, r6, #1
 800a934:	f8ca 6000 	str.w	r6, [sl]
 800a938:	f8da 3000 	ldr.w	r3, [sl]
 800a93c:	4499      	add	r9, r3
 800a93e:	2200      	movs	r2, #0
 800a940:	2300      	movs	r3, #0
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	f7f6 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a94a:	b108      	cbz	r0, 800a950 <__cvt+0xa4>
 800a94c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a950:	2230      	movs	r2, #48	; 0x30
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	454b      	cmp	r3, r9
 800a956:	d307      	bcc.n	800a968 <__cvt+0xbc>
 800a958:	9b03      	ldr	r3, [sp, #12]
 800a95a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a95c:	1bdb      	subs	r3, r3, r7
 800a95e:	4638      	mov	r0, r7
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	b004      	add	sp, #16
 800a964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a968:	1c59      	adds	r1, r3, #1
 800a96a:	9103      	str	r1, [sp, #12]
 800a96c:	701a      	strb	r2, [r3, #0]
 800a96e:	e7f0      	b.n	800a952 <__cvt+0xa6>

0800a970 <__exponent>:
 800a970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a972:	4603      	mov	r3, r0
 800a974:	2900      	cmp	r1, #0
 800a976:	bfb8      	it	lt
 800a978:	4249      	neglt	r1, r1
 800a97a:	f803 2b02 	strb.w	r2, [r3], #2
 800a97e:	bfb4      	ite	lt
 800a980:	222d      	movlt	r2, #45	; 0x2d
 800a982:	222b      	movge	r2, #43	; 0x2b
 800a984:	2909      	cmp	r1, #9
 800a986:	7042      	strb	r2, [r0, #1]
 800a988:	dd2a      	ble.n	800a9e0 <__exponent+0x70>
 800a98a:	f10d 0407 	add.w	r4, sp, #7
 800a98e:	46a4      	mov	ip, r4
 800a990:	270a      	movs	r7, #10
 800a992:	46a6      	mov	lr, r4
 800a994:	460a      	mov	r2, r1
 800a996:	fb91 f6f7 	sdiv	r6, r1, r7
 800a99a:	fb07 1516 	mls	r5, r7, r6, r1
 800a99e:	3530      	adds	r5, #48	; 0x30
 800a9a0:	2a63      	cmp	r2, #99	; 0x63
 800a9a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	dcf1      	bgt.n	800a992 <__exponent+0x22>
 800a9ae:	3130      	adds	r1, #48	; 0x30
 800a9b0:	f1ae 0502 	sub.w	r5, lr, #2
 800a9b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9b8:	1c44      	adds	r4, r0, #1
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4561      	cmp	r1, ip
 800a9be:	d30a      	bcc.n	800a9d6 <__exponent+0x66>
 800a9c0:	f10d 0209 	add.w	r2, sp, #9
 800a9c4:	eba2 020e 	sub.w	r2, r2, lr
 800a9c8:	4565      	cmp	r5, ip
 800a9ca:	bf88      	it	hi
 800a9cc:	2200      	movhi	r2, #0
 800a9ce:	4413      	add	r3, r2
 800a9d0:	1a18      	subs	r0, r3, r0
 800a9d2:	b003      	add	sp, #12
 800a9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9de:	e7ed      	b.n	800a9bc <__exponent+0x4c>
 800a9e0:	2330      	movs	r3, #48	; 0x30
 800a9e2:	3130      	adds	r1, #48	; 0x30
 800a9e4:	7083      	strb	r3, [r0, #2]
 800a9e6:	70c1      	strb	r1, [r0, #3]
 800a9e8:	1d03      	adds	r3, r0, #4
 800a9ea:	e7f1      	b.n	800a9d0 <__exponent+0x60>

0800a9ec <_printf_float>:
 800a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	ed2d 8b02 	vpush	{d8}
 800a9f4:	b08d      	sub	sp, #52	; 0x34
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	461f      	mov	r7, r3
 800aa00:	4605      	mov	r5, r0
 800aa02:	f002 ffc1 	bl	800d988 <_localeconv_r>
 800aa06:	f8d0 a000 	ldr.w	sl, [r0]
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	f7f5 fbe0 	bl	80001d0 <strlen>
 800aa10:	2300      	movs	r3, #0
 800aa12:	930a      	str	r3, [sp, #40]	; 0x28
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	9305      	str	r3, [sp, #20]
 800aa18:	f8d8 3000 	ldr.w	r3, [r8]
 800aa1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa20:	3307      	adds	r3, #7
 800aa22:	f023 0307 	bic.w	r3, r3, #7
 800aa26:	f103 0208 	add.w	r2, r3, #8
 800aa2a:	f8c8 2000 	str.w	r2, [r8]
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa3e:	9307      	str	r3, [sp, #28]
 800aa40:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa44:	ee08 0a10 	vmov	s16, r0
 800aa48:	4b9f      	ldr	r3, [pc, #636]	; (800acc8 <_printf_float+0x2dc>)
 800aa4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa52:	f7f6 f86b 	bl	8000b2c <__aeabi_dcmpun>
 800aa56:	bb88      	cbnz	r0, 800aabc <_printf_float+0xd0>
 800aa58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa5c:	4b9a      	ldr	r3, [pc, #616]	; (800acc8 <_printf_float+0x2dc>)
 800aa5e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa62:	f7f6 f845 	bl	8000af0 <__aeabi_dcmple>
 800aa66:	bb48      	cbnz	r0, 800aabc <_printf_float+0xd0>
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4649      	mov	r1, r9
 800aa70:	f7f6 f834 	bl	8000adc <__aeabi_dcmplt>
 800aa74:	b110      	cbz	r0, 800aa7c <_printf_float+0x90>
 800aa76:	232d      	movs	r3, #45	; 0x2d
 800aa78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa7c:	4b93      	ldr	r3, [pc, #588]	; (800accc <_printf_float+0x2e0>)
 800aa7e:	4894      	ldr	r0, [pc, #592]	; (800acd0 <_printf_float+0x2e4>)
 800aa80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa84:	bf94      	ite	ls
 800aa86:	4698      	movls	r8, r3
 800aa88:	4680      	movhi	r8, r0
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	6123      	str	r3, [r4, #16]
 800aa8e:	9b05      	ldr	r3, [sp, #20]
 800aa90:	f023 0204 	bic.w	r2, r3, #4
 800aa94:	6022      	str	r2, [r4, #0]
 800aa96:	f04f 0900 	mov.w	r9, #0
 800aa9a:	9700      	str	r7, [sp, #0]
 800aa9c:	4633      	mov	r3, r6
 800aa9e:	aa0b      	add	r2, sp, #44	; 0x2c
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 f9d8 	bl	800ae58 <_printf_common>
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	f040 8090 	bne.w	800abce <_printf_float+0x1e2>
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295
 800aab2:	b00d      	add	sp, #52	; 0x34
 800aab4:	ecbd 8b02 	vpop	{d8}
 800aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabc:	4642      	mov	r2, r8
 800aabe:	464b      	mov	r3, r9
 800aac0:	4640      	mov	r0, r8
 800aac2:	4649      	mov	r1, r9
 800aac4:	f7f6 f832 	bl	8000b2c <__aeabi_dcmpun>
 800aac8:	b140      	cbz	r0, 800aadc <_printf_float+0xf0>
 800aaca:	464b      	mov	r3, r9
 800aacc:	2b00      	cmp	r3, #0
 800aace:	bfbc      	itt	lt
 800aad0:	232d      	movlt	r3, #45	; 0x2d
 800aad2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aad6:	487f      	ldr	r0, [pc, #508]	; (800acd4 <_printf_float+0x2e8>)
 800aad8:	4b7f      	ldr	r3, [pc, #508]	; (800acd8 <_printf_float+0x2ec>)
 800aada:	e7d1      	b.n	800aa80 <_printf_float+0x94>
 800aadc:	6863      	ldr	r3, [r4, #4]
 800aade:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aae2:	9206      	str	r2, [sp, #24]
 800aae4:	1c5a      	adds	r2, r3, #1
 800aae6:	d13f      	bne.n	800ab68 <_printf_float+0x17c>
 800aae8:	2306      	movs	r3, #6
 800aaea:	6063      	str	r3, [r4, #4]
 800aaec:	9b05      	ldr	r3, [sp, #20]
 800aaee:	6861      	ldr	r1, [r4, #4]
 800aaf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9303      	str	r3, [sp, #12]
 800aaf8:	ab0a      	add	r3, sp, #40	; 0x28
 800aafa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aafe:	ab09      	add	r3, sp, #36	; 0x24
 800ab00:	ec49 8b10 	vmov	d0, r8, r9
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	6022      	str	r2, [r4, #0]
 800ab08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f7ff fecd 	bl	800a8ac <__cvt>
 800ab12:	9b06      	ldr	r3, [sp, #24]
 800ab14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab16:	2b47      	cmp	r3, #71	; 0x47
 800ab18:	4680      	mov	r8, r0
 800ab1a:	d108      	bne.n	800ab2e <_printf_float+0x142>
 800ab1c:	1cc8      	adds	r0, r1, #3
 800ab1e:	db02      	blt.n	800ab26 <_printf_float+0x13a>
 800ab20:	6863      	ldr	r3, [r4, #4]
 800ab22:	4299      	cmp	r1, r3
 800ab24:	dd41      	ble.n	800abaa <_printf_float+0x1be>
 800ab26:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab2a:	fa5f fb8b 	uxtb.w	fp, fp
 800ab2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab32:	d820      	bhi.n	800ab76 <_printf_float+0x18a>
 800ab34:	3901      	subs	r1, #1
 800ab36:	465a      	mov	r2, fp
 800ab38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab3c:	9109      	str	r1, [sp, #36]	; 0x24
 800ab3e:	f7ff ff17 	bl	800a970 <__exponent>
 800ab42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab44:	1813      	adds	r3, r2, r0
 800ab46:	2a01      	cmp	r2, #1
 800ab48:	4681      	mov	r9, r0
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	dc02      	bgt.n	800ab54 <_printf_float+0x168>
 800ab4e:	6822      	ldr	r2, [r4, #0]
 800ab50:	07d2      	lsls	r2, r2, #31
 800ab52:	d501      	bpl.n	800ab58 <_printf_float+0x16c>
 800ab54:	3301      	adds	r3, #1
 800ab56:	6123      	str	r3, [r4, #16]
 800ab58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d09c      	beq.n	800aa9a <_printf_float+0xae>
 800ab60:	232d      	movs	r3, #45	; 0x2d
 800ab62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab66:	e798      	b.n	800aa9a <_printf_float+0xae>
 800ab68:	9a06      	ldr	r2, [sp, #24]
 800ab6a:	2a47      	cmp	r2, #71	; 0x47
 800ab6c:	d1be      	bne.n	800aaec <_printf_float+0x100>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1bc      	bne.n	800aaec <_printf_float+0x100>
 800ab72:	2301      	movs	r3, #1
 800ab74:	e7b9      	b.n	800aaea <_printf_float+0xfe>
 800ab76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab7a:	d118      	bne.n	800abae <_printf_float+0x1c2>
 800ab7c:	2900      	cmp	r1, #0
 800ab7e:	6863      	ldr	r3, [r4, #4]
 800ab80:	dd0b      	ble.n	800ab9a <_printf_float+0x1ae>
 800ab82:	6121      	str	r1, [r4, #16]
 800ab84:	b913      	cbnz	r3, 800ab8c <_printf_float+0x1a0>
 800ab86:	6822      	ldr	r2, [r4, #0]
 800ab88:	07d0      	lsls	r0, r2, #31
 800ab8a:	d502      	bpl.n	800ab92 <_printf_float+0x1a6>
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	440b      	add	r3, r1
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab94:	f04f 0900 	mov.w	r9, #0
 800ab98:	e7de      	b.n	800ab58 <_printf_float+0x16c>
 800ab9a:	b913      	cbnz	r3, 800aba2 <_printf_float+0x1b6>
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	07d2      	lsls	r2, r2, #31
 800aba0:	d501      	bpl.n	800aba6 <_printf_float+0x1ba>
 800aba2:	3302      	adds	r3, #2
 800aba4:	e7f4      	b.n	800ab90 <_printf_float+0x1a4>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e7f2      	b.n	800ab90 <_printf_float+0x1a4>
 800abaa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800abae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb0:	4299      	cmp	r1, r3
 800abb2:	db05      	blt.n	800abc0 <_printf_float+0x1d4>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	6121      	str	r1, [r4, #16]
 800abb8:	07d8      	lsls	r0, r3, #31
 800abba:	d5ea      	bpl.n	800ab92 <_printf_float+0x1a6>
 800abbc:	1c4b      	adds	r3, r1, #1
 800abbe:	e7e7      	b.n	800ab90 <_printf_float+0x1a4>
 800abc0:	2900      	cmp	r1, #0
 800abc2:	bfd4      	ite	le
 800abc4:	f1c1 0202 	rsble	r2, r1, #2
 800abc8:	2201      	movgt	r2, #1
 800abca:	4413      	add	r3, r2
 800abcc:	e7e0      	b.n	800ab90 <_printf_float+0x1a4>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	055a      	lsls	r2, r3, #21
 800abd2:	d407      	bmi.n	800abe4 <_printf_float+0x1f8>
 800abd4:	6923      	ldr	r3, [r4, #16]
 800abd6:	4642      	mov	r2, r8
 800abd8:	4631      	mov	r1, r6
 800abda:	4628      	mov	r0, r5
 800abdc:	47b8      	blx	r7
 800abde:	3001      	adds	r0, #1
 800abe0:	d12c      	bne.n	800ac3c <_printf_float+0x250>
 800abe2:	e764      	b.n	800aaae <_printf_float+0xc2>
 800abe4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abe8:	f240 80e0 	bls.w	800adac <_printf_float+0x3c0>
 800abec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abf0:	2200      	movs	r2, #0
 800abf2:	2300      	movs	r3, #0
 800abf4:	f7f5 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d034      	beq.n	800ac66 <_printf_float+0x27a>
 800abfc:	4a37      	ldr	r2, [pc, #220]	; (800acdc <_printf_float+0x2f0>)
 800abfe:	2301      	movs	r3, #1
 800ac00:	4631      	mov	r1, r6
 800ac02:	4628      	mov	r0, r5
 800ac04:	47b8      	blx	r7
 800ac06:	3001      	adds	r0, #1
 800ac08:	f43f af51 	beq.w	800aaae <_printf_float+0xc2>
 800ac0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac10:	429a      	cmp	r2, r3
 800ac12:	db02      	blt.n	800ac1a <_printf_float+0x22e>
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	07d8      	lsls	r0, r3, #31
 800ac18:	d510      	bpl.n	800ac3c <_printf_float+0x250>
 800ac1a:	ee18 3a10 	vmov	r3, s16
 800ac1e:	4652      	mov	r2, sl
 800ac20:	4631      	mov	r1, r6
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b8      	blx	r7
 800ac26:	3001      	adds	r0, #1
 800ac28:	f43f af41 	beq.w	800aaae <_printf_float+0xc2>
 800ac2c:	f04f 0800 	mov.w	r8, #0
 800ac30:	f104 091a 	add.w	r9, r4, #26
 800ac34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac36:	3b01      	subs	r3, #1
 800ac38:	4543      	cmp	r3, r8
 800ac3a:	dc09      	bgt.n	800ac50 <_printf_float+0x264>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	079b      	lsls	r3, r3, #30
 800ac40:	f100 8105 	bmi.w	800ae4e <_printf_float+0x462>
 800ac44:	68e0      	ldr	r0, [r4, #12]
 800ac46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac48:	4298      	cmp	r0, r3
 800ac4a:	bfb8      	it	lt
 800ac4c:	4618      	movlt	r0, r3
 800ac4e:	e730      	b.n	800aab2 <_printf_float+0xc6>
 800ac50:	2301      	movs	r3, #1
 800ac52:	464a      	mov	r2, r9
 800ac54:	4631      	mov	r1, r6
 800ac56:	4628      	mov	r0, r5
 800ac58:	47b8      	blx	r7
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	f43f af27 	beq.w	800aaae <_printf_float+0xc2>
 800ac60:	f108 0801 	add.w	r8, r8, #1
 800ac64:	e7e6      	b.n	800ac34 <_printf_float+0x248>
 800ac66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dc39      	bgt.n	800ace0 <_printf_float+0x2f4>
 800ac6c:	4a1b      	ldr	r2, [pc, #108]	; (800acdc <_printf_float+0x2f0>)
 800ac6e:	2301      	movs	r3, #1
 800ac70:	4631      	mov	r1, r6
 800ac72:	4628      	mov	r0, r5
 800ac74:	47b8      	blx	r7
 800ac76:	3001      	adds	r0, #1
 800ac78:	f43f af19 	beq.w	800aaae <_printf_float+0xc2>
 800ac7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac80:	4313      	orrs	r3, r2
 800ac82:	d102      	bne.n	800ac8a <_printf_float+0x29e>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	07d9      	lsls	r1, r3, #31
 800ac88:	d5d8      	bpl.n	800ac3c <_printf_float+0x250>
 800ac8a:	ee18 3a10 	vmov	r3, s16
 800ac8e:	4652      	mov	r2, sl
 800ac90:	4631      	mov	r1, r6
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b8      	blx	r7
 800ac96:	3001      	adds	r0, #1
 800ac98:	f43f af09 	beq.w	800aaae <_printf_float+0xc2>
 800ac9c:	f04f 0900 	mov.w	r9, #0
 800aca0:	f104 0a1a 	add.w	sl, r4, #26
 800aca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca6:	425b      	negs	r3, r3
 800aca8:	454b      	cmp	r3, r9
 800acaa:	dc01      	bgt.n	800acb0 <_printf_float+0x2c4>
 800acac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acae:	e792      	b.n	800abd6 <_printf_float+0x1ea>
 800acb0:	2301      	movs	r3, #1
 800acb2:	4652      	mov	r2, sl
 800acb4:	4631      	mov	r1, r6
 800acb6:	4628      	mov	r0, r5
 800acb8:	47b8      	blx	r7
 800acba:	3001      	adds	r0, #1
 800acbc:	f43f aef7 	beq.w	800aaae <_printf_float+0xc2>
 800acc0:	f109 0901 	add.w	r9, r9, #1
 800acc4:	e7ee      	b.n	800aca4 <_printf_float+0x2b8>
 800acc6:	bf00      	nop
 800acc8:	7fefffff 	.word	0x7fefffff
 800accc:	0800f464 	.word	0x0800f464
 800acd0:	0800f468 	.word	0x0800f468
 800acd4:	0800f470 	.word	0x0800f470
 800acd8:	0800f46c 	.word	0x0800f46c
 800acdc:	0800f474 	.word	0x0800f474
 800ace0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ace2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ace4:	429a      	cmp	r2, r3
 800ace6:	bfa8      	it	ge
 800ace8:	461a      	movge	r2, r3
 800acea:	2a00      	cmp	r2, #0
 800acec:	4691      	mov	r9, r2
 800acee:	dc37      	bgt.n	800ad60 <_printf_float+0x374>
 800acf0:	f04f 0b00 	mov.w	fp, #0
 800acf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acf8:	f104 021a 	add.w	r2, r4, #26
 800acfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acfe:	9305      	str	r3, [sp, #20]
 800ad00:	eba3 0309 	sub.w	r3, r3, r9
 800ad04:	455b      	cmp	r3, fp
 800ad06:	dc33      	bgt.n	800ad70 <_printf_float+0x384>
 800ad08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	db3b      	blt.n	800ad88 <_printf_float+0x39c>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	07da      	lsls	r2, r3, #31
 800ad14:	d438      	bmi.n	800ad88 <_printf_float+0x39c>
 800ad16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad18:	9a05      	ldr	r2, [sp, #20]
 800ad1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad1c:	1a9a      	subs	r2, r3, r2
 800ad1e:	eba3 0901 	sub.w	r9, r3, r1
 800ad22:	4591      	cmp	r9, r2
 800ad24:	bfa8      	it	ge
 800ad26:	4691      	movge	r9, r2
 800ad28:	f1b9 0f00 	cmp.w	r9, #0
 800ad2c:	dc35      	bgt.n	800ad9a <_printf_float+0x3ae>
 800ad2e:	f04f 0800 	mov.w	r8, #0
 800ad32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad36:	f104 0a1a 	add.w	sl, r4, #26
 800ad3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad3e:	1a9b      	subs	r3, r3, r2
 800ad40:	eba3 0309 	sub.w	r3, r3, r9
 800ad44:	4543      	cmp	r3, r8
 800ad46:	f77f af79 	ble.w	800ac3c <_printf_float+0x250>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	4652      	mov	r2, sl
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b8      	blx	r7
 800ad54:	3001      	adds	r0, #1
 800ad56:	f43f aeaa 	beq.w	800aaae <_printf_float+0xc2>
 800ad5a:	f108 0801 	add.w	r8, r8, #1
 800ad5e:	e7ec      	b.n	800ad3a <_printf_float+0x34e>
 800ad60:	4613      	mov	r3, r2
 800ad62:	4631      	mov	r1, r6
 800ad64:	4642      	mov	r2, r8
 800ad66:	4628      	mov	r0, r5
 800ad68:	47b8      	blx	r7
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	d1c0      	bne.n	800acf0 <_printf_float+0x304>
 800ad6e:	e69e      	b.n	800aaae <_printf_float+0xc2>
 800ad70:	2301      	movs	r3, #1
 800ad72:	4631      	mov	r1, r6
 800ad74:	4628      	mov	r0, r5
 800ad76:	9205      	str	r2, [sp, #20]
 800ad78:	47b8      	blx	r7
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	f43f ae97 	beq.w	800aaae <_printf_float+0xc2>
 800ad80:	9a05      	ldr	r2, [sp, #20]
 800ad82:	f10b 0b01 	add.w	fp, fp, #1
 800ad86:	e7b9      	b.n	800acfc <_printf_float+0x310>
 800ad88:	ee18 3a10 	vmov	r3, s16
 800ad8c:	4652      	mov	r2, sl
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4628      	mov	r0, r5
 800ad92:	47b8      	blx	r7
 800ad94:	3001      	adds	r0, #1
 800ad96:	d1be      	bne.n	800ad16 <_printf_float+0x32a>
 800ad98:	e689      	b.n	800aaae <_printf_float+0xc2>
 800ad9a:	9a05      	ldr	r2, [sp, #20]
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	4442      	add	r2, r8
 800ada0:	4631      	mov	r1, r6
 800ada2:	4628      	mov	r0, r5
 800ada4:	47b8      	blx	r7
 800ada6:	3001      	adds	r0, #1
 800ada8:	d1c1      	bne.n	800ad2e <_printf_float+0x342>
 800adaa:	e680      	b.n	800aaae <_printf_float+0xc2>
 800adac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adae:	2a01      	cmp	r2, #1
 800adb0:	dc01      	bgt.n	800adb6 <_printf_float+0x3ca>
 800adb2:	07db      	lsls	r3, r3, #31
 800adb4:	d538      	bpl.n	800ae28 <_printf_float+0x43c>
 800adb6:	2301      	movs	r3, #1
 800adb8:	4642      	mov	r2, r8
 800adba:	4631      	mov	r1, r6
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b8      	blx	r7
 800adc0:	3001      	adds	r0, #1
 800adc2:	f43f ae74 	beq.w	800aaae <_printf_float+0xc2>
 800adc6:	ee18 3a10 	vmov	r3, s16
 800adca:	4652      	mov	r2, sl
 800adcc:	4631      	mov	r1, r6
 800adce:	4628      	mov	r0, r5
 800add0:	47b8      	blx	r7
 800add2:	3001      	adds	r0, #1
 800add4:	f43f ae6b 	beq.w	800aaae <_printf_float+0xc2>
 800add8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800addc:	2200      	movs	r2, #0
 800adde:	2300      	movs	r3, #0
 800ade0:	f7f5 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 800ade4:	b9d8      	cbnz	r0, 800ae1e <_printf_float+0x432>
 800ade6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade8:	f108 0201 	add.w	r2, r8, #1
 800adec:	3b01      	subs	r3, #1
 800adee:	4631      	mov	r1, r6
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b8      	blx	r7
 800adf4:	3001      	adds	r0, #1
 800adf6:	d10e      	bne.n	800ae16 <_printf_float+0x42a>
 800adf8:	e659      	b.n	800aaae <_printf_float+0xc2>
 800adfa:	2301      	movs	r3, #1
 800adfc:	4652      	mov	r2, sl
 800adfe:	4631      	mov	r1, r6
 800ae00:	4628      	mov	r0, r5
 800ae02:	47b8      	blx	r7
 800ae04:	3001      	adds	r0, #1
 800ae06:	f43f ae52 	beq.w	800aaae <_printf_float+0xc2>
 800ae0a:	f108 0801 	add.w	r8, r8, #1
 800ae0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae10:	3b01      	subs	r3, #1
 800ae12:	4543      	cmp	r3, r8
 800ae14:	dcf1      	bgt.n	800adfa <_printf_float+0x40e>
 800ae16:	464b      	mov	r3, r9
 800ae18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae1c:	e6dc      	b.n	800abd8 <_printf_float+0x1ec>
 800ae1e:	f04f 0800 	mov.w	r8, #0
 800ae22:	f104 0a1a 	add.w	sl, r4, #26
 800ae26:	e7f2      	b.n	800ae0e <_printf_float+0x422>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	4642      	mov	r2, r8
 800ae2c:	e7df      	b.n	800adee <_printf_float+0x402>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	464a      	mov	r2, r9
 800ae32:	4631      	mov	r1, r6
 800ae34:	4628      	mov	r0, r5
 800ae36:	47b8      	blx	r7
 800ae38:	3001      	adds	r0, #1
 800ae3a:	f43f ae38 	beq.w	800aaae <_printf_float+0xc2>
 800ae3e:	f108 0801 	add.w	r8, r8, #1
 800ae42:	68e3      	ldr	r3, [r4, #12]
 800ae44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae46:	1a5b      	subs	r3, r3, r1
 800ae48:	4543      	cmp	r3, r8
 800ae4a:	dcf0      	bgt.n	800ae2e <_printf_float+0x442>
 800ae4c:	e6fa      	b.n	800ac44 <_printf_float+0x258>
 800ae4e:	f04f 0800 	mov.w	r8, #0
 800ae52:	f104 0919 	add.w	r9, r4, #25
 800ae56:	e7f4      	b.n	800ae42 <_printf_float+0x456>

0800ae58 <_printf_common>:
 800ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5c:	4616      	mov	r6, r2
 800ae5e:	4699      	mov	r9, r3
 800ae60:	688a      	ldr	r2, [r1, #8]
 800ae62:	690b      	ldr	r3, [r1, #16]
 800ae64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	bfb8      	it	lt
 800ae6c:	4613      	movlt	r3, r2
 800ae6e:	6033      	str	r3, [r6, #0]
 800ae70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae74:	4607      	mov	r7, r0
 800ae76:	460c      	mov	r4, r1
 800ae78:	b10a      	cbz	r2, 800ae7e <_printf_common+0x26>
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	6033      	str	r3, [r6, #0]
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	0699      	lsls	r1, r3, #26
 800ae82:	bf42      	ittt	mi
 800ae84:	6833      	ldrmi	r3, [r6, #0]
 800ae86:	3302      	addmi	r3, #2
 800ae88:	6033      	strmi	r3, [r6, #0]
 800ae8a:	6825      	ldr	r5, [r4, #0]
 800ae8c:	f015 0506 	ands.w	r5, r5, #6
 800ae90:	d106      	bne.n	800aea0 <_printf_common+0x48>
 800ae92:	f104 0a19 	add.w	sl, r4, #25
 800ae96:	68e3      	ldr	r3, [r4, #12]
 800ae98:	6832      	ldr	r2, [r6, #0]
 800ae9a:	1a9b      	subs	r3, r3, r2
 800ae9c:	42ab      	cmp	r3, r5
 800ae9e:	dc26      	bgt.n	800aeee <_printf_common+0x96>
 800aea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aea4:	1e13      	subs	r3, r2, #0
 800aea6:	6822      	ldr	r2, [r4, #0]
 800aea8:	bf18      	it	ne
 800aeaa:	2301      	movne	r3, #1
 800aeac:	0692      	lsls	r2, r2, #26
 800aeae:	d42b      	bmi.n	800af08 <_printf_common+0xb0>
 800aeb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	47c0      	blx	r8
 800aeba:	3001      	adds	r0, #1
 800aebc:	d01e      	beq.n	800aefc <_printf_common+0xa4>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	68e5      	ldr	r5, [r4, #12]
 800aec2:	6832      	ldr	r2, [r6, #0]
 800aec4:	f003 0306 	and.w	r3, r3, #6
 800aec8:	2b04      	cmp	r3, #4
 800aeca:	bf08      	it	eq
 800aecc:	1aad      	subeq	r5, r5, r2
 800aece:	68a3      	ldr	r3, [r4, #8]
 800aed0:	6922      	ldr	r2, [r4, #16]
 800aed2:	bf0c      	ite	eq
 800aed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aed8:	2500      	movne	r5, #0
 800aeda:	4293      	cmp	r3, r2
 800aedc:	bfc4      	itt	gt
 800aede:	1a9b      	subgt	r3, r3, r2
 800aee0:	18ed      	addgt	r5, r5, r3
 800aee2:	2600      	movs	r6, #0
 800aee4:	341a      	adds	r4, #26
 800aee6:	42b5      	cmp	r5, r6
 800aee8:	d11a      	bne.n	800af20 <_printf_common+0xc8>
 800aeea:	2000      	movs	r0, #0
 800aeec:	e008      	b.n	800af00 <_printf_common+0xa8>
 800aeee:	2301      	movs	r3, #1
 800aef0:	4652      	mov	r2, sl
 800aef2:	4649      	mov	r1, r9
 800aef4:	4638      	mov	r0, r7
 800aef6:	47c0      	blx	r8
 800aef8:	3001      	adds	r0, #1
 800aefa:	d103      	bne.n	800af04 <_printf_common+0xac>
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295
 800af00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af04:	3501      	adds	r5, #1
 800af06:	e7c6      	b.n	800ae96 <_printf_common+0x3e>
 800af08:	18e1      	adds	r1, r4, r3
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	2030      	movs	r0, #48	; 0x30
 800af0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af12:	4422      	add	r2, r4
 800af14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af1c:	3302      	adds	r3, #2
 800af1e:	e7c7      	b.n	800aeb0 <_printf_common+0x58>
 800af20:	2301      	movs	r3, #1
 800af22:	4622      	mov	r2, r4
 800af24:	4649      	mov	r1, r9
 800af26:	4638      	mov	r0, r7
 800af28:	47c0      	blx	r8
 800af2a:	3001      	adds	r0, #1
 800af2c:	d0e6      	beq.n	800aefc <_printf_common+0xa4>
 800af2e:	3601      	adds	r6, #1
 800af30:	e7d9      	b.n	800aee6 <_printf_common+0x8e>
	...

0800af34 <_printf_i>:
 800af34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af38:	7e0f      	ldrb	r7, [r1, #24]
 800af3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af3c:	2f78      	cmp	r7, #120	; 0x78
 800af3e:	4691      	mov	r9, r2
 800af40:	4680      	mov	r8, r0
 800af42:	460c      	mov	r4, r1
 800af44:	469a      	mov	sl, r3
 800af46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af4a:	d807      	bhi.n	800af5c <_printf_i+0x28>
 800af4c:	2f62      	cmp	r7, #98	; 0x62
 800af4e:	d80a      	bhi.n	800af66 <_printf_i+0x32>
 800af50:	2f00      	cmp	r7, #0
 800af52:	f000 80d8 	beq.w	800b106 <_printf_i+0x1d2>
 800af56:	2f58      	cmp	r7, #88	; 0x58
 800af58:	f000 80a3 	beq.w	800b0a2 <_printf_i+0x16e>
 800af5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af64:	e03a      	b.n	800afdc <_printf_i+0xa8>
 800af66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af6a:	2b15      	cmp	r3, #21
 800af6c:	d8f6      	bhi.n	800af5c <_printf_i+0x28>
 800af6e:	a101      	add	r1, pc, #4	; (adr r1, 800af74 <_printf_i+0x40>)
 800af70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af74:	0800afcd 	.word	0x0800afcd
 800af78:	0800afe1 	.word	0x0800afe1
 800af7c:	0800af5d 	.word	0x0800af5d
 800af80:	0800af5d 	.word	0x0800af5d
 800af84:	0800af5d 	.word	0x0800af5d
 800af88:	0800af5d 	.word	0x0800af5d
 800af8c:	0800afe1 	.word	0x0800afe1
 800af90:	0800af5d 	.word	0x0800af5d
 800af94:	0800af5d 	.word	0x0800af5d
 800af98:	0800af5d 	.word	0x0800af5d
 800af9c:	0800af5d 	.word	0x0800af5d
 800afa0:	0800b0ed 	.word	0x0800b0ed
 800afa4:	0800b011 	.word	0x0800b011
 800afa8:	0800b0cf 	.word	0x0800b0cf
 800afac:	0800af5d 	.word	0x0800af5d
 800afb0:	0800af5d 	.word	0x0800af5d
 800afb4:	0800b10f 	.word	0x0800b10f
 800afb8:	0800af5d 	.word	0x0800af5d
 800afbc:	0800b011 	.word	0x0800b011
 800afc0:	0800af5d 	.word	0x0800af5d
 800afc4:	0800af5d 	.word	0x0800af5d
 800afc8:	0800b0d7 	.word	0x0800b0d7
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	1d1a      	adds	r2, r3, #4
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	602a      	str	r2, [r5, #0]
 800afd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afdc:	2301      	movs	r3, #1
 800afde:	e0a3      	b.n	800b128 <_printf_i+0x1f4>
 800afe0:	6820      	ldr	r0, [r4, #0]
 800afe2:	6829      	ldr	r1, [r5, #0]
 800afe4:	0606      	lsls	r6, r0, #24
 800afe6:	f101 0304 	add.w	r3, r1, #4
 800afea:	d50a      	bpl.n	800b002 <_printf_i+0xce>
 800afec:	680e      	ldr	r6, [r1, #0]
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	2e00      	cmp	r6, #0
 800aff2:	da03      	bge.n	800affc <_printf_i+0xc8>
 800aff4:	232d      	movs	r3, #45	; 0x2d
 800aff6:	4276      	negs	r6, r6
 800aff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800affc:	485e      	ldr	r0, [pc, #376]	; (800b178 <_printf_i+0x244>)
 800affe:	230a      	movs	r3, #10
 800b000:	e019      	b.n	800b036 <_printf_i+0x102>
 800b002:	680e      	ldr	r6, [r1, #0]
 800b004:	602b      	str	r3, [r5, #0]
 800b006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b00a:	bf18      	it	ne
 800b00c:	b236      	sxthne	r6, r6
 800b00e:	e7ef      	b.n	800aff0 <_printf_i+0xbc>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	6820      	ldr	r0, [r4, #0]
 800b014:	1d19      	adds	r1, r3, #4
 800b016:	6029      	str	r1, [r5, #0]
 800b018:	0601      	lsls	r1, r0, #24
 800b01a:	d501      	bpl.n	800b020 <_printf_i+0xec>
 800b01c:	681e      	ldr	r6, [r3, #0]
 800b01e:	e002      	b.n	800b026 <_printf_i+0xf2>
 800b020:	0646      	lsls	r6, r0, #25
 800b022:	d5fb      	bpl.n	800b01c <_printf_i+0xe8>
 800b024:	881e      	ldrh	r6, [r3, #0]
 800b026:	4854      	ldr	r0, [pc, #336]	; (800b178 <_printf_i+0x244>)
 800b028:	2f6f      	cmp	r7, #111	; 0x6f
 800b02a:	bf0c      	ite	eq
 800b02c:	2308      	moveq	r3, #8
 800b02e:	230a      	movne	r3, #10
 800b030:	2100      	movs	r1, #0
 800b032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b036:	6865      	ldr	r5, [r4, #4]
 800b038:	60a5      	str	r5, [r4, #8]
 800b03a:	2d00      	cmp	r5, #0
 800b03c:	bfa2      	ittt	ge
 800b03e:	6821      	ldrge	r1, [r4, #0]
 800b040:	f021 0104 	bicge.w	r1, r1, #4
 800b044:	6021      	strge	r1, [r4, #0]
 800b046:	b90e      	cbnz	r6, 800b04c <_printf_i+0x118>
 800b048:	2d00      	cmp	r5, #0
 800b04a:	d04d      	beq.n	800b0e8 <_printf_i+0x1b4>
 800b04c:	4615      	mov	r5, r2
 800b04e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b052:	fb03 6711 	mls	r7, r3, r1, r6
 800b056:	5dc7      	ldrb	r7, [r0, r7]
 800b058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b05c:	4637      	mov	r7, r6
 800b05e:	42bb      	cmp	r3, r7
 800b060:	460e      	mov	r6, r1
 800b062:	d9f4      	bls.n	800b04e <_printf_i+0x11a>
 800b064:	2b08      	cmp	r3, #8
 800b066:	d10b      	bne.n	800b080 <_printf_i+0x14c>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	07de      	lsls	r6, r3, #31
 800b06c:	d508      	bpl.n	800b080 <_printf_i+0x14c>
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	6861      	ldr	r1, [r4, #4]
 800b072:	4299      	cmp	r1, r3
 800b074:	bfde      	ittt	le
 800b076:	2330      	movle	r3, #48	; 0x30
 800b078:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b07c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b080:	1b52      	subs	r2, r2, r5
 800b082:	6122      	str	r2, [r4, #16]
 800b084:	f8cd a000 	str.w	sl, [sp]
 800b088:	464b      	mov	r3, r9
 800b08a:	aa03      	add	r2, sp, #12
 800b08c:	4621      	mov	r1, r4
 800b08e:	4640      	mov	r0, r8
 800b090:	f7ff fee2 	bl	800ae58 <_printf_common>
 800b094:	3001      	adds	r0, #1
 800b096:	d14c      	bne.n	800b132 <_printf_i+0x1fe>
 800b098:	f04f 30ff 	mov.w	r0, #4294967295
 800b09c:	b004      	add	sp, #16
 800b09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a2:	4835      	ldr	r0, [pc, #212]	; (800b178 <_printf_i+0x244>)
 800b0a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0a8:	6829      	ldr	r1, [r5, #0]
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0b0:	6029      	str	r1, [r5, #0]
 800b0b2:	061d      	lsls	r5, r3, #24
 800b0b4:	d514      	bpl.n	800b0e0 <_printf_i+0x1ac>
 800b0b6:	07df      	lsls	r7, r3, #31
 800b0b8:	bf44      	itt	mi
 800b0ba:	f043 0320 	orrmi.w	r3, r3, #32
 800b0be:	6023      	strmi	r3, [r4, #0]
 800b0c0:	b91e      	cbnz	r6, 800b0ca <_printf_i+0x196>
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	f023 0320 	bic.w	r3, r3, #32
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	2310      	movs	r3, #16
 800b0cc:	e7b0      	b.n	800b030 <_printf_i+0xfc>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	f043 0320 	orr.w	r3, r3, #32
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	2378      	movs	r3, #120	; 0x78
 800b0d8:	4828      	ldr	r0, [pc, #160]	; (800b17c <_printf_i+0x248>)
 800b0da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0de:	e7e3      	b.n	800b0a8 <_printf_i+0x174>
 800b0e0:	0659      	lsls	r1, r3, #25
 800b0e2:	bf48      	it	mi
 800b0e4:	b2b6      	uxthmi	r6, r6
 800b0e6:	e7e6      	b.n	800b0b6 <_printf_i+0x182>
 800b0e8:	4615      	mov	r5, r2
 800b0ea:	e7bb      	b.n	800b064 <_printf_i+0x130>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	6826      	ldr	r6, [r4, #0]
 800b0f0:	6961      	ldr	r1, [r4, #20]
 800b0f2:	1d18      	adds	r0, r3, #4
 800b0f4:	6028      	str	r0, [r5, #0]
 800b0f6:	0635      	lsls	r5, r6, #24
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	d501      	bpl.n	800b100 <_printf_i+0x1cc>
 800b0fc:	6019      	str	r1, [r3, #0]
 800b0fe:	e002      	b.n	800b106 <_printf_i+0x1d2>
 800b100:	0670      	lsls	r0, r6, #25
 800b102:	d5fb      	bpl.n	800b0fc <_printf_i+0x1c8>
 800b104:	8019      	strh	r1, [r3, #0]
 800b106:	2300      	movs	r3, #0
 800b108:	6123      	str	r3, [r4, #16]
 800b10a:	4615      	mov	r5, r2
 800b10c:	e7ba      	b.n	800b084 <_printf_i+0x150>
 800b10e:	682b      	ldr	r3, [r5, #0]
 800b110:	1d1a      	adds	r2, r3, #4
 800b112:	602a      	str	r2, [r5, #0]
 800b114:	681d      	ldr	r5, [r3, #0]
 800b116:	6862      	ldr	r2, [r4, #4]
 800b118:	2100      	movs	r1, #0
 800b11a:	4628      	mov	r0, r5
 800b11c:	f7f5 f860 	bl	80001e0 <memchr>
 800b120:	b108      	cbz	r0, 800b126 <_printf_i+0x1f2>
 800b122:	1b40      	subs	r0, r0, r5
 800b124:	6060      	str	r0, [r4, #4]
 800b126:	6863      	ldr	r3, [r4, #4]
 800b128:	6123      	str	r3, [r4, #16]
 800b12a:	2300      	movs	r3, #0
 800b12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b130:	e7a8      	b.n	800b084 <_printf_i+0x150>
 800b132:	6923      	ldr	r3, [r4, #16]
 800b134:	462a      	mov	r2, r5
 800b136:	4649      	mov	r1, r9
 800b138:	4640      	mov	r0, r8
 800b13a:	47d0      	blx	sl
 800b13c:	3001      	adds	r0, #1
 800b13e:	d0ab      	beq.n	800b098 <_printf_i+0x164>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	079b      	lsls	r3, r3, #30
 800b144:	d413      	bmi.n	800b16e <_printf_i+0x23a>
 800b146:	68e0      	ldr	r0, [r4, #12]
 800b148:	9b03      	ldr	r3, [sp, #12]
 800b14a:	4298      	cmp	r0, r3
 800b14c:	bfb8      	it	lt
 800b14e:	4618      	movlt	r0, r3
 800b150:	e7a4      	b.n	800b09c <_printf_i+0x168>
 800b152:	2301      	movs	r3, #1
 800b154:	4632      	mov	r2, r6
 800b156:	4649      	mov	r1, r9
 800b158:	4640      	mov	r0, r8
 800b15a:	47d0      	blx	sl
 800b15c:	3001      	adds	r0, #1
 800b15e:	d09b      	beq.n	800b098 <_printf_i+0x164>
 800b160:	3501      	adds	r5, #1
 800b162:	68e3      	ldr	r3, [r4, #12]
 800b164:	9903      	ldr	r1, [sp, #12]
 800b166:	1a5b      	subs	r3, r3, r1
 800b168:	42ab      	cmp	r3, r5
 800b16a:	dcf2      	bgt.n	800b152 <_printf_i+0x21e>
 800b16c:	e7eb      	b.n	800b146 <_printf_i+0x212>
 800b16e:	2500      	movs	r5, #0
 800b170:	f104 0619 	add.w	r6, r4, #25
 800b174:	e7f5      	b.n	800b162 <_printf_i+0x22e>
 800b176:	bf00      	nop
 800b178:	0800f476 	.word	0x0800f476
 800b17c:	0800f487 	.word	0x0800f487

0800b180 <_scanf_float>:
 800b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b184:	b087      	sub	sp, #28
 800b186:	4617      	mov	r7, r2
 800b188:	9303      	str	r3, [sp, #12]
 800b18a:	688b      	ldr	r3, [r1, #8]
 800b18c:	1e5a      	subs	r2, r3, #1
 800b18e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b192:	bf83      	ittte	hi
 800b194:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b198:	195b      	addhi	r3, r3, r5
 800b19a:	9302      	strhi	r3, [sp, #8]
 800b19c:	2300      	movls	r3, #0
 800b19e:	bf86      	itte	hi
 800b1a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b1a4:	608b      	strhi	r3, [r1, #8]
 800b1a6:	9302      	strls	r3, [sp, #8]
 800b1a8:	680b      	ldr	r3, [r1, #0]
 800b1aa:	468b      	mov	fp, r1
 800b1ac:	2500      	movs	r5, #0
 800b1ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b1b2:	f84b 3b1c 	str.w	r3, [fp], #28
 800b1b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b1ba:	4680      	mov	r8, r0
 800b1bc:	460c      	mov	r4, r1
 800b1be:	465e      	mov	r6, fp
 800b1c0:	46aa      	mov	sl, r5
 800b1c2:	46a9      	mov	r9, r5
 800b1c4:	9501      	str	r5, [sp, #4]
 800b1c6:	68a2      	ldr	r2, [r4, #8]
 800b1c8:	b152      	cbz	r2, 800b1e0 <_scanf_float+0x60>
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b4e      	cmp	r3, #78	; 0x4e
 800b1d0:	d864      	bhi.n	800b29c <_scanf_float+0x11c>
 800b1d2:	2b40      	cmp	r3, #64	; 0x40
 800b1d4:	d83c      	bhi.n	800b250 <_scanf_float+0xd0>
 800b1d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b1da:	b2c8      	uxtb	r0, r1
 800b1dc:	280e      	cmp	r0, #14
 800b1de:	d93a      	bls.n	800b256 <_scanf_float+0xd6>
 800b1e0:	f1b9 0f00 	cmp.w	r9, #0
 800b1e4:	d003      	beq.n	800b1ee <_scanf_float+0x6e>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1f2:	f1ba 0f01 	cmp.w	sl, #1
 800b1f6:	f200 8113 	bhi.w	800b420 <_scanf_float+0x2a0>
 800b1fa:	455e      	cmp	r6, fp
 800b1fc:	f200 8105 	bhi.w	800b40a <_scanf_float+0x28a>
 800b200:	2501      	movs	r5, #1
 800b202:	4628      	mov	r0, r5
 800b204:	b007      	add	sp, #28
 800b206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b20e:	2a0d      	cmp	r2, #13
 800b210:	d8e6      	bhi.n	800b1e0 <_scanf_float+0x60>
 800b212:	a101      	add	r1, pc, #4	; (adr r1, 800b218 <_scanf_float+0x98>)
 800b214:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b218:	0800b357 	.word	0x0800b357
 800b21c:	0800b1e1 	.word	0x0800b1e1
 800b220:	0800b1e1 	.word	0x0800b1e1
 800b224:	0800b1e1 	.word	0x0800b1e1
 800b228:	0800b3b7 	.word	0x0800b3b7
 800b22c:	0800b38f 	.word	0x0800b38f
 800b230:	0800b1e1 	.word	0x0800b1e1
 800b234:	0800b1e1 	.word	0x0800b1e1
 800b238:	0800b365 	.word	0x0800b365
 800b23c:	0800b1e1 	.word	0x0800b1e1
 800b240:	0800b1e1 	.word	0x0800b1e1
 800b244:	0800b1e1 	.word	0x0800b1e1
 800b248:	0800b1e1 	.word	0x0800b1e1
 800b24c:	0800b31d 	.word	0x0800b31d
 800b250:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b254:	e7db      	b.n	800b20e <_scanf_float+0x8e>
 800b256:	290e      	cmp	r1, #14
 800b258:	d8c2      	bhi.n	800b1e0 <_scanf_float+0x60>
 800b25a:	a001      	add	r0, pc, #4	; (adr r0, 800b260 <_scanf_float+0xe0>)
 800b25c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b260:	0800b30f 	.word	0x0800b30f
 800b264:	0800b1e1 	.word	0x0800b1e1
 800b268:	0800b30f 	.word	0x0800b30f
 800b26c:	0800b3a3 	.word	0x0800b3a3
 800b270:	0800b1e1 	.word	0x0800b1e1
 800b274:	0800b2bd 	.word	0x0800b2bd
 800b278:	0800b2f9 	.word	0x0800b2f9
 800b27c:	0800b2f9 	.word	0x0800b2f9
 800b280:	0800b2f9 	.word	0x0800b2f9
 800b284:	0800b2f9 	.word	0x0800b2f9
 800b288:	0800b2f9 	.word	0x0800b2f9
 800b28c:	0800b2f9 	.word	0x0800b2f9
 800b290:	0800b2f9 	.word	0x0800b2f9
 800b294:	0800b2f9 	.word	0x0800b2f9
 800b298:	0800b2f9 	.word	0x0800b2f9
 800b29c:	2b6e      	cmp	r3, #110	; 0x6e
 800b29e:	d809      	bhi.n	800b2b4 <_scanf_float+0x134>
 800b2a0:	2b60      	cmp	r3, #96	; 0x60
 800b2a2:	d8b2      	bhi.n	800b20a <_scanf_float+0x8a>
 800b2a4:	2b54      	cmp	r3, #84	; 0x54
 800b2a6:	d077      	beq.n	800b398 <_scanf_float+0x218>
 800b2a8:	2b59      	cmp	r3, #89	; 0x59
 800b2aa:	d199      	bne.n	800b1e0 <_scanf_float+0x60>
 800b2ac:	2d07      	cmp	r5, #7
 800b2ae:	d197      	bne.n	800b1e0 <_scanf_float+0x60>
 800b2b0:	2508      	movs	r5, #8
 800b2b2:	e029      	b.n	800b308 <_scanf_float+0x188>
 800b2b4:	2b74      	cmp	r3, #116	; 0x74
 800b2b6:	d06f      	beq.n	800b398 <_scanf_float+0x218>
 800b2b8:	2b79      	cmp	r3, #121	; 0x79
 800b2ba:	e7f6      	b.n	800b2aa <_scanf_float+0x12a>
 800b2bc:	6821      	ldr	r1, [r4, #0]
 800b2be:	05c8      	lsls	r0, r1, #23
 800b2c0:	d51a      	bpl.n	800b2f8 <_scanf_float+0x178>
 800b2c2:	9b02      	ldr	r3, [sp, #8]
 800b2c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b2c8:	6021      	str	r1, [r4, #0]
 800b2ca:	f109 0901 	add.w	r9, r9, #1
 800b2ce:	b11b      	cbz	r3, 800b2d8 <_scanf_float+0x158>
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	3201      	adds	r2, #1
 800b2d4:	9302      	str	r3, [sp, #8]
 800b2d6:	60a2      	str	r2, [r4, #8]
 800b2d8:	68a3      	ldr	r3, [r4, #8]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	60a3      	str	r3, [r4, #8]
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	607b      	str	r3, [r7, #4]
 800b2ec:	f340 8084 	ble.w	800b3f8 <_scanf_float+0x278>
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	603b      	str	r3, [r7, #0]
 800b2f6:	e766      	b.n	800b1c6 <_scanf_float+0x46>
 800b2f8:	eb1a 0f05 	cmn.w	sl, r5
 800b2fc:	f47f af70 	bne.w	800b1e0 <_scanf_float+0x60>
 800b300:	6822      	ldr	r2, [r4, #0]
 800b302:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b306:	6022      	str	r2, [r4, #0]
 800b308:	f806 3b01 	strb.w	r3, [r6], #1
 800b30c:	e7e4      	b.n	800b2d8 <_scanf_float+0x158>
 800b30e:	6822      	ldr	r2, [r4, #0]
 800b310:	0610      	lsls	r0, r2, #24
 800b312:	f57f af65 	bpl.w	800b1e0 <_scanf_float+0x60>
 800b316:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b31a:	e7f4      	b.n	800b306 <_scanf_float+0x186>
 800b31c:	f1ba 0f00 	cmp.w	sl, #0
 800b320:	d10e      	bne.n	800b340 <_scanf_float+0x1c0>
 800b322:	f1b9 0f00 	cmp.w	r9, #0
 800b326:	d10e      	bne.n	800b346 <_scanf_float+0x1c6>
 800b328:	6822      	ldr	r2, [r4, #0]
 800b32a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b32e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b332:	d108      	bne.n	800b346 <_scanf_float+0x1c6>
 800b334:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b338:	6022      	str	r2, [r4, #0]
 800b33a:	f04f 0a01 	mov.w	sl, #1
 800b33e:	e7e3      	b.n	800b308 <_scanf_float+0x188>
 800b340:	f1ba 0f02 	cmp.w	sl, #2
 800b344:	d055      	beq.n	800b3f2 <_scanf_float+0x272>
 800b346:	2d01      	cmp	r5, #1
 800b348:	d002      	beq.n	800b350 <_scanf_float+0x1d0>
 800b34a:	2d04      	cmp	r5, #4
 800b34c:	f47f af48 	bne.w	800b1e0 <_scanf_float+0x60>
 800b350:	3501      	adds	r5, #1
 800b352:	b2ed      	uxtb	r5, r5
 800b354:	e7d8      	b.n	800b308 <_scanf_float+0x188>
 800b356:	f1ba 0f01 	cmp.w	sl, #1
 800b35a:	f47f af41 	bne.w	800b1e0 <_scanf_float+0x60>
 800b35e:	f04f 0a02 	mov.w	sl, #2
 800b362:	e7d1      	b.n	800b308 <_scanf_float+0x188>
 800b364:	b97d      	cbnz	r5, 800b386 <_scanf_float+0x206>
 800b366:	f1b9 0f00 	cmp.w	r9, #0
 800b36a:	f47f af3c 	bne.w	800b1e6 <_scanf_float+0x66>
 800b36e:	6822      	ldr	r2, [r4, #0]
 800b370:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b374:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b378:	f47f af39 	bne.w	800b1ee <_scanf_float+0x6e>
 800b37c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b380:	6022      	str	r2, [r4, #0]
 800b382:	2501      	movs	r5, #1
 800b384:	e7c0      	b.n	800b308 <_scanf_float+0x188>
 800b386:	2d03      	cmp	r5, #3
 800b388:	d0e2      	beq.n	800b350 <_scanf_float+0x1d0>
 800b38a:	2d05      	cmp	r5, #5
 800b38c:	e7de      	b.n	800b34c <_scanf_float+0x1cc>
 800b38e:	2d02      	cmp	r5, #2
 800b390:	f47f af26 	bne.w	800b1e0 <_scanf_float+0x60>
 800b394:	2503      	movs	r5, #3
 800b396:	e7b7      	b.n	800b308 <_scanf_float+0x188>
 800b398:	2d06      	cmp	r5, #6
 800b39a:	f47f af21 	bne.w	800b1e0 <_scanf_float+0x60>
 800b39e:	2507      	movs	r5, #7
 800b3a0:	e7b2      	b.n	800b308 <_scanf_float+0x188>
 800b3a2:	6822      	ldr	r2, [r4, #0]
 800b3a4:	0591      	lsls	r1, r2, #22
 800b3a6:	f57f af1b 	bpl.w	800b1e0 <_scanf_float+0x60>
 800b3aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b3ae:	6022      	str	r2, [r4, #0]
 800b3b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3b4:	e7a8      	b.n	800b308 <_scanf_float+0x188>
 800b3b6:	6822      	ldr	r2, [r4, #0]
 800b3b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b3bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b3c0:	d006      	beq.n	800b3d0 <_scanf_float+0x250>
 800b3c2:	0550      	lsls	r0, r2, #21
 800b3c4:	f57f af0c 	bpl.w	800b1e0 <_scanf_float+0x60>
 800b3c8:	f1b9 0f00 	cmp.w	r9, #0
 800b3cc:	f43f af0f 	beq.w	800b1ee <_scanf_float+0x6e>
 800b3d0:	0591      	lsls	r1, r2, #22
 800b3d2:	bf58      	it	pl
 800b3d4:	9901      	ldrpl	r1, [sp, #4]
 800b3d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b3da:	bf58      	it	pl
 800b3dc:	eba9 0101 	subpl.w	r1, r9, r1
 800b3e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b3e4:	bf58      	it	pl
 800b3e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b3ea:	6022      	str	r2, [r4, #0]
 800b3ec:	f04f 0900 	mov.w	r9, #0
 800b3f0:	e78a      	b.n	800b308 <_scanf_float+0x188>
 800b3f2:	f04f 0a03 	mov.w	sl, #3
 800b3f6:	e787      	b.n	800b308 <_scanf_float+0x188>
 800b3f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	4640      	mov	r0, r8
 800b400:	4798      	blx	r3
 800b402:	2800      	cmp	r0, #0
 800b404:	f43f aedf 	beq.w	800b1c6 <_scanf_float+0x46>
 800b408:	e6ea      	b.n	800b1e0 <_scanf_float+0x60>
 800b40a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b40e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b412:	463a      	mov	r2, r7
 800b414:	4640      	mov	r0, r8
 800b416:	4798      	blx	r3
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	6123      	str	r3, [r4, #16]
 800b41e:	e6ec      	b.n	800b1fa <_scanf_float+0x7a>
 800b420:	1e6b      	subs	r3, r5, #1
 800b422:	2b06      	cmp	r3, #6
 800b424:	d825      	bhi.n	800b472 <_scanf_float+0x2f2>
 800b426:	2d02      	cmp	r5, #2
 800b428:	d836      	bhi.n	800b498 <_scanf_float+0x318>
 800b42a:	455e      	cmp	r6, fp
 800b42c:	f67f aee8 	bls.w	800b200 <_scanf_float+0x80>
 800b430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b434:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b438:	463a      	mov	r2, r7
 800b43a:	4640      	mov	r0, r8
 800b43c:	4798      	blx	r3
 800b43e:	6923      	ldr	r3, [r4, #16]
 800b440:	3b01      	subs	r3, #1
 800b442:	6123      	str	r3, [r4, #16]
 800b444:	e7f1      	b.n	800b42a <_scanf_float+0x2aa>
 800b446:	9802      	ldr	r0, [sp, #8]
 800b448:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b44c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b450:	9002      	str	r0, [sp, #8]
 800b452:	463a      	mov	r2, r7
 800b454:	4640      	mov	r0, r8
 800b456:	4798      	blx	r3
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	6123      	str	r3, [r4, #16]
 800b45e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b462:	fa5f fa8a 	uxtb.w	sl, sl
 800b466:	f1ba 0f02 	cmp.w	sl, #2
 800b46a:	d1ec      	bne.n	800b446 <_scanf_float+0x2c6>
 800b46c:	3d03      	subs	r5, #3
 800b46e:	b2ed      	uxtb	r5, r5
 800b470:	1b76      	subs	r6, r6, r5
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	05da      	lsls	r2, r3, #23
 800b476:	d52f      	bpl.n	800b4d8 <_scanf_float+0x358>
 800b478:	055b      	lsls	r3, r3, #21
 800b47a:	d510      	bpl.n	800b49e <_scanf_float+0x31e>
 800b47c:	455e      	cmp	r6, fp
 800b47e:	f67f aebf 	bls.w	800b200 <_scanf_float+0x80>
 800b482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b48a:	463a      	mov	r2, r7
 800b48c:	4640      	mov	r0, r8
 800b48e:	4798      	blx	r3
 800b490:	6923      	ldr	r3, [r4, #16]
 800b492:	3b01      	subs	r3, #1
 800b494:	6123      	str	r3, [r4, #16]
 800b496:	e7f1      	b.n	800b47c <_scanf_float+0x2fc>
 800b498:	46aa      	mov	sl, r5
 800b49a:	9602      	str	r6, [sp, #8]
 800b49c:	e7df      	b.n	800b45e <_scanf_float+0x2de>
 800b49e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	2965      	cmp	r1, #101	; 0x65
 800b4a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4aa:	f106 35ff 	add.w	r5, r6, #4294967295
 800b4ae:	6123      	str	r3, [r4, #16]
 800b4b0:	d00c      	beq.n	800b4cc <_scanf_float+0x34c>
 800b4b2:	2945      	cmp	r1, #69	; 0x45
 800b4b4:	d00a      	beq.n	800b4cc <_scanf_float+0x34c>
 800b4b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4ba:	463a      	mov	r2, r7
 800b4bc:	4640      	mov	r0, r8
 800b4be:	4798      	blx	r3
 800b4c0:	6923      	ldr	r3, [r4, #16]
 800b4c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	1eb5      	subs	r5, r6, #2
 800b4ca:	6123      	str	r3, [r4, #16]
 800b4cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4d0:	463a      	mov	r2, r7
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	4798      	blx	r3
 800b4d6:	462e      	mov	r6, r5
 800b4d8:	6825      	ldr	r5, [r4, #0]
 800b4da:	f015 0510 	ands.w	r5, r5, #16
 800b4de:	d159      	bne.n	800b594 <_scanf_float+0x414>
 800b4e0:	7035      	strb	r5, [r6, #0]
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b4e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4ec:	d11b      	bne.n	800b526 <_scanf_float+0x3a6>
 800b4ee:	9b01      	ldr	r3, [sp, #4]
 800b4f0:	454b      	cmp	r3, r9
 800b4f2:	eba3 0209 	sub.w	r2, r3, r9
 800b4f6:	d123      	bne.n	800b540 <_scanf_float+0x3c0>
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4659      	mov	r1, fp
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	f000 fea9 	bl	800c254 <_strtod_r>
 800b502:	6822      	ldr	r2, [r4, #0]
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	f012 0f02 	tst.w	r2, #2
 800b50a:	ec57 6b10 	vmov	r6, r7, d0
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	d021      	beq.n	800b556 <_scanf_float+0x3d6>
 800b512:	9903      	ldr	r1, [sp, #12]
 800b514:	1d1a      	adds	r2, r3, #4
 800b516:	600a      	str	r2, [r1, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	e9c3 6700 	strd	r6, r7, [r3]
 800b51e:	68e3      	ldr	r3, [r4, #12]
 800b520:	3301      	adds	r3, #1
 800b522:	60e3      	str	r3, [r4, #12]
 800b524:	e66d      	b.n	800b202 <_scanf_float+0x82>
 800b526:	9b04      	ldr	r3, [sp, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d0e5      	beq.n	800b4f8 <_scanf_float+0x378>
 800b52c:	9905      	ldr	r1, [sp, #20]
 800b52e:	230a      	movs	r3, #10
 800b530:	462a      	mov	r2, r5
 800b532:	3101      	adds	r1, #1
 800b534:	4640      	mov	r0, r8
 800b536:	f000 ff15 	bl	800c364 <_strtol_r>
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	9e05      	ldr	r6, [sp, #20]
 800b53e:	1ac2      	subs	r2, r0, r3
 800b540:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b544:	429e      	cmp	r6, r3
 800b546:	bf28      	it	cs
 800b548:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b54c:	4912      	ldr	r1, [pc, #72]	; (800b598 <_scanf_float+0x418>)
 800b54e:	4630      	mov	r0, r6
 800b550:	f000 f82c 	bl	800b5ac <siprintf>
 800b554:	e7d0      	b.n	800b4f8 <_scanf_float+0x378>
 800b556:	9903      	ldr	r1, [sp, #12]
 800b558:	f012 0f04 	tst.w	r2, #4
 800b55c:	f103 0204 	add.w	r2, r3, #4
 800b560:	600a      	str	r2, [r1, #0]
 800b562:	d1d9      	bne.n	800b518 <_scanf_float+0x398>
 800b564:	f8d3 8000 	ldr.w	r8, [r3]
 800b568:	ee10 2a10 	vmov	r2, s0
 800b56c:	ee10 0a10 	vmov	r0, s0
 800b570:	463b      	mov	r3, r7
 800b572:	4639      	mov	r1, r7
 800b574:	f7f5 fada 	bl	8000b2c <__aeabi_dcmpun>
 800b578:	b128      	cbz	r0, 800b586 <_scanf_float+0x406>
 800b57a:	4808      	ldr	r0, [pc, #32]	; (800b59c <_scanf_float+0x41c>)
 800b57c:	f000 f810 	bl	800b5a0 <nanf>
 800b580:	ed88 0a00 	vstr	s0, [r8]
 800b584:	e7cb      	b.n	800b51e <_scanf_float+0x39e>
 800b586:	4630      	mov	r0, r6
 800b588:	4639      	mov	r1, r7
 800b58a:	f7f5 fb2d 	bl	8000be8 <__aeabi_d2f>
 800b58e:	f8c8 0000 	str.w	r0, [r8]
 800b592:	e7c4      	b.n	800b51e <_scanf_float+0x39e>
 800b594:	2500      	movs	r5, #0
 800b596:	e634      	b.n	800b202 <_scanf_float+0x82>
 800b598:	0800f498 	.word	0x0800f498
 800b59c:	0800f52b 	.word	0x0800f52b

0800b5a0 <nanf>:
 800b5a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b5a8 <nanf+0x8>
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	7fc00000 	.word	0x7fc00000

0800b5ac <siprintf>:
 800b5ac:	b40e      	push	{r1, r2, r3}
 800b5ae:	b500      	push	{lr}
 800b5b0:	b09c      	sub	sp, #112	; 0x70
 800b5b2:	ab1d      	add	r3, sp, #116	; 0x74
 800b5b4:	9002      	str	r0, [sp, #8]
 800b5b6:	9006      	str	r0, [sp, #24]
 800b5b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5bc:	4809      	ldr	r0, [pc, #36]	; (800b5e4 <siprintf+0x38>)
 800b5be:	9107      	str	r1, [sp, #28]
 800b5c0:	9104      	str	r1, [sp, #16]
 800b5c2:	4909      	ldr	r1, [pc, #36]	; (800b5e8 <siprintf+0x3c>)
 800b5c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c8:	9105      	str	r1, [sp, #20]
 800b5ca:	6800      	ldr	r0, [r0, #0]
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	a902      	add	r1, sp, #8
 800b5d0:	f003 f810 	bl	800e5f4 <_svfiprintf_r>
 800b5d4:	9b02      	ldr	r3, [sp, #8]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
 800b5da:	b01c      	add	sp, #112	; 0x70
 800b5dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e0:	b003      	add	sp, #12
 800b5e2:	4770      	bx	lr
 800b5e4:	20000010 	.word	0x20000010
 800b5e8:	ffff0208 	.word	0xffff0208

0800b5ec <strcat>:
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	7814      	ldrb	r4, [r2, #0]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	3201      	adds	r2, #1
 800b5f6:	2c00      	cmp	r4, #0
 800b5f8:	d1fa      	bne.n	800b5f0 <strcat+0x4>
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b600:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b604:	2a00      	cmp	r2, #0
 800b606:	d1f9      	bne.n	800b5fc <strcat+0x10>
 800b608:	bd10      	pop	{r4, pc}

0800b60a <sulp>:
 800b60a:	b570      	push	{r4, r5, r6, lr}
 800b60c:	4604      	mov	r4, r0
 800b60e:	460d      	mov	r5, r1
 800b610:	ec45 4b10 	vmov	d0, r4, r5
 800b614:	4616      	mov	r6, r2
 800b616:	f002 fd4b 	bl	800e0b0 <__ulp>
 800b61a:	ec51 0b10 	vmov	r0, r1, d0
 800b61e:	b17e      	cbz	r6, 800b640 <sulp+0x36>
 800b620:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b624:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b628:	2b00      	cmp	r3, #0
 800b62a:	dd09      	ble.n	800b640 <sulp+0x36>
 800b62c:	051b      	lsls	r3, r3, #20
 800b62e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b632:	2400      	movs	r4, #0
 800b634:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b638:	4622      	mov	r2, r4
 800b63a:	462b      	mov	r3, r5
 800b63c:	f7f4 ffdc 	bl	80005f8 <__aeabi_dmul>
 800b640:	bd70      	pop	{r4, r5, r6, pc}
 800b642:	0000      	movs	r0, r0
 800b644:	0000      	movs	r0, r0
	...

0800b648 <_strtod_l>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	ed2d 8b02 	vpush	{d8}
 800b650:	b09d      	sub	sp, #116	; 0x74
 800b652:	461f      	mov	r7, r3
 800b654:	2300      	movs	r3, #0
 800b656:	9318      	str	r3, [sp, #96]	; 0x60
 800b658:	4ba2      	ldr	r3, [pc, #648]	; (800b8e4 <_strtod_l+0x29c>)
 800b65a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	9305      	str	r3, [sp, #20]
 800b660:	4604      	mov	r4, r0
 800b662:	4618      	mov	r0, r3
 800b664:	4688      	mov	r8, r1
 800b666:	f7f4 fdb3 	bl	80001d0 <strlen>
 800b66a:	f04f 0a00 	mov.w	sl, #0
 800b66e:	4605      	mov	r5, r0
 800b670:	f04f 0b00 	mov.w	fp, #0
 800b674:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b678:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b67a:	781a      	ldrb	r2, [r3, #0]
 800b67c:	2a2b      	cmp	r2, #43	; 0x2b
 800b67e:	d04e      	beq.n	800b71e <_strtod_l+0xd6>
 800b680:	d83b      	bhi.n	800b6fa <_strtod_l+0xb2>
 800b682:	2a0d      	cmp	r2, #13
 800b684:	d834      	bhi.n	800b6f0 <_strtod_l+0xa8>
 800b686:	2a08      	cmp	r2, #8
 800b688:	d834      	bhi.n	800b6f4 <_strtod_l+0xac>
 800b68a:	2a00      	cmp	r2, #0
 800b68c:	d03e      	beq.n	800b70c <_strtod_l+0xc4>
 800b68e:	2300      	movs	r3, #0
 800b690:	930a      	str	r3, [sp, #40]	; 0x28
 800b692:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b694:	7833      	ldrb	r3, [r6, #0]
 800b696:	2b30      	cmp	r3, #48	; 0x30
 800b698:	f040 80b0 	bne.w	800b7fc <_strtod_l+0x1b4>
 800b69c:	7873      	ldrb	r3, [r6, #1]
 800b69e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6a2:	2b58      	cmp	r3, #88	; 0x58
 800b6a4:	d168      	bne.n	800b778 <_strtod_l+0x130>
 800b6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	ab18      	add	r3, sp, #96	; 0x60
 800b6ac:	9702      	str	r7, [sp, #8]
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	4a8d      	ldr	r2, [pc, #564]	; (800b8e8 <_strtod_l+0x2a0>)
 800b6b2:	ab19      	add	r3, sp, #100	; 0x64
 800b6b4:	a917      	add	r1, sp, #92	; 0x5c
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f001 fe5e 	bl	800d378 <__gethex>
 800b6bc:	f010 0707 	ands.w	r7, r0, #7
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	d005      	beq.n	800b6d0 <_strtod_l+0x88>
 800b6c4:	2f06      	cmp	r7, #6
 800b6c6:	d12c      	bne.n	800b722 <_strtod_l+0xda>
 800b6c8:	3601      	adds	r6, #1
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800b6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b6d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 8590 	bne.w	800c1f8 <_strtod_l+0xbb0>
 800b6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6da:	b1eb      	cbz	r3, 800b718 <_strtod_l+0xd0>
 800b6dc:	4652      	mov	r2, sl
 800b6de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6e2:	ec43 2b10 	vmov	d0, r2, r3
 800b6e6:	b01d      	add	sp, #116	; 0x74
 800b6e8:	ecbd 8b02 	vpop	{d8}
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	2a20      	cmp	r2, #32
 800b6f2:	d1cc      	bne.n	800b68e <_strtod_l+0x46>
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b6f8:	e7be      	b.n	800b678 <_strtod_l+0x30>
 800b6fa:	2a2d      	cmp	r2, #45	; 0x2d
 800b6fc:	d1c7      	bne.n	800b68e <_strtod_l+0x46>
 800b6fe:	2201      	movs	r2, #1
 800b700:	920a      	str	r2, [sp, #40]	; 0x28
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	9217      	str	r2, [sp, #92]	; 0x5c
 800b706:	785b      	ldrb	r3, [r3, #1]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1c2      	bne.n	800b692 <_strtod_l+0x4a>
 800b70c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b70e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b712:	2b00      	cmp	r3, #0
 800b714:	f040 856e 	bne.w	800c1f4 <_strtod_l+0xbac>
 800b718:	4652      	mov	r2, sl
 800b71a:	465b      	mov	r3, fp
 800b71c:	e7e1      	b.n	800b6e2 <_strtod_l+0x9a>
 800b71e:	2200      	movs	r2, #0
 800b720:	e7ee      	b.n	800b700 <_strtod_l+0xb8>
 800b722:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b724:	b13a      	cbz	r2, 800b736 <_strtod_l+0xee>
 800b726:	2135      	movs	r1, #53	; 0x35
 800b728:	a81a      	add	r0, sp, #104	; 0x68
 800b72a:	f002 fdcc 	bl	800e2c6 <__copybits>
 800b72e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b730:	4620      	mov	r0, r4
 800b732:	f002 f98b 	bl	800da4c <_Bfree>
 800b736:	3f01      	subs	r7, #1
 800b738:	2f04      	cmp	r7, #4
 800b73a:	d806      	bhi.n	800b74a <_strtod_l+0x102>
 800b73c:	e8df f007 	tbb	[pc, r7]
 800b740:	1714030a 	.word	0x1714030a
 800b744:	0a          	.byte	0x0a
 800b745:	00          	.byte	0x00
 800b746:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b74a:	0728      	lsls	r0, r5, #28
 800b74c:	d5c0      	bpl.n	800b6d0 <_strtod_l+0x88>
 800b74e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b752:	e7bd      	b.n	800b6d0 <_strtod_l+0x88>
 800b754:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b758:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b75a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b75e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b762:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b766:	e7f0      	b.n	800b74a <_strtod_l+0x102>
 800b768:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b8ec <_strtod_l+0x2a4>
 800b76c:	e7ed      	b.n	800b74a <_strtod_l+0x102>
 800b76e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b772:	f04f 3aff 	mov.w	sl, #4294967295
 800b776:	e7e8      	b.n	800b74a <_strtod_l+0x102>
 800b778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b77e:	785b      	ldrb	r3, [r3, #1]
 800b780:	2b30      	cmp	r3, #48	; 0x30
 800b782:	d0f9      	beq.n	800b778 <_strtod_l+0x130>
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0a3      	beq.n	800b6d0 <_strtod_l+0x88>
 800b788:	2301      	movs	r3, #1
 800b78a:	f04f 0900 	mov.w	r9, #0
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b792:	9308      	str	r3, [sp, #32]
 800b794:	f8cd 901c 	str.w	r9, [sp, #28]
 800b798:	464f      	mov	r7, r9
 800b79a:	220a      	movs	r2, #10
 800b79c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b79e:	7806      	ldrb	r6, [r0, #0]
 800b7a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b7a4:	b2d9      	uxtb	r1, r3
 800b7a6:	2909      	cmp	r1, #9
 800b7a8:	d92a      	bls.n	800b800 <_strtod_l+0x1b8>
 800b7aa:	9905      	ldr	r1, [sp, #20]
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	f003 f9d6 	bl	800eb5e <strncmp>
 800b7b2:	b398      	cbz	r0, 800b81c <_strtod_l+0x1d4>
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	4632      	mov	r2, r6
 800b7b8:	463d      	mov	r5, r7
 800b7ba:	9005      	str	r0, [sp, #20]
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2a65      	cmp	r2, #101	; 0x65
 800b7c0:	d001      	beq.n	800b7c6 <_strtod_l+0x17e>
 800b7c2:	2a45      	cmp	r2, #69	; 0x45
 800b7c4:	d118      	bne.n	800b7f8 <_strtod_l+0x1b0>
 800b7c6:	b91d      	cbnz	r5, 800b7d0 <_strtod_l+0x188>
 800b7c8:	9a04      	ldr	r2, [sp, #16]
 800b7ca:	4302      	orrs	r2, r0
 800b7cc:	d09e      	beq.n	800b70c <_strtod_l+0xc4>
 800b7ce:	2500      	movs	r5, #0
 800b7d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b7d4:	f108 0201 	add.w	r2, r8, #1
 800b7d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b7de:	2a2b      	cmp	r2, #43	; 0x2b
 800b7e0:	d075      	beq.n	800b8ce <_strtod_l+0x286>
 800b7e2:	2a2d      	cmp	r2, #45	; 0x2d
 800b7e4:	d07b      	beq.n	800b8de <_strtod_l+0x296>
 800b7e6:	f04f 0c00 	mov.w	ip, #0
 800b7ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b7ee:	2909      	cmp	r1, #9
 800b7f0:	f240 8082 	bls.w	800b8f8 <_strtod_l+0x2b0>
 800b7f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b7f8:	2600      	movs	r6, #0
 800b7fa:	e09d      	b.n	800b938 <_strtod_l+0x2f0>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e7c4      	b.n	800b78a <_strtod_l+0x142>
 800b800:	2f08      	cmp	r7, #8
 800b802:	bfd8      	it	le
 800b804:	9907      	ldrle	r1, [sp, #28]
 800b806:	f100 0001 	add.w	r0, r0, #1
 800b80a:	bfda      	itte	le
 800b80c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b810:	9307      	strle	r3, [sp, #28]
 800b812:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b816:	3701      	adds	r7, #1
 800b818:	9017      	str	r0, [sp, #92]	; 0x5c
 800b81a:	e7bf      	b.n	800b79c <_strtod_l+0x154>
 800b81c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b81e:	195a      	adds	r2, r3, r5
 800b820:	9217      	str	r2, [sp, #92]	; 0x5c
 800b822:	5d5a      	ldrb	r2, [r3, r5]
 800b824:	2f00      	cmp	r7, #0
 800b826:	d037      	beq.n	800b898 <_strtod_l+0x250>
 800b828:	9005      	str	r0, [sp, #20]
 800b82a:	463d      	mov	r5, r7
 800b82c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b830:	2b09      	cmp	r3, #9
 800b832:	d912      	bls.n	800b85a <_strtod_l+0x212>
 800b834:	2301      	movs	r3, #1
 800b836:	e7c2      	b.n	800b7be <_strtod_l+0x176>
 800b838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b83e:	785a      	ldrb	r2, [r3, #1]
 800b840:	3001      	adds	r0, #1
 800b842:	2a30      	cmp	r2, #48	; 0x30
 800b844:	d0f8      	beq.n	800b838 <_strtod_l+0x1f0>
 800b846:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b84a:	2b08      	cmp	r3, #8
 800b84c:	f200 84d9 	bhi.w	800c202 <_strtod_l+0xbba>
 800b850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b852:	9005      	str	r0, [sp, #20]
 800b854:	2000      	movs	r0, #0
 800b856:	9308      	str	r3, [sp, #32]
 800b858:	4605      	mov	r5, r0
 800b85a:	3a30      	subs	r2, #48	; 0x30
 800b85c:	f100 0301 	add.w	r3, r0, #1
 800b860:	d014      	beq.n	800b88c <_strtod_l+0x244>
 800b862:	9905      	ldr	r1, [sp, #20]
 800b864:	4419      	add	r1, r3
 800b866:	9105      	str	r1, [sp, #20]
 800b868:	462b      	mov	r3, r5
 800b86a:	eb00 0e05 	add.w	lr, r0, r5
 800b86e:	210a      	movs	r1, #10
 800b870:	4573      	cmp	r3, lr
 800b872:	d113      	bne.n	800b89c <_strtod_l+0x254>
 800b874:	182b      	adds	r3, r5, r0
 800b876:	2b08      	cmp	r3, #8
 800b878:	f105 0501 	add.w	r5, r5, #1
 800b87c:	4405      	add	r5, r0
 800b87e:	dc1c      	bgt.n	800b8ba <_strtod_l+0x272>
 800b880:	9907      	ldr	r1, [sp, #28]
 800b882:	230a      	movs	r3, #10
 800b884:	fb03 2301 	mla	r3, r3, r1, r2
 800b888:	9307      	str	r3, [sp, #28]
 800b88a:	2300      	movs	r3, #0
 800b88c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b88e:	1c51      	adds	r1, r2, #1
 800b890:	9117      	str	r1, [sp, #92]	; 0x5c
 800b892:	7852      	ldrb	r2, [r2, #1]
 800b894:	4618      	mov	r0, r3
 800b896:	e7c9      	b.n	800b82c <_strtod_l+0x1e4>
 800b898:	4638      	mov	r0, r7
 800b89a:	e7d2      	b.n	800b842 <_strtod_l+0x1fa>
 800b89c:	2b08      	cmp	r3, #8
 800b89e:	dc04      	bgt.n	800b8aa <_strtod_l+0x262>
 800b8a0:	9e07      	ldr	r6, [sp, #28]
 800b8a2:	434e      	muls	r6, r1
 800b8a4:	9607      	str	r6, [sp, #28]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	e7e2      	b.n	800b870 <_strtod_l+0x228>
 800b8aa:	f103 0c01 	add.w	ip, r3, #1
 800b8ae:	f1bc 0f10 	cmp.w	ip, #16
 800b8b2:	bfd8      	it	le
 800b8b4:	fb01 f909 	mulle.w	r9, r1, r9
 800b8b8:	e7f5      	b.n	800b8a6 <_strtod_l+0x25e>
 800b8ba:	2d10      	cmp	r5, #16
 800b8bc:	bfdc      	itt	le
 800b8be:	230a      	movle	r3, #10
 800b8c0:	fb03 2909 	mlale	r9, r3, r9, r2
 800b8c4:	e7e1      	b.n	800b88a <_strtod_l+0x242>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	9305      	str	r3, [sp, #20]
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e77c      	b.n	800b7c8 <_strtod_l+0x180>
 800b8ce:	f04f 0c00 	mov.w	ip, #0
 800b8d2:	f108 0202 	add.w	r2, r8, #2
 800b8d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b8dc:	e785      	b.n	800b7ea <_strtod_l+0x1a2>
 800b8de:	f04f 0c01 	mov.w	ip, #1
 800b8e2:	e7f6      	b.n	800b8d2 <_strtod_l+0x28a>
 800b8e4:	0800f788 	.word	0x0800f788
 800b8e8:	0800f4a0 	.word	0x0800f4a0
 800b8ec:	7ff00000 	.word	0x7ff00000
 800b8f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8f2:	1c51      	adds	r1, r2, #1
 800b8f4:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8f6:	7852      	ldrb	r2, [r2, #1]
 800b8f8:	2a30      	cmp	r2, #48	; 0x30
 800b8fa:	d0f9      	beq.n	800b8f0 <_strtod_l+0x2a8>
 800b8fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b900:	2908      	cmp	r1, #8
 800b902:	f63f af79 	bhi.w	800b7f8 <_strtod_l+0x1b0>
 800b906:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b90a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b90c:	9206      	str	r2, [sp, #24]
 800b90e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b910:	1c51      	adds	r1, r2, #1
 800b912:	9117      	str	r1, [sp, #92]	; 0x5c
 800b914:	7852      	ldrb	r2, [r2, #1]
 800b916:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b91a:	2e09      	cmp	r6, #9
 800b91c:	d937      	bls.n	800b98e <_strtod_l+0x346>
 800b91e:	9e06      	ldr	r6, [sp, #24]
 800b920:	1b89      	subs	r1, r1, r6
 800b922:	2908      	cmp	r1, #8
 800b924:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b928:	dc02      	bgt.n	800b930 <_strtod_l+0x2e8>
 800b92a:	4576      	cmp	r6, lr
 800b92c:	bfa8      	it	ge
 800b92e:	4676      	movge	r6, lr
 800b930:	f1bc 0f00 	cmp.w	ip, #0
 800b934:	d000      	beq.n	800b938 <_strtod_l+0x2f0>
 800b936:	4276      	negs	r6, r6
 800b938:	2d00      	cmp	r5, #0
 800b93a:	d14d      	bne.n	800b9d8 <_strtod_l+0x390>
 800b93c:	9904      	ldr	r1, [sp, #16]
 800b93e:	4301      	orrs	r1, r0
 800b940:	f47f aec6 	bne.w	800b6d0 <_strtod_l+0x88>
 800b944:	2b00      	cmp	r3, #0
 800b946:	f47f aee1 	bne.w	800b70c <_strtod_l+0xc4>
 800b94a:	2a69      	cmp	r2, #105	; 0x69
 800b94c:	d027      	beq.n	800b99e <_strtod_l+0x356>
 800b94e:	dc24      	bgt.n	800b99a <_strtod_l+0x352>
 800b950:	2a49      	cmp	r2, #73	; 0x49
 800b952:	d024      	beq.n	800b99e <_strtod_l+0x356>
 800b954:	2a4e      	cmp	r2, #78	; 0x4e
 800b956:	f47f aed9 	bne.w	800b70c <_strtod_l+0xc4>
 800b95a:	499f      	ldr	r1, [pc, #636]	; (800bbd8 <_strtod_l+0x590>)
 800b95c:	a817      	add	r0, sp, #92	; 0x5c
 800b95e:	f001 ff63 	bl	800d828 <__match>
 800b962:	2800      	cmp	r0, #0
 800b964:	f43f aed2 	beq.w	800b70c <_strtod_l+0xc4>
 800b968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	2b28      	cmp	r3, #40	; 0x28
 800b96e:	d12d      	bne.n	800b9cc <_strtod_l+0x384>
 800b970:	499a      	ldr	r1, [pc, #616]	; (800bbdc <_strtod_l+0x594>)
 800b972:	aa1a      	add	r2, sp, #104	; 0x68
 800b974:	a817      	add	r0, sp, #92	; 0x5c
 800b976:	f001 ff6b 	bl	800d850 <__hexnan>
 800b97a:	2805      	cmp	r0, #5
 800b97c:	d126      	bne.n	800b9cc <_strtod_l+0x384>
 800b97e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b980:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b984:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b988:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b98c:	e6a0      	b.n	800b6d0 <_strtod_l+0x88>
 800b98e:	210a      	movs	r1, #10
 800b990:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b994:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b998:	e7b9      	b.n	800b90e <_strtod_l+0x2c6>
 800b99a:	2a6e      	cmp	r2, #110	; 0x6e
 800b99c:	e7db      	b.n	800b956 <_strtod_l+0x30e>
 800b99e:	4990      	ldr	r1, [pc, #576]	; (800bbe0 <_strtod_l+0x598>)
 800b9a0:	a817      	add	r0, sp, #92	; 0x5c
 800b9a2:	f001 ff41 	bl	800d828 <__match>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f aeb0 	beq.w	800b70c <_strtod_l+0xc4>
 800b9ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9ae:	498d      	ldr	r1, [pc, #564]	; (800bbe4 <_strtod_l+0x59c>)
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	a817      	add	r0, sp, #92	; 0x5c
 800b9b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b9b6:	f001 ff37 	bl	800d828 <__match>
 800b9ba:	b910      	cbnz	r0, 800b9c2 <_strtod_l+0x37a>
 800b9bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9be:	3301      	adds	r3, #1
 800b9c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b9c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bbf4 <_strtod_l+0x5ac>
 800b9c6:	f04f 0a00 	mov.w	sl, #0
 800b9ca:	e681      	b.n	800b6d0 <_strtod_l+0x88>
 800b9cc:	4886      	ldr	r0, [pc, #536]	; (800bbe8 <_strtod_l+0x5a0>)
 800b9ce:	f003 f86b 	bl	800eaa8 <nan>
 800b9d2:	ec5b ab10 	vmov	sl, fp, d0
 800b9d6:	e67b      	b.n	800b6d0 <_strtod_l+0x88>
 800b9d8:	9b05      	ldr	r3, [sp, #20]
 800b9da:	9807      	ldr	r0, [sp, #28]
 800b9dc:	1af3      	subs	r3, r6, r3
 800b9de:	2f00      	cmp	r7, #0
 800b9e0:	bf08      	it	eq
 800b9e2:	462f      	moveq	r7, r5
 800b9e4:	2d10      	cmp	r5, #16
 800b9e6:	9306      	str	r3, [sp, #24]
 800b9e8:	46a8      	mov	r8, r5
 800b9ea:	bfa8      	it	ge
 800b9ec:	f04f 0810 	movge.w	r8, #16
 800b9f0:	f7f4 fd88 	bl	8000504 <__aeabi_ui2d>
 800b9f4:	2d09      	cmp	r5, #9
 800b9f6:	4682      	mov	sl, r0
 800b9f8:	468b      	mov	fp, r1
 800b9fa:	dd13      	ble.n	800ba24 <_strtod_l+0x3dc>
 800b9fc:	4b7b      	ldr	r3, [pc, #492]	; (800bbec <_strtod_l+0x5a4>)
 800b9fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ba02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ba06:	f7f4 fdf7 	bl	80005f8 <__aeabi_dmul>
 800ba0a:	4682      	mov	sl, r0
 800ba0c:	4648      	mov	r0, r9
 800ba0e:	468b      	mov	fp, r1
 800ba10:	f7f4 fd78 	bl	8000504 <__aeabi_ui2d>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4650      	mov	r0, sl
 800ba1a:	4659      	mov	r1, fp
 800ba1c:	f7f4 fc36 	bl	800028c <__adddf3>
 800ba20:	4682      	mov	sl, r0
 800ba22:	468b      	mov	fp, r1
 800ba24:	2d0f      	cmp	r5, #15
 800ba26:	dc38      	bgt.n	800ba9a <_strtod_l+0x452>
 800ba28:	9b06      	ldr	r3, [sp, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f43f ae50 	beq.w	800b6d0 <_strtod_l+0x88>
 800ba30:	dd24      	ble.n	800ba7c <_strtod_l+0x434>
 800ba32:	2b16      	cmp	r3, #22
 800ba34:	dc0b      	bgt.n	800ba4e <_strtod_l+0x406>
 800ba36:	496d      	ldr	r1, [pc, #436]	; (800bbec <_strtod_l+0x5a4>)
 800ba38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba40:	4652      	mov	r2, sl
 800ba42:	465b      	mov	r3, fp
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	4682      	mov	sl, r0
 800ba4a:	468b      	mov	fp, r1
 800ba4c:	e640      	b.n	800b6d0 <_strtod_l+0x88>
 800ba4e:	9a06      	ldr	r2, [sp, #24]
 800ba50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ba54:	4293      	cmp	r3, r2
 800ba56:	db20      	blt.n	800ba9a <_strtod_l+0x452>
 800ba58:	4c64      	ldr	r4, [pc, #400]	; (800bbec <_strtod_l+0x5a4>)
 800ba5a:	f1c5 050f 	rsb	r5, r5, #15
 800ba5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba62:	4652      	mov	r2, sl
 800ba64:	465b      	mov	r3, fp
 800ba66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba6a:	f7f4 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ba6e:	9b06      	ldr	r3, [sp, #24]
 800ba70:	1b5d      	subs	r5, r3, r5
 800ba72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba7a:	e7e3      	b.n	800ba44 <_strtod_l+0x3fc>
 800ba7c:	9b06      	ldr	r3, [sp, #24]
 800ba7e:	3316      	adds	r3, #22
 800ba80:	db0b      	blt.n	800ba9a <_strtod_l+0x452>
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	1b9e      	subs	r6, r3, r6
 800ba86:	4b59      	ldr	r3, [pc, #356]	; (800bbec <_strtod_l+0x5a4>)
 800ba88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ba8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba90:	4650      	mov	r0, sl
 800ba92:	4659      	mov	r1, fp
 800ba94:	f7f4 feda 	bl	800084c <__aeabi_ddiv>
 800ba98:	e7d6      	b.n	800ba48 <_strtod_l+0x400>
 800ba9a:	9b06      	ldr	r3, [sp, #24]
 800ba9c:	eba5 0808 	sub.w	r8, r5, r8
 800baa0:	4498      	add	r8, r3
 800baa2:	f1b8 0f00 	cmp.w	r8, #0
 800baa6:	dd74      	ble.n	800bb92 <_strtod_l+0x54a>
 800baa8:	f018 030f 	ands.w	r3, r8, #15
 800baac:	d00a      	beq.n	800bac4 <_strtod_l+0x47c>
 800baae:	494f      	ldr	r1, [pc, #316]	; (800bbec <_strtod_l+0x5a4>)
 800bab0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bab4:	4652      	mov	r2, sl
 800bab6:	465b      	mov	r3, fp
 800bab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800babc:	f7f4 fd9c 	bl	80005f8 <__aeabi_dmul>
 800bac0:	4682      	mov	sl, r0
 800bac2:	468b      	mov	fp, r1
 800bac4:	f038 080f 	bics.w	r8, r8, #15
 800bac8:	d04f      	beq.n	800bb6a <_strtod_l+0x522>
 800baca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bace:	dd22      	ble.n	800bb16 <_strtod_l+0x4ce>
 800bad0:	2500      	movs	r5, #0
 800bad2:	462e      	mov	r6, r5
 800bad4:	9507      	str	r5, [sp, #28]
 800bad6:	9505      	str	r5, [sp, #20]
 800bad8:	2322      	movs	r3, #34	; 0x22
 800bada:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bbf4 <_strtod_l+0x5ac>
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	f04f 0a00 	mov.w	sl, #0
 800bae4:	9b07      	ldr	r3, [sp, #28]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f43f adf2 	beq.w	800b6d0 <_strtod_l+0x88>
 800baec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800baee:	4620      	mov	r0, r4
 800baf0:	f001 ffac 	bl	800da4c <_Bfree>
 800baf4:	9905      	ldr	r1, [sp, #20]
 800baf6:	4620      	mov	r0, r4
 800baf8:	f001 ffa8 	bl	800da4c <_Bfree>
 800bafc:	4631      	mov	r1, r6
 800bafe:	4620      	mov	r0, r4
 800bb00:	f001 ffa4 	bl	800da4c <_Bfree>
 800bb04:	9907      	ldr	r1, [sp, #28]
 800bb06:	4620      	mov	r0, r4
 800bb08:	f001 ffa0 	bl	800da4c <_Bfree>
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f001 ff9c 	bl	800da4c <_Bfree>
 800bb14:	e5dc      	b.n	800b6d0 <_strtod_l+0x88>
 800bb16:	4b36      	ldr	r3, [pc, #216]	; (800bbf0 <_strtod_l+0x5a8>)
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bb20:	4650      	mov	r0, sl
 800bb22:	4659      	mov	r1, fp
 800bb24:	4699      	mov	r9, r3
 800bb26:	f1b8 0f01 	cmp.w	r8, #1
 800bb2a:	dc21      	bgt.n	800bb70 <_strtod_l+0x528>
 800bb2c:	b10b      	cbz	r3, 800bb32 <_strtod_l+0x4ea>
 800bb2e:	4682      	mov	sl, r0
 800bb30:	468b      	mov	fp, r1
 800bb32:	4b2f      	ldr	r3, [pc, #188]	; (800bbf0 <_strtod_l+0x5a8>)
 800bb34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bb38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bb3c:	4652      	mov	r2, sl
 800bb3e:	465b      	mov	r3, fp
 800bb40:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bb44:	f7f4 fd58 	bl	80005f8 <__aeabi_dmul>
 800bb48:	4b2a      	ldr	r3, [pc, #168]	; (800bbf4 <_strtod_l+0x5ac>)
 800bb4a:	460a      	mov	r2, r1
 800bb4c:	400b      	ands	r3, r1
 800bb4e:	492a      	ldr	r1, [pc, #168]	; (800bbf8 <_strtod_l+0x5b0>)
 800bb50:	428b      	cmp	r3, r1
 800bb52:	4682      	mov	sl, r0
 800bb54:	d8bc      	bhi.n	800bad0 <_strtod_l+0x488>
 800bb56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb5a:	428b      	cmp	r3, r1
 800bb5c:	bf86      	itte	hi
 800bb5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bbfc <_strtod_l+0x5b4>
 800bb62:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	9304      	str	r3, [sp, #16]
 800bb6e:	e084      	b.n	800bc7a <_strtod_l+0x632>
 800bb70:	f018 0f01 	tst.w	r8, #1
 800bb74:	d005      	beq.n	800bb82 <_strtod_l+0x53a>
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	2301      	movs	r3, #1
 800bb82:	9a04      	ldr	r2, [sp, #16]
 800bb84:	3208      	adds	r2, #8
 800bb86:	f109 0901 	add.w	r9, r9, #1
 800bb8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb8e:	9204      	str	r2, [sp, #16]
 800bb90:	e7c9      	b.n	800bb26 <_strtod_l+0x4de>
 800bb92:	d0ea      	beq.n	800bb6a <_strtod_l+0x522>
 800bb94:	f1c8 0800 	rsb	r8, r8, #0
 800bb98:	f018 020f 	ands.w	r2, r8, #15
 800bb9c:	d00a      	beq.n	800bbb4 <_strtod_l+0x56c>
 800bb9e:	4b13      	ldr	r3, [pc, #76]	; (800bbec <_strtod_l+0x5a4>)
 800bba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba4:	4650      	mov	r0, sl
 800bba6:	4659      	mov	r1, fp
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	f7f4 fe4e 	bl	800084c <__aeabi_ddiv>
 800bbb0:	4682      	mov	sl, r0
 800bbb2:	468b      	mov	fp, r1
 800bbb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bbb8:	d0d7      	beq.n	800bb6a <_strtod_l+0x522>
 800bbba:	f1b8 0f1f 	cmp.w	r8, #31
 800bbbe:	dd1f      	ble.n	800bc00 <_strtod_l+0x5b8>
 800bbc0:	2500      	movs	r5, #0
 800bbc2:	462e      	mov	r6, r5
 800bbc4:	9507      	str	r5, [sp, #28]
 800bbc6:	9505      	str	r5, [sp, #20]
 800bbc8:	2322      	movs	r3, #34	; 0x22
 800bbca:	f04f 0a00 	mov.w	sl, #0
 800bbce:	f04f 0b00 	mov.w	fp, #0
 800bbd2:	6023      	str	r3, [r4, #0]
 800bbd4:	e786      	b.n	800bae4 <_strtod_l+0x49c>
 800bbd6:	bf00      	nop
 800bbd8:	0800f471 	.word	0x0800f471
 800bbdc:	0800f4b4 	.word	0x0800f4b4
 800bbe0:	0800f469 	.word	0x0800f469
 800bbe4:	0800f630 	.word	0x0800f630
 800bbe8:	0800f52b 	.word	0x0800f52b
 800bbec:	0800f820 	.word	0x0800f820
 800bbf0:	0800f7f8 	.word	0x0800f7f8
 800bbf4:	7ff00000 	.word	0x7ff00000
 800bbf8:	7ca00000 	.word	0x7ca00000
 800bbfc:	7fefffff 	.word	0x7fefffff
 800bc00:	f018 0310 	ands.w	r3, r8, #16
 800bc04:	bf18      	it	ne
 800bc06:	236a      	movne	r3, #106	; 0x6a
 800bc08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bfb8 <_strtod_l+0x970>
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	4650      	mov	r0, sl
 800bc10:	4659      	mov	r1, fp
 800bc12:	2300      	movs	r3, #0
 800bc14:	f018 0f01 	tst.w	r8, #1
 800bc18:	d004      	beq.n	800bc24 <_strtod_l+0x5dc>
 800bc1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc1e:	f7f4 fceb 	bl	80005f8 <__aeabi_dmul>
 800bc22:	2301      	movs	r3, #1
 800bc24:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bc28:	f109 0908 	add.w	r9, r9, #8
 800bc2c:	d1f2      	bne.n	800bc14 <_strtod_l+0x5cc>
 800bc2e:	b10b      	cbz	r3, 800bc34 <_strtod_l+0x5ec>
 800bc30:	4682      	mov	sl, r0
 800bc32:	468b      	mov	fp, r1
 800bc34:	9b04      	ldr	r3, [sp, #16]
 800bc36:	b1c3      	cbz	r3, 800bc6a <_strtod_l+0x622>
 800bc38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bc3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	4659      	mov	r1, fp
 800bc44:	dd11      	ble.n	800bc6a <_strtod_l+0x622>
 800bc46:	2b1f      	cmp	r3, #31
 800bc48:	f340 8124 	ble.w	800be94 <_strtod_l+0x84c>
 800bc4c:	2b34      	cmp	r3, #52	; 0x34
 800bc4e:	bfde      	ittt	le
 800bc50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bc54:	f04f 33ff 	movle.w	r3, #4294967295
 800bc58:	fa03 f202 	lslle.w	r2, r3, r2
 800bc5c:	f04f 0a00 	mov.w	sl, #0
 800bc60:	bfcc      	ite	gt
 800bc62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bc66:	ea02 0b01 	andle.w	fp, r2, r1
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4650      	mov	r0, sl
 800bc70:	4659      	mov	r1, fp
 800bc72:	f7f4 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d1a2      	bne.n	800bbc0 <_strtod_l+0x578>
 800bc7a:	9b07      	ldr	r3, [sp, #28]
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	9908      	ldr	r1, [sp, #32]
 800bc80:	462b      	mov	r3, r5
 800bc82:	463a      	mov	r2, r7
 800bc84:	4620      	mov	r0, r4
 800bc86:	f001 ff49 	bl	800db1c <__s2b>
 800bc8a:	9007      	str	r0, [sp, #28]
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f43f af1f 	beq.w	800bad0 <_strtod_l+0x488>
 800bc92:	9b05      	ldr	r3, [sp, #20]
 800bc94:	1b9e      	subs	r6, r3, r6
 800bc96:	9b06      	ldr	r3, [sp, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bfb4      	ite	lt
 800bc9c:	4633      	movlt	r3, r6
 800bc9e:	2300      	movge	r3, #0
 800bca0:	930c      	str	r3, [sp, #48]	; 0x30
 800bca2:	9b06      	ldr	r3, [sp, #24]
 800bca4:	2500      	movs	r5, #0
 800bca6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bcaa:	9312      	str	r3, [sp, #72]	; 0x48
 800bcac:	462e      	mov	r6, r5
 800bcae:	9b07      	ldr	r3, [sp, #28]
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	6859      	ldr	r1, [r3, #4]
 800bcb4:	f001 fe8a 	bl	800d9cc <_Balloc>
 800bcb8:	9005      	str	r0, [sp, #20]
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	f43f af0c 	beq.w	800bad8 <_strtod_l+0x490>
 800bcc0:	9b07      	ldr	r3, [sp, #28]
 800bcc2:	691a      	ldr	r2, [r3, #16]
 800bcc4:	3202      	adds	r2, #2
 800bcc6:	f103 010c 	add.w	r1, r3, #12
 800bcca:	0092      	lsls	r2, r2, #2
 800bccc:	300c      	adds	r0, #12
 800bcce:	f7fe fdd7 	bl	800a880 <memcpy>
 800bcd2:	ec4b ab10 	vmov	d0, sl, fp
 800bcd6:	aa1a      	add	r2, sp, #104	; 0x68
 800bcd8:	a919      	add	r1, sp, #100	; 0x64
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f002 fa64 	bl	800e1a8 <__d2b>
 800bce0:	ec4b ab18 	vmov	d8, sl, fp
 800bce4:	9018      	str	r0, [sp, #96]	; 0x60
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f43f aef6 	beq.w	800bad8 <_strtod_l+0x490>
 800bcec:	2101      	movs	r1, #1
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f001 ffae 	bl	800dc50 <__i2b>
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f43f aeee 	beq.w	800bad8 <_strtod_l+0x490>
 800bcfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bcfe:	9904      	ldr	r1, [sp, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	bfab      	itete	ge
 800bd04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bd06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bd08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bd0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bd0e:	bfac      	ite	ge
 800bd10:	eb03 0902 	addge.w	r9, r3, r2
 800bd14:	1ad7      	sublt	r7, r2, r3
 800bd16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bd18:	eba3 0801 	sub.w	r8, r3, r1
 800bd1c:	4490      	add	r8, r2
 800bd1e:	4ba1      	ldr	r3, [pc, #644]	; (800bfa4 <_strtod_l+0x95c>)
 800bd20:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd24:	4598      	cmp	r8, r3
 800bd26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bd2a:	f280 80c7 	bge.w	800bebc <_strtod_l+0x874>
 800bd2e:	eba3 0308 	sub.w	r3, r3, r8
 800bd32:	2b1f      	cmp	r3, #31
 800bd34:	eba2 0203 	sub.w	r2, r2, r3
 800bd38:	f04f 0101 	mov.w	r1, #1
 800bd3c:	f300 80b1 	bgt.w	800bea2 <_strtod_l+0x85a>
 800bd40:	fa01 f303 	lsl.w	r3, r1, r3
 800bd44:	930d      	str	r3, [sp, #52]	; 0x34
 800bd46:	2300      	movs	r3, #0
 800bd48:	9308      	str	r3, [sp, #32]
 800bd4a:	eb09 0802 	add.w	r8, r9, r2
 800bd4e:	9b04      	ldr	r3, [sp, #16]
 800bd50:	45c1      	cmp	r9, r8
 800bd52:	4417      	add	r7, r2
 800bd54:	441f      	add	r7, r3
 800bd56:	464b      	mov	r3, r9
 800bd58:	bfa8      	it	ge
 800bd5a:	4643      	movge	r3, r8
 800bd5c:	42bb      	cmp	r3, r7
 800bd5e:	bfa8      	it	ge
 800bd60:	463b      	movge	r3, r7
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	bfc2      	ittt	gt
 800bd66:	eba8 0803 	subgt.w	r8, r8, r3
 800bd6a:	1aff      	subgt	r7, r7, r3
 800bd6c:	eba9 0903 	subgt.w	r9, r9, r3
 800bd70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	dd17      	ble.n	800bda6 <_strtod_l+0x75e>
 800bd76:	4631      	mov	r1, r6
 800bd78:	461a      	mov	r2, r3
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f002 f828 	bl	800ddd0 <__pow5mult>
 800bd80:	4606      	mov	r6, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	f43f aea8 	beq.w	800bad8 <_strtod_l+0x490>
 800bd88:	4601      	mov	r1, r0
 800bd8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f001 ff75 	bl	800dc7c <__multiply>
 800bd92:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd94:	2800      	cmp	r0, #0
 800bd96:	f43f ae9f 	beq.w	800bad8 <_strtod_l+0x490>
 800bd9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f001 fe55 	bl	800da4c <_Bfree>
 800bda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bda4:	9318      	str	r3, [sp, #96]	; 0x60
 800bda6:	f1b8 0f00 	cmp.w	r8, #0
 800bdaa:	f300 808c 	bgt.w	800bec6 <_strtod_l+0x87e>
 800bdae:	9b06      	ldr	r3, [sp, #24]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dd08      	ble.n	800bdc6 <_strtod_l+0x77e>
 800bdb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdb6:	9905      	ldr	r1, [sp, #20]
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f002 f809 	bl	800ddd0 <__pow5mult>
 800bdbe:	9005      	str	r0, [sp, #20]
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	f43f ae89 	beq.w	800bad8 <_strtod_l+0x490>
 800bdc6:	2f00      	cmp	r7, #0
 800bdc8:	dd08      	ble.n	800bddc <_strtod_l+0x794>
 800bdca:	9905      	ldr	r1, [sp, #20]
 800bdcc:	463a      	mov	r2, r7
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f002 f858 	bl	800de84 <__lshift>
 800bdd4:	9005      	str	r0, [sp, #20]
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f43f ae7e 	beq.w	800bad8 <_strtod_l+0x490>
 800bddc:	f1b9 0f00 	cmp.w	r9, #0
 800bde0:	dd08      	ble.n	800bdf4 <_strtod_l+0x7ac>
 800bde2:	4631      	mov	r1, r6
 800bde4:	464a      	mov	r2, r9
 800bde6:	4620      	mov	r0, r4
 800bde8:	f002 f84c 	bl	800de84 <__lshift>
 800bdec:	4606      	mov	r6, r0
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f43f ae72 	beq.w	800bad8 <_strtod_l+0x490>
 800bdf4:	9a05      	ldr	r2, [sp, #20]
 800bdf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f002 f8cf 	bl	800df9c <__mdiff>
 800bdfe:	4605      	mov	r5, r0
 800be00:	2800      	cmp	r0, #0
 800be02:	f43f ae69 	beq.w	800bad8 <_strtod_l+0x490>
 800be06:	68c3      	ldr	r3, [r0, #12]
 800be08:	930b      	str	r3, [sp, #44]	; 0x2c
 800be0a:	2300      	movs	r3, #0
 800be0c:	60c3      	str	r3, [r0, #12]
 800be0e:	4631      	mov	r1, r6
 800be10:	f002 f8a8 	bl	800df64 <__mcmp>
 800be14:	2800      	cmp	r0, #0
 800be16:	da60      	bge.n	800beda <_strtod_l+0x892>
 800be18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be1a:	ea53 030a 	orrs.w	r3, r3, sl
 800be1e:	f040 8082 	bne.w	800bf26 <_strtod_l+0x8de>
 800be22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be26:	2b00      	cmp	r3, #0
 800be28:	d17d      	bne.n	800bf26 <_strtod_l+0x8de>
 800be2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be2e:	0d1b      	lsrs	r3, r3, #20
 800be30:	051b      	lsls	r3, r3, #20
 800be32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800be36:	d976      	bls.n	800bf26 <_strtod_l+0x8de>
 800be38:	696b      	ldr	r3, [r5, #20]
 800be3a:	b913      	cbnz	r3, 800be42 <_strtod_l+0x7fa>
 800be3c:	692b      	ldr	r3, [r5, #16]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	dd71      	ble.n	800bf26 <_strtod_l+0x8de>
 800be42:	4629      	mov	r1, r5
 800be44:	2201      	movs	r2, #1
 800be46:	4620      	mov	r0, r4
 800be48:	f002 f81c 	bl	800de84 <__lshift>
 800be4c:	4631      	mov	r1, r6
 800be4e:	4605      	mov	r5, r0
 800be50:	f002 f888 	bl	800df64 <__mcmp>
 800be54:	2800      	cmp	r0, #0
 800be56:	dd66      	ble.n	800bf26 <_strtod_l+0x8de>
 800be58:	9904      	ldr	r1, [sp, #16]
 800be5a:	4a53      	ldr	r2, [pc, #332]	; (800bfa8 <_strtod_l+0x960>)
 800be5c:	465b      	mov	r3, fp
 800be5e:	2900      	cmp	r1, #0
 800be60:	f000 8081 	beq.w	800bf66 <_strtod_l+0x91e>
 800be64:	ea02 010b 	and.w	r1, r2, fp
 800be68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be6c:	dc7b      	bgt.n	800bf66 <_strtod_l+0x91e>
 800be6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be72:	f77f aea9 	ble.w	800bbc8 <_strtod_l+0x580>
 800be76:	4b4d      	ldr	r3, [pc, #308]	; (800bfac <_strtod_l+0x964>)
 800be78:	4650      	mov	r0, sl
 800be7a:	4659      	mov	r1, fp
 800be7c:	2200      	movs	r2, #0
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	460b      	mov	r3, r1
 800be84:	4303      	orrs	r3, r0
 800be86:	bf08      	it	eq
 800be88:	2322      	moveq	r3, #34	; 0x22
 800be8a:	4682      	mov	sl, r0
 800be8c:	468b      	mov	fp, r1
 800be8e:	bf08      	it	eq
 800be90:	6023      	streq	r3, [r4, #0]
 800be92:	e62b      	b.n	800baec <_strtod_l+0x4a4>
 800be94:	f04f 32ff 	mov.w	r2, #4294967295
 800be98:	fa02 f303 	lsl.w	r3, r2, r3
 800be9c:	ea03 0a0a 	and.w	sl, r3, sl
 800bea0:	e6e3      	b.n	800bc6a <_strtod_l+0x622>
 800bea2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bea6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800beaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800beae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800beb2:	fa01 f308 	lsl.w	r3, r1, r8
 800beb6:	9308      	str	r3, [sp, #32]
 800beb8:	910d      	str	r1, [sp, #52]	; 0x34
 800beba:	e746      	b.n	800bd4a <_strtod_l+0x702>
 800bebc:	2300      	movs	r3, #0
 800bebe:	9308      	str	r3, [sp, #32]
 800bec0:	2301      	movs	r3, #1
 800bec2:	930d      	str	r3, [sp, #52]	; 0x34
 800bec4:	e741      	b.n	800bd4a <_strtod_l+0x702>
 800bec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bec8:	4642      	mov	r2, r8
 800beca:	4620      	mov	r0, r4
 800becc:	f001 ffda 	bl	800de84 <__lshift>
 800bed0:	9018      	str	r0, [sp, #96]	; 0x60
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f47f af6b 	bne.w	800bdae <_strtod_l+0x766>
 800bed8:	e5fe      	b.n	800bad8 <_strtod_l+0x490>
 800beda:	465f      	mov	r7, fp
 800bedc:	d16e      	bne.n	800bfbc <_strtod_l+0x974>
 800bede:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bee4:	b342      	cbz	r2, 800bf38 <_strtod_l+0x8f0>
 800bee6:	4a32      	ldr	r2, [pc, #200]	; (800bfb0 <_strtod_l+0x968>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d128      	bne.n	800bf3e <_strtod_l+0x8f6>
 800beec:	9b04      	ldr	r3, [sp, #16]
 800beee:	4651      	mov	r1, sl
 800bef0:	b1eb      	cbz	r3, 800bf2e <_strtod_l+0x8e6>
 800bef2:	4b2d      	ldr	r3, [pc, #180]	; (800bfa8 <_strtod_l+0x960>)
 800bef4:	403b      	ands	r3, r7
 800bef6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800befa:	f04f 32ff 	mov.w	r2, #4294967295
 800befe:	d819      	bhi.n	800bf34 <_strtod_l+0x8ec>
 800bf00:	0d1b      	lsrs	r3, r3, #20
 800bf02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf06:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0a:	4299      	cmp	r1, r3
 800bf0c:	d117      	bne.n	800bf3e <_strtod_l+0x8f6>
 800bf0e:	4b29      	ldr	r3, [pc, #164]	; (800bfb4 <_strtod_l+0x96c>)
 800bf10:	429f      	cmp	r7, r3
 800bf12:	d102      	bne.n	800bf1a <_strtod_l+0x8d2>
 800bf14:	3101      	adds	r1, #1
 800bf16:	f43f addf 	beq.w	800bad8 <_strtod_l+0x490>
 800bf1a:	4b23      	ldr	r3, [pc, #140]	; (800bfa8 <_strtod_l+0x960>)
 800bf1c:	403b      	ands	r3, r7
 800bf1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bf22:	f04f 0a00 	mov.w	sl, #0
 800bf26:	9b04      	ldr	r3, [sp, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1a4      	bne.n	800be76 <_strtod_l+0x82e>
 800bf2c:	e5de      	b.n	800baec <_strtod_l+0x4a4>
 800bf2e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf32:	e7ea      	b.n	800bf0a <_strtod_l+0x8c2>
 800bf34:	4613      	mov	r3, r2
 800bf36:	e7e8      	b.n	800bf0a <_strtod_l+0x8c2>
 800bf38:	ea53 030a 	orrs.w	r3, r3, sl
 800bf3c:	d08c      	beq.n	800be58 <_strtod_l+0x810>
 800bf3e:	9b08      	ldr	r3, [sp, #32]
 800bf40:	b1db      	cbz	r3, 800bf7a <_strtod_l+0x932>
 800bf42:	423b      	tst	r3, r7
 800bf44:	d0ef      	beq.n	800bf26 <_strtod_l+0x8de>
 800bf46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf48:	9a04      	ldr	r2, [sp, #16]
 800bf4a:	4650      	mov	r0, sl
 800bf4c:	4659      	mov	r1, fp
 800bf4e:	b1c3      	cbz	r3, 800bf82 <_strtod_l+0x93a>
 800bf50:	f7ff fb5b 	bl	800b60a <sulp>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	ec51 0b18 	vmov	r0, r1, d8
 800bf5c:	f7f4 f996 	bl	800028c <__adddf3>
 800bf60:	4682      	mov	sl, r0
 800bf62:	468b      	mov	fp, r1
 800bf64:	e7df      	b.n	800bf26 <_strtod_l+0x8de>
 800bf66:	4013      	ands	r3, r2
 800bf68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf74:	f04f 3aff 	mov.w	sl, #4294967295
 800bf78:	e7d5      	b.n	800bf26 <_strtod_l+0x8de>
 800bf7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf7c:	ea13 0f0a 	tst.w	r3, sl
 800bf80:	e7e0      	b.n	800bf44 <_strtod_l+0x8fc>
 800bf82:	f7ff fb42 	bl	800b60a <sulp>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	ec51 0b18 	vmov	r0, r1, d8
 800bf8e:	f7f4 f97b 	bl	8000288 <__aeabi_dsub>
 800bf92:	2200      	movs	r2, #0
 800bf94:	2300      	movs	r3, #0
 800bf96:	4682      	mov	sl, r0
 800bf98:	468b      	mov	fp, r1
 800bf9a:	f7f4 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d0c1      	beq.n	800bf26 <_strtod_l+0x8de>
 800bfa2:	e611      	b.n	800bbc8 <_strtod_l+0x580>
 800bfa4:	fffffc02 	.word	0xfffffc02
 800bfa8:	7ff00000 	.word	0x7ff00000
 800bfac:	39500000 	.word	0x39500000
 800bfb0:	000fffff 	.word	0x000fffff
 800bfb4:	7fefffff 	.word	0x7fefffff
 800bfb8:	0800f4c8 	.word	0x0800f4c8
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f002 f94e 	bl	800e260 <__ratio>
 800bfc4:	ec59 8b10 	vmov	r8, r9, d0
 800bfc8:	ee10 0a10 	vmov	r0, s0
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	f7f4 fd8c 	bl	8000af0 <__aeabi_dcmple>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d07a      	beq.n	800c0d2 <_strtod_l+0xa8a>
 800bfdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d04a      	beq.n	800c078 <_strtod_l+0xa30>
 800bfe2:	4b95      	ldr	r3, [pc, #596]	; (800c238 <_strtod_l+0xbf0>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c238 <_strtod_l+0xbf0>
 800bfee:	f04f 0800 	mov.w	r8, #0
 800bff2:	4b92      	ldr	r3, [pc, #584]	; (800c23c <_strtod_l+0xbf4>)
 800bff4:	403b      	ands	r3, r7
 800bff6:	930d      	str	r3, [sp, #52]	; 0x34
 800bff8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bffa:	4b91      	ldr	r3, [pc, #580]	; (800c240 <_strtod_l+0xbf8>)
 800bffc:	429a      	cmp	r2, r3
 800bffe:	f040 80b0 	bne.w	800c162 <_strtod_l+0xb1a>
 800c002:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c006:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c00a:	ec4b ab10 	vmov	d0, sl, fp
 800c00e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c012:	f002 f84d 	bl	800e0b0 <__ulp>
 800c016:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c01a:	ec53 2b10 	vmov	r2, r3, d0
 800c01e:	f7f4 faeb 	bl	80005f8 <__aeabi_dmul>
 800c022:	4652      	mov	r2, sl
 800c024:	465b      	mov	r3, fp
 800c026:	f7f4 f931 	bl	800028c <__adddf3>
 800c02a:	460b      	mov	r3, r1
 800c02c:	4983      	ldr	r1, [pc, #524]	; (800c23c <_strtod_l+0xbf4>)
 800c02e:	4a85      	ldr	r2, [pc, #532]	; (800c244 <_strtod_l+0xbfc>)
 800c030:	4019      	ands	r1, r3
 800c032:	4291      	cmp	r1, r2
 800c034:	4682      	mov	sl, r0
 800c036:	d960      	bls.n	800c0fa <_strtod_l+0xab2>
 800c038:	ee18 3a90 	vmov	r3, s17
 800c03c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c040:	4293      	cmp	r3, r2
 800c042:	d104      	bne.n	800c04e <_strtod_l+0xa06>
 800c044:	ee18 3a10 	vmov	r3, s16
 800c048:	3301      	adds	r3, #1
 800c04a:	f43f ad45 	beq.w	800bad8 <_strtod_l+0x490>
 800c04e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c250 <_strtod_l+0xc08>
 800c052:	f04f 3aff 	mov.w	sl, #4294967295
 800c056:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c058:	4620      	mov	r0, r4
 800c05a:	f001 fcf7 	bl	800da4c <_Bfree>
 800c05e:	9905      	ldr	r1, [sp, #20]
 800c060:	4620      	mov	r0, r4
 800c062:	f001 fcf3 	bl	800da4c <_Bfree>
 800c066:	4631      	mov	r1, r6
 800c068:	4620      	mov	r0, r4
 800c06a:	f001 fcef 	bl	800da4c <_Bfree>
 800c06e:	4629      	mov	r1, r5
 800c070:	4620      	mov	r0, r4
 800c072:	f001 fceb 	bl	800da4c <_Bfree>
 800c076:	e61a      	b.n	800bcae <_strtod_l+0x666>
 800c078:	f1ba 0f00 	cmp.w	sl, #0
 800c07c:	d11b      	bne.n	800c0b6 <_strtod_l+0xa6e>
 800c07e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c082:	b9f3      	cbnz	r3, 800c0c2 <_strtod_l+0xa7a>
 800c084:	4b6c      	ldr	r3, [pc, #432]	; (800c238 <_strtod_l+0xbf0>)
 800c086:	2200      	movs	r2, #0
 800c088:	4640      	mov	r0, r8
 800c08a:	4649      	mov	r1, r9
 800c08c:	f7f4 fd26 	bl	8000adc <__aeabi_dcmplt>
 800c090:	b9d0      	cbnz	r0, 800c0c8 <_strtod_l+0xa80>
 800c092:	4640      	mov	r0, r8
 800c094:	4649      	mov	r1, r9
 800c096:	4b6c      	ldr	r3, [pc, #432]	; (800c248 <_strtod_l+0xc00>)
 800c098:	2200      	movs	r2, #0
 800c09a:	f7f4 faad 	bl	80005f8 <__aeabi_dmul>
 800c09e:	4680      	mov	r8, r0
 800c0a0:	4689      	mov	r9, r1
 800c0a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c0a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c0aa:	9315      	str	r3, [sp, #84]	; 0x54
 800c0ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c0b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c0b4:	e79d      	b.n	800bff2 <_strtod_l+0x9aa>
 800c0b6:	f1ba 0f01 	cmp.w	sl, #1
 800c0ba:	d102      	bne.n	800c0c2 <_strtod_l+0xa7a>
 800c0bc:	2f00      	cmp	r7, #0
 800c0be:	f43f ad83 	beq.w	800bbc8 <_strtod_l+0x580>
 800c0c2:	4b62      	ldr	r3, [pc, #392]	; (800c24c <_strtod_l+0xc04>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	e78e      	b.n	800bfe6 <_strtod_l+0x99e>
 800c0c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c248 <_strtod_l+0xc00>
 800c0cc:	f04f 0800 	mov.w	r8, #0
 800c0d0:	e7e7      	b.n	800c0a2 <_strtod_l+0xa5a>
 800c0d2:	4b5d      	ldr	r3, [pc, #372]	; (800c248 <_strtod_l+0xc00>)
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f7f4 fa8d 	bl	80005f8 <__aeabi_dmul>
 800c0de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0e0:	4680      	mov	r8, r0
 800c0e2:	4689      	mov	r9, r1
 800c0e4:	b933      	cbnz	r3, 800c0f4 <_strtod_l+0xaac>
 800c0e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ea:	900e      	str	r0, [sp, #56]	; 0x38
 800c0ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c0f2:	e7dd      	b.n	800c0b0 <_strtod_l+0xa68>
 800c0f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c0f8:	e7f9      	b.n	800c0ee <_strtod_l+0xaa6>
 800c0fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c0fe:	9b04      	ldr	r3, [sp, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1a8      	bne.n	800c056 <_strtod_l+0xa0e>
 800c104:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c10a:	0d1b      	lsrs	r3, r3, #20
 800c10c:	051b      	lsls	r3, r3, #20
 800c10e:	429a      	cmp	r2, r3
 800c110:	d1a1      	bne.n	800c056 <_strtod_l+0xa0e>
 800c112:	4640      	mov	r0, r8
 800c114:	4649      	mov	r1, r9
 800c116:	f7f4 fdcf 	bl	8000cb8 <__aeabi_d2lz>
 800c11a:	f7f4 fa3f 	bl	800059c <__aeabi_l2d>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	4640      	mov	r0, r8
 800c124:	4649      	mov	r1, r9
 800c126:	f7f4 f8af 	bl	8000288 <__aeabi_dsub>
 800c12a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c12c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c130:	ea43 030a 	orr.w	r3, r3, sl
 800c134:	4313      	orrs	r3, r2
 800c136:	4680      	mov	r8, r0
 800c138:	4689      	mov	r9, r1
 800c13a:	d055      	beq.n	800c1e8 <_strtod_l+0xba0>
 800c13c:	a336      	add	r3, pc, #216	; (adr r3, 800c218 <_strtod_l+0xbd0>)
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	f7f4 fccb 	bl	8000adc <__aeabi_dcmplt>
 800c146:	2800      	cmp	r0, #0
 800c148:	f47f acd0 	bne.w	800baec <_strtod_l+0x4a4>
 800c14c:	a334      	add	r3, pc, #208	; (adr r3, 800c220 <_strtod_l+0xbd8>)
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	4640      	mov	r0, r8
 800c154:	4649      	mov	r1, r9
 800c156:	f7f4 fcdf 	bl	8000b18 <__aeabi_dcmpgt>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	f43f af7b 	beq.w	800c056 <_strtod_l+0xa0e>
 800c160:	e4c4      	b.n	800baec <_strtod_l+0x4a4>
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	b333      	cbz	r3, 800c1b4 <_strtod_l+0xb6c>
 800c166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c168:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c16c:	d822      	bhi.n	800c1b4 <_strtod_l+0xb6c>
 800c16e:	a32e      	add	r3, pc, #184	; (adr r3, 800c228 <_strtod_l+0xbe0>)
 800c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c174:	4640      	mov	r0, r8
 800c176:	4649      	mov	r1, r9
 800c178:	f7f4 fcba 	bl	8000af0 <__aeabi_dcmple>
 800c17c:	b1a0      	cbz	r0, 800c1a8 <_strtod_l+0xb60>
 800c17e:	4649      	mov	r1, r9
 800c180:	4640      	mov	r0, r8
 800c182:	f7f4 fd11 	bl	8000ba8 <__aeabi_d2uiz>
 800c186:	2801      	cmp	r0, #1
 800c188:	bf38      	it	cc
 800c18a:	2001      	movcc	r0, #1
 800c18c:	f7f4 f9ba 	bl	8000504 <__aeabi_ui2d>
 800c190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c192:	4680      	mov	r8, r0
 800c194:	4689      	mov	r9, r1
 800c196:	bb23      	cbnz	r3, 800c1e2 <_strtod_l+0xb9a>
 800c198:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c19c:	9010      	str	r0, [sp, #64]	; 0x40
 800c19e:	9311      	str	r3, [sp, #68]	; 0x44
 800c1a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c1b0:	1a9b      	subs	r3, r3, r2
 800c1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1b8:	eeb0 0a48 	vmov.f32	s0, s16
 800c1bc:	eef0 0a68 	vmov.f32	s1, s17
 800c1c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1c4:	f001 ff74 	bl	800e0b0 <__ulp>
 800c1c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1cc:	ec53 2b10 	vmov	r2, r3, d0
 800c1d0:	f7f4 fa12 	bl	80005f8 <__aeabi_dmul>
 800c1d4:	ec53 2b18 	vmov	r2, r3, d8
 800c1d8:	f7f4 f858 	bl	800028c <__adddf3>
 800c1dc:	4682      	mov	sl, r0
 800c1de:	468b      	mov	fp, r1
 800c1e0:	e78d      	b.n	800c0fe <_strtod_l+0xab6>
 800c1e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c1e6:	e7db      	b.n	800c1a0 <_strtod_l+0xb58>
 800c1e8:	a311      	add	r3, pc, #68	; (adr r3, 800c230 <_strtod_l+0xbe8>)
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	f7f4 fc75 	bl	8000adc <__aeabi_dcmplt>
 800c1f2:	e7b2      	b.n	800c15a <_strtod_l+0xb12>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	f7ff ba6b 	b.w	800b6d8 <_strtod_l+0x90>
 800c202:	2a65      	cmp	r2, #101	; 0x65
 800c204:	f43f ab5f 	beq.w	800b8c6 <_strtod_l+0x27e>
 800c208:	2a45      	cmp	r2, #69	; 0x45
 800c20a:	f43f ab5c 	beq.w	800b8c6 <_strtod_l+0x27e>
 800c20e:	2301      	movs	r3, #1
 800c210:	f7ff bb94 	b.w	800b93c <_strtod_l+0x2f4>
 800c214:	f3af 8000 	nop.w
 800c218:	94a03595 	.word	0x94a03595
 800c21c:	3fdfffff 	.word	0x3fdfffff
 800c220:	35afe535 	.word	0x35afe535
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	ffc00000 	.word	0xffc00000
 800c22c:	41dfffff 	.word	0x41dfffff
 800c230:	94a03595 	.word	0x94a03595
 800c234:	3fcfffff 	.word	0x3fcfffff
 800c238:	3ff00000 	.word	0x3ff00000
 800c23c:	7ff00000 	.word	0x7ff00000
 800c240:	7fe00000 	.word	0x7fe00000
 800c244:	7c9fffff 	.word	0x7c9fffff
 800c248:	3fe00000 	.word	0x3fe00000
 800c24c:	bff00000 	.word	0xbff00000
 800c250:	7fefffff 	.word	0x7fefffff

0800c254 <_strtod_r>:
 800c254:	4b01      	ldr	r3, [pc, #4]	; (800c25c <_strtod_r+0x8>)
 800c256:	f7ff b9f7 	b.w	800b648 <_strtod_l>
 800c25a:	bf00      	nop
 800c25c:	20000078 	.word	0x20000078

0800c260 <_strtol_l.constprop.0>:
 800c260:	2b01      	cmp	r3, #1
 800c262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c266:	d001      	beq.n	800c26c <_strtol_l.constprop.0+0xc>
 800c268:	2b24      	cmp	r3, #36	; 0x24
 800c26a:	d906      	bls.n	800c27a <_strtol_l.constprop.0+0x1a>
 800c26c:	f7fe fade 	bl	800a82c <__errno>
 800c270:	2316      	movs	r3, #22
 800c272:	6003      	str	r3, [r0, #0]
 800c274:	2000      	movs	r0, #0
 800c276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c27a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c360 <_strtol_l.constprop.0+0x100>
 800c27e:	460d      	mov	r5, r1
 800c280:	462e      	mov	r6, r5
 800c282:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c286:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c28a:	f017 0708 	ands.w	r7, r7, #8
 800c28e:	d1f7      	bne.n	800c280 <_strtol_l.constprop.0+0x20>
 800c290:	2c2d      	cmp	r4, #45	; 0x2d
 800c292:	d132      	bne.n	800c2fa <_strtol_l.constprop.0+0x9a>
 800c294:	782c      	ldrb	r4, [r5, #0]
 800c296:	2701      	movs	r7, #1
 800c298:	1cb5      	adds	r5, r6, #2
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d05b      	beq.n	800c356 <_strtol_l.constprop.0+0xf6>
 800c29e:	2b10      	cmp	r3, #16
 800c2a0:	d109      	bne.n	800c2b6 <_strtol_l.constprop.0+0x56>
 800c2a2:	2c30      	cmp	r4, #48	; 0x30
 800c2a4:	d107      	bne.n	800c2b6 <_strtol_l.constprop.0+0x56>
 800c2a6:	782c      	ldrb	r4, [r5, #0]
 800c2a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2ac:	2c58      	cmp	r4, #88	; 0x58
 800c2ae:	d14d      	bne.n	800c34c <_strtol_l.constprop.0+0xec>
 800c2b0:	786c      	ldrb	r4, [r5, #1]
 800c2b2:	2310      	movs	r3, #16
 800c2b4:	3502      	adds	r5, #2
 800c2b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c2ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2be:	f04f 0c00 	mov.w	ip, #0
 800c2c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800c2c6:	4666      	mov	r6, ip
 800c2c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800c2cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c2d0:	f1be 0f09 	cmp.w	lr, #9
 800c2d4:	d816      	bhi.n	800c304 <_strtol_l.constprop.0+0xa4>
 800c2d6:	4674      	mov	r4, lr
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	dd24      	ble.n	800c326 <_strtol_l.constprop.0+0xc6>
 800c2dc:	f1bc 0f00 	cmp.w	ip, #0
 800c2e0:	db1e      	blt.n	800c320 <_strtol_l.constprop.0+0xc0>
 800c2e2:	45b1      	cmp	r9, r6
 800c2e4:	d31c      	bcc.n	800c320 <_strtol_l.constprop.0+0xc0>
 800c2e6:	d101      	bne.n	800c2ec <_strtol_l.constprop.0+0x8c>
 800c2e8:	45a2      	cmp	sl, r4
 800c2ea:	db19      	blt.n	800c320 <_strtol_l.constprop.0+0xc0>
 800c2ec:	fb06 4603 	mla	r6, r6, r3, r4
 800c2f0:	f04f 0c01 	mov.w	ip, #1
 800c2f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2f8:	e7e8      	b.n	800c2cc <_strtol_l.constprop.0+0x6c>
 800c2fa:	2c2b      	cmp	r4, #43	; 0x2b
 800c2fc:	bf04      	itt	eq
 800c2fe:	782c      	ldrbeq	r4, [r5, #0]
 800c300:	1cb5      	addeq	r5, r6, #2
 800c302:	e7ca      	b.n	800c29a <_strtol_l.constprop.0+0x3a>
 800c304:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c308:	f1be 0f19 	cmp.w	lr, #25
 800c30c:	d801      	bhi.n	800c312 <_strtol_l.constprop.0+0xb2>
 800c30e:	3c37      	subs	r4, #55	; 0x37
 800c310:	e7e2      	b.n	800c2d8 <_strtol_l.constprop.0+0x78>
 800c312:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c316:	f1be 0f19 	cmp.w	lr, #25
 800c31a:	d804      	bhi.n	800c326 <_strtol_l.constprop.0+0xc6>
 800c31c:	3c57      	subs	r4, #87	; 0x57
 800c31e:	e7db      	b.n	800c2d8 <_strtol_l.constprop.0+0x78>
 800c320:	f04f 3cff 	mov.w	ip, #4294967295
 800c324:	e7e6      	b.n	800c2f4 <_strtol_l.constprop.0+0x94>
 800c326:	f1bc 0f00 	cmp.w	ip, #0
 800c32a:	da05      	bge.n	800c338 <_strtol_l.constprop.0+0xd8>
 800c32c:	2322      	movs	r3, #34	; 0x22
 800c32e:	6003      	str	r3, [r0, #0]
 800c330:	4646      	mov	r6, r8
 800c332:	b942      	cbnz	r2, 800c346 <_strtol_l.constprop.0+0xe6>
 800c334:	4630      	mov	r0, r6
 800c336:	e79e      	b.n	800c276 <_strtol_l.constprop.0+0x16>
 800c338:	b107      	cbz	r7, 800c33c <_strtol_l.constprop.0+0xdc>
 800c33a:	4276      	negs	r6, r6
 800c33c:	2a00      	cmp	r2, #0
 800c33e:	d0f9      	beq.n	800c334 <_strtol_l.constprop.0+0xd4>
 800c340:	f1bc 0f00 	cmp.w	ip, #0
 800c344:	d000      	beq.n	800c348 <_strtol_l.constprop.0+0xe8>
 800c346:	1e69      	subs	r1, r5, #1
 800c348:	6011      	str	r1, [r2, #0]
 800c34a:	e7f3      	b.n	800c334 <_strtol_l.constprop.0+0xd4>
 800c34c:	2430      	movs	r4, #48	; 0x30
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1b1      	bne.n	800c2b6 <_strtol_l.constprop.0+0x56>
 800c352:	2308      	movs	r3, #8
 800c354:	e7af      	b.n	800c2b6 <_strtol_l.constprop.0+0x56>
 800c356:	2c30      	cmp	r4, #48	; 0x30
 800c358:	d0a5      	beq.n	800c2a6 <_strtol_l.constprop.0+0x46>
 800c35a:	230a      	movs	r3, #10
 800c35c:	e7ab      	b.n	800c2b6 <_strtol_l.constprop.0+0x56>
 800c35e:	bf00      	nop
 800c360:	0800f52d 	.word	0x0800f52d

0800c364 <_strtol_r>:
 800c364:	f7ff bf7c 	b.w	800c260 <_strtol_l.constprop.0>

0800c368 <__assert_func>:
 800c368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c36a:	4614      	mov	r4, r2
 800c36c:	461a      	mov	r2, r3
 800c36e:	4b09      	ldr	r3, [pc, #36]	; (800c394 <__assert_func+0x2c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4605      	mov	r5, r0
 800c374:	68d8      	ldr	r0, [r3, #12]
 800c376:	b14c      	cbz	r4, 800c38c <__assert_func+0x24>
 800c378:	4b07      	ldr	r3, [pc, #28]	; (800c398 <__assert_func+0x30>)
 800c37a:	9100      	str	r1, [sp, #0]
 800c37c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c380:	4906      	ldr	r1, [pc, #24]	; (800c39c <__assert_func+0x34>)
 800c382:	462b      	mov	r3, r5
 800c384:	f000 ff60 	bl	800d248 <fiprintf>
 800c388:	f002 fcde 	bl	800ed48 <abort>
 800c38c:	4b04      	ldr	r3, [pc, #16]	; (800c3a0 <__assert_func+0x38>)
 800c38e:	461c      	mov	r4, r3
 800c390:	e7f3      	b.n	800c37a <__assert_func+0x12>
 800c392:	bf00      	nop
 800c394:	20000010 	.word	0x20000010
 800c398:	0800f4f0 	.word	0x0800f4f0
 800c39c:	0800f4fd 	.word	0x0800f4fd
 800c3a0:	0800f52b 	.word	0x0800f52b

0800c3a4 <quorem>:
 800c3a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a8:	6903      	ldr	r3, [r0, #16]
 800c3aa:	690c      	ldr	r4, [r1, #16]
 800c3ac:	42a3      	cmp	r3, r4
 800c3ae:	4607      	mov	r7, r0
 800c3b0:	f2c0 8081 	blt.w	800c4b6 <quorem+0x112>
 800c3b4:	3c01      	subs	r4, #1
 800c3b6:	f101 0814 	add.w	r8, r1, #20
 800c3ba:	f100 0514 	add.w	r5, r0, #20
 800c3be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3c2:	9301      	str	r3, [sp, #4]
 800c3c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c3d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3dc:	d331      	bcc.n	800c442 <quorem+0x9e>
 800c3de:	f04f 0e00 	mov.w	lr, #0
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	46ac      	mov	ip, r5
 800c3e6:	46f2      	mov	sl, lr
 800c3e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c3ec:	b293      	uxth	r3, r2
 800c3ee:	fb06 e303 	mla	r3, r6, r3, lr
 800c3f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	ebaa 0303 	sub.w	r3, sl, r3
 800c3fc:	f8dc a000 	ldr.w	sl, [ip]
 800c400:	0c12      	lsrs	r2, r2, #16
 800c402:	fa13 f38a 	uxtah	r3, r3, sl
 800c406:	fb06 e202 	mla	r2, r6, r2, lr
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	9b00      	ldr	r3, [sp, #0]
 800c40e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c412:	b292      	uxth	r2, r2
 800c414:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c41c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c420:	4581      	cmp	r9, r0
 800c422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c426:	f84c 3b04 	str.w	r3, [ip], #4
 800c42a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c42e:	d2db      	bcs.n	800c3e8 <quorem+0x44>
 800c430:	f855 300b 	ldr.w	r3, [r5, fp]
 800c434:	b92b      	cbnz	r3, 800c442 <quorem+0x9e>
 800c436:	9b01      	ldr	r3, [sp, #4]
 800c438:	3b04      	subs	r3, #4
 800c43a:	429d      	cmp	r5, r3
 800c43c:	461a      	mov	r2, r3
 800c43e:	d32e      	bcc.n	800c49e <quorem+0xfa>
 800c440:	613c      	str	r4, [r7, #16]
 800c442:	4638      	mov	r0, r7
 800c444:	f001 fd8e 	bl	800df64 <__mcmp>
 800c448:	2800      	cmp	r0, #0
 800c44a:	db24      	blt.n	800c496 <quorem+0xf2>
 800c44c:	3601      	adds	r6, #1
 800c44e:	4628      	mov	r0, r5
 800c450:	f04f 0c00 	mov.w	ip, #0
 800c454:	f858 2b04 	ldr.w	r2, [r8], #4
 800c458:	f8d0 e000 	ldr.w	lr, [r0]
 800c45c:	b293      	uxth	r3, r2
 800c45e:	ebac 0303 	sub.w	r3, ip, r3
 800c462:	0c12      	lsrs	r2, r2, #16
 800c464:	fa13 f38e 	uxtah	r3, r3, lr
 800c468:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c46c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c470:	b29b      	uxth	r3, r3
 800c472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c476:	45c1      	cmp	r9, r8
 800c478:	f840 3b04 	str.w	r3, [r0], #4
 800c47c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c480:	d2e8      	bcs.n	800c454 <quorem+0xb0>
 800c482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c48a:	b922      	cbnz	r2, 800c496 <quorem+0xf2>
 800c48c:	3b04      	subs	r3, #4
 800c48e:	429d      	cmp	r5, r3
 800c490:	461a      	mov	r2, r3
 800c492:	d30a      	bcc.n	800c4aa <quorem+0x106>
 800c494:	613c      	str	r4, [r7, #16]
 800c496:	4630      	mov	r0, r6
 800c498:	b003      	add	sp, #12
 800c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	3b04      	subs	r3, #4
 800c4a2:	2a00      	cmp	r2, #0
 800c4a4:	d1cc      	bne.n	800c440 <quorem+0x9c>
 800c4a6:	3c01      	subs	r4, #1
 800c4a8:	e7c7      	b.n	800c43a <quorem+0x96>
 800c4aa:	6812      	ldr	r2, [r2, #0]
 800c4ac:	3b04      	subs	r3, #4
 800c4ae:	2a00      	cmp	r2, #0
 800c4b0:	d1f0      	bne.n	800c494 <quorem+0xf0>
 800c4b2:	3c01      	subs	r4, #1
 800c4b4:	e7eb      	b.n	800c48e <quorem+0xea>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	e7ee      	b.n	800c498 <quorem+0xf4>
 800c4ba:	0000      	movs	r0, r0
 800c4bc:	0000      	movs	r0, r0
	...

0800c4c0 <_dtoa_r>:
 800c4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c4:	ed2d 8b04 	vpush	{d8-d9}
 800c4c8:	ec57 6b10 	vmov	r6, r7, d0
 800c4cc:	b093      	sub	sp, #76	; 0x4c
 800c4ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c4d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c4d4:	9106      	str	r1, [sp, #24]
 800c4d6:	ee10 aa10 	vmov	sl, s0
 800c4da:	4604      	mov	r4, r0
 800c4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c4de:	930c      	str	r3, [sp, #48]	; 0x30
 800c4e0:	46bb      	mov	fp, r7
 800c4e2:	b975      	cbnz	r5, 800c502 <_dtoa_r+0x42>
 800c4e4:	2010      	movs	r0, #16
 800c4e6:	f001 fa57 	bl	800d998 <malloc>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	6260      	str	r0, [r4, #36]	; 0x24
 800c4ee:	b920      	cbnz	r0, 800c4fa <_dtoa_r+0x3a>
 800c4f0:	4ba7      	ldr	r3, [pc, #668]	; (800c790 <_dtoa_r+0x2d0>)
 800c4f2:	21ea      	movs	r1, #234	; 0xea
 800c4f4:	48a7      	ldr	r0, [pc, #668]	; (800c794 <_dtoa_r+0x2d4>)
 800c4f6:	f7ff ff37 	bl	800c368 <__assert_func>
 800c4fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4fe:	6005      	str	r5, [r0, #0]
 800c500:	60c5      	str	r5, [r0, #12]
 800c502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c504:	6819      	ldr	r1, [r3, #0]
 800c506:	b151      	cbz	r1, 800c51e <_dtoa_r+0x5e>
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	604a      	str	r2, [r1, #4]
 800c50c:	2301      	movs	r3, #1
 800c50e:	4093      	lsls	r3, r2
 800c510:	608b      	str	r3, [r1, #8]
 800c512:	4620      	mov	r0, r4
 800c514:	f001 fa9a 	bl	800da4c <_Bfree>
 800c518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]
 800c51e:	1e3b      	subs	r3, r7, #0
 800c520:	bfaa      	itet	ge
 800c522:	2300      	movge	r3, #0
 800c524:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c528:	f8c8 3000 	strge.w	r3, [r8]
 800c52c:	4b9a      	ldr	r3, [pc, #616]	; (800c798 <_dtoa_r+0x2d8>)
 800c52e:	bfbc      	itt	lt
 800c530:	2201      	movlt	r2, #1
 800c532:	f8c8 2000 	strlt.w	r2, [r8]
 800c536:	ea33 030b 	bics.w	r3, r3, fp
 800c53a:	d11b      	bne.n	800c574 <_dtoa_r+0xb4>
 800c53c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c53e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c542:	6013      	str	r3, [r2, #0]
 800c544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c548:	4333      	orrs	r3, r6
 800c54a:	f000 8592 	beq.w	800d072 <_dtoa_r+0xbb2>
 800c54e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c550:	b963      	cbnz	r3, 800c56c <_dtoa_r+0xac>
 800c552:	4b92      	ldr	r3, [pc, #584]	; (800c79c <_dtoa_r+0x2dc>)
 800c554:	e022      	b.n	800c59c <_dtoa_r+0xdc>
 800c556:	4b92      	ldr	r3, [pc, #584]	; (800c7a0 <_dtoa_r+0x2e0>)
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	3308      	adds	r3, #8
 800c55c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	9801      	ldr	r0, [sp, #4]
 800c562:	b013      	add	sp, #76	; 0x4c
 800c564:	ecbd 8b04 	vpop	{d8-d9}
 800c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56c:	4b8b      	ldr	r3, [pc, #556]	; (800c79c <_dtoa_r+0x2dc>)
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	3303      	adds	r3, #3
 800c572:	e7f3      	b.n	800c55c <_dtoa_r+0x9c>
 800c574:	2200      	movs	r2, #0
 800c576:	2300      	movs	r3, #0
 800c578:	4650      	mov	r0, sl
 800c57a:	4659      	mov	r1, fp
 800c57c:	f7f4 faa4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c580:	ec4b ab19 	vmov	d9, sl, fp
 800c584:	4680      	mov	r8, r0
 800c586:	b158      	cbz	r0, 800c5a0 <_dtoa_r+0xe0>
 800c588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c58a:	2301      	movs	r3, #1
 800c58c:	6013      	str	r3, [r2, #0]
 800c58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 856b 	beq.w	800d06c <_dtoa_r+0xbac>
 800c596:	4883      	ldr	r0, [pc, #524]	; (800c7a4 <_dtoa_r+0x2e4>)
 800c598:	6018      	str	r0, [r3, #0]
 800c59a:	1e43      	subs	r3, r0, #1
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	e7df      	b.n	800c560 <_dtoa_r+0xa0>
 800c5a0:	ec4b ab10 	vmov	d0, sl, fp
 800c5a4:	aa10      	add	r2, sp, #64	; 0x40
 800c5a6:	a911      	add	r1, sp, #68	; 0x44
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f001 fdfd 	bl	800e1a8 <__d2b>
 800c5ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c5b2:	ee08 0a10 	vmov	s16, r0
 800c5b6:	2d00      	cmp	r5, #0
 800c5b8:	f000 8084 	beq.w	800c6c4 <_dtoa_r+0x204>
 800c5bc:	ee19 3a90 	vmov	r3, s19
 800c5c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c5c8:	4656      	mov	r6, sl
 800c5ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c5ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c5d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c5d6:	4b74      	ldr	r3, [pc, #464]	; (800c7a8 <_dtoa_r+0x2e8>)
 800c5d8:	2200      	movs	r2, #0
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4639      	mov	r1, r7
 800c5de:	f7f3 fe53 	bl	8000288 <__aeabi_dsub>
 800c5e2:	a365      	add	r3, pc, #404	; (adr r3, 800c778 <_dtoa_r+0x2b8>)
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	f7f4 f806 	bl	80005f8 <__aeabi_dmul>
 800c5ec:	a364      	add	r3, pc, #400	; (adr r3, 800c780 <_dtoa_r+0x2c0>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	f7f3 fe4b 	bl	800028c <__adddf3>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	460f      	mov	r7, r1
 800c5fc:	f7f3 ff92 	bl	8000524 <__aeabi_i2d>
 800c600:	a361      	add	r3, pc, #388	; (adr r3, 800c788 <_dtoa_r+0x2c8>)
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	4630      	mov	r0, r6
 800c610:	4639      	mov	r1, r7
 800c612:	f7f3 fe3b 	bl	800028c <__adddf3>
 800c616:	4606      	mov	r6, r0
 800c618:	460f      	mov	r7, r1
 800c61a:	f7f4 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800c61e:	2200      	movs	r2, #0
 800c620:	9000      	str	r0, [sp, #0]
 800c622:	2300      	movs	r3, #0
 800c624:	4630      	mov	r0, r6
 800c626:	4639      	mov	r1, r7
 800c628:	f7f4 fa58 	bl	8000adc <__aeabi_dcmplt>
 800c62c:	b150      	cbz	r0, 800c644 <_dtoa_r+0x184>
 800c62e:	9800      	ldr	r0, [sp, #0]
 800c630:	f7f3 ff78 	bl	8000524 <__aeabi_i2d>
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	f7f4 fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800c63c:	b910      	cbnz	r0, 800c644 <_dtoa_r+0x184>
 800c63e:	9b00      	ldr	r3, [sp, #0]
 800c640:	3b01      	subs	r3, #1
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	9b00      	ldr	r3, [sp, #0]
 800c646:	2b16      	cmp	r3, #22
 800c648:	d85a      	bhi.n	800c700 <_dtoa_r+0x240>
 800c64a:	9a00      	ldr	r2, [sp, #0]
 800c64c:	4b57      	ldr	r3, [pc, #348]	; (800c7ac <_dtoa_r+0x2ec>)
 800c64e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	ec51 0b19 	vmov	r0, r1, d9
 800c65a:	f7f4 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800c65e:	2800      	cmp	r0, #0
 800c660:	d050      	beq.n	800c704 <_dtoa_r+0x244>
 800c662:	9b00      	ldr	r3, [sp, #0]
 800c664:	3b01      	subs	r3, #1
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	2300      	movs	r3, #0
 800c66a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c66c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c66e:	1b5d      	subs	r5, r3, r5
 800c670:	1e6b      	subs	r3, r5, #1
 800c672:	9305      	str	r3, [sp, #20]
 800c674:	bf45      	ittet	mi
 800c676:	f1c5 0301 	rsbmi	r3, r5, #1
 800c67a:	9304      	strmi	r3, [sp, #16]
 800c67c:	2300      	movpl	r3, #0
 800c67e:	2300      	movmi	r3, #0
 800c680:	bf4c      	ite	mi
 800c682:	9305      	strmi	r3, [sp, #20]
 800c684:	9304      	strpl	r3, [sp, #16]
 800c686:	9b00      	ldr	r3, [sp, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	db3d      	blt.n	800c708 <_dtoa_r+0x248>
 800c68c:	9b05      	ldr	r3, [sp, #20]
 800c68e:	9a00      	ldr	r2, [sp, #0]
 800c690:	920a      	str	r2, [sp, #40]	; 0x28
 800c692:	4413      	add	r3, r2
 800c694:	9305      	str	r3, [sp, #20]
 800c696:	2300      	movs	r3, #0
 800c698:	9307      	str	r3, [sp, #28]
 800c69a:	9b06      	ldr	r3, [sp, #24]
 800c69c:	2b09      	cmp	r3, #9
 800c69e:	f200 8089 	bhi.w	800c7b4 <_dtoa_r+0x2f4>
 800c6a2:	2b05      	cmp	r3, #5
 800c6a4:	bfc4      	itt	gt
 800c6a6:	3b04      	subgt	r3, #4
 800c6a8:	9306      	strgt	r3, [sp, #24]
 800c6aa:	9b06      	ldr	r3, [sp, #24]
 800c6ac:	f1a3 0302 	sub.w	r3, r3, #2
 800c6b0:	bfcc      	ite	gt
 800c6b2:	2500      	movgt	r5, #0
 800c6b4:	2501      	movle	r5, #1
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	f200 8087 	bhi.w	800c7ca <_dtoa_r+0x30a>
 800c6bc:	e8df f003 	tbb	[pc, r3]
 800c6c0:	59383a2d 	.word	0x59383a2d
 800c6c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c6c8:	441d      	add	r5, r3
 800c6ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c6ce:	2b20      	cmp	r3, #32
 800c6d0:	bfc1      	itttt	gt
 800c6d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c6d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c6da:	fa0b f303 	lslgt.w	r3, fp, r3
 800c6de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c6e2:	bfda      	itte	le
 800c6e4:	f1c3 0320 	rsble	r3, r3, #32
 800c6e8:	fa06 f003 	lslle.w	r0, r6, r3
 800c6ec:	4318      	orrgt	r0, r3
 800c6ee:	f7f3 ff09 	bl	8000504 <__aeabi_ui2d>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c6fa:	3d01      	subs	r5, #1
 800c6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800c6fe:	e76a      	b.n	800c5d6 <_dtoa_r+0x116>
 800c700:	2301      	movs	r3, #1
 800c702:	e7b2      	b.n	800c66a <_dtoa_r+0x1aa>
 800c704:	900b      	str	r0, [sp, #44]	; 0x2c
 800c706:	e7b1      	b.n	800c66c <_dtoa_r+0x1ac>
 800c708:	9b04      	ldr	r3, [sp, #16]
 800c70a:	9a00      	ldr	r2, [sp, #0]
 800c70c:	1a9b      	subs	r3, r3, r2
 800c70e:	9304      	str	r3, [sp, #16]
 800c710:	4253      	negs	r3, r2
 800c712:	9307      	str	r3, [sp, #28]
 800c714:	2300      	movs	r3, #0
 800c716:	930a      	str	r3, [sp, #40]	; 0x28
 800c718:	e7bf      	b.n	800c69a <_dtoa_r+0x1da>
 800c71a:	2300      	movs	r3, #0
 800c71c:	9308      	str	r3, [sp, #32]
 800c71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c720:	2b00      	cmp	r3, #0
 800c722:	dc55      	bgt.n	800c7d0 <_dtoa_r+0x310>
 800c724:	2301      	movs	r3, #1
 800c726:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c72a:	461a      	mov	r2, r3
 800c72c:	9209      	str	r2, [sp, #36]	; 0x24
 800c72e:	e00c      	b.n	800c74a <_dtoa_r+0x28a>
 800c730:	2301      	movs	r3, #1
 800c732:	e7f3      	b.n	800c71c <_dtoa_r+0x25c>
 800c734:	2300      	movs	r3, #0
 800c736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c738:	9308      	str	r3, [sp, #32]
 800c73a:	9b00      	ldr	r3, [sp, #0]
 800c73c:	4413      	add	r3, r2
 800c73e:	9302      	str	r3, [sp, #8]
 800c740:	3301      	adds	r3, #1
 800c742:	2b01      	cmp	r3, #1
 800c744:	9303      	str	r3, [sp, #12]
 800c746:	bfb8      	it	lt
 800c748:	2301      	movlt	r3, #1
 800c74a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c74c:	2200      	movs	r2, #0
 800c74e:	6042      	str	r2, [r0, #4]
 800c750:	2204      	movs	r2, #4
 800c752:	f102 0614 	add.w	r6, r2, #20
 800c756:	429e      	cmp	r6, r3
 800c758:	6841      	ldr	r1, [r0, #4]
 800c75a:	d93d      	bls.n	800c7d8 <_dtoa_r+0x318>
 800c75c:	4620      	mov	r0, r4
 800c75e:	f001 f935 	bl	800d9cc <_Balloc>
 800c762:	9001      	str	r0, [sp, #4]
 800c764:	2800      	cmp	r0, #0
 800c766:	d13b      	bne.n	800c7e0 <_dtoa_r+0x320>
 800c768:	4b11      	ldr	r3, [pc, #68]	; (800c7b0 <_dtoa_r+0x2f0>)
 800c76a:	4602      	mov	r2, r0
 800c76c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c770:	e6c0      	b.n	800c4f4 <_dtoa_r+0x34>
 800c772:	2301      	movs	r3, #1
 800c774:	e7df      	b.n	800c736 <_dtoa_r+0x276>
 800c776:	bf00      	nop
 800c778:	636f4361 	.word	0x636f4361
 800c77c:	3fd287a7 	.word	0x3fd287a7
 800c780:	8b60c8b3 	.word	0x8b60c8b3
 800c784:	3fc68a28 	.word	0x3fc68a28
 800c788:	509f79fb 	.word	0x509f79fb
 800c78c:	3fd34413 	.word	0x3fd34413
 800c790:	0800f63a 	.word	0x0800f63a
 800c794:	0800f651 	.word	0x0800f651
 800c798:	7ff00000 	.word	0x7ff00000
 800c79c:	0800f636 	.word	0x0800f636
 800c7a0:	0800f62d 	.word	0x0800f62d
 800c7a4:	0800f475 	.word	0x0800f475
 800c7a8:	3ff80000 	.word	0x3ff80000
 800c7ac:	0800f820 	.word	0x0800f820
 800c7b0:	0800f6ac 	.word	0x0800f6ac
 800c7b4:	2501      	movs	r5, #1
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	9306      	str	r3, [sp, #24]
 800c7ba:	9508      	str	r5, [sp, #32]
 800c7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2312      	movs	r3, #18
 800c7c8:	e7b0      	b.n	800c72c <_dtoa_r+0x26c>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	9308      	str	r3, [sp, #32]
 800c7ce:	e7f5      	b.n	800c7bc <_dtoa_r+0x2fc>
 800c7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c7d6:	e7b8      	b.n	800c74a <_dtoa_r+0x28a>
 800c7d8:	3101      	adds	r1, #1
 800c7da:	6041      	str	r1, [r0, #4]
 800c7dc:	0052      	lsls	r2, r2, #1
 800c7de:	e7b8      	b.n	800c752 <_dtoa_r+0x292>
 800c7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7e2:	9a01      	ldr	r2, [sp, #4]
 800c7e4:	601a      	str	r2, [r3, #0]
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	2b0e      	cmp	r3, #14
 800c7ea:	f200 809d 	bhi.w	800c928 <_dtoa_r+0x468>
 800c7ee:	2d00      	cmp	r5, #0
 800c7f0:	f000 809a 	beq.w	800c928 <_dtoa_r+0x468>
 800c7f4:	9b00      	ldr	r3, [sp, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	dd32      	ble.n	800c860 <_dtoa_r+0x3a0>
 800c7fa:	4ab7      	ldr	r2, [pc, #732]	; (800cad8 <_dtoa_r+0x618>)
 800c7fc:	f003 030f 	and.w	r3, r3, #15
 800c800:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c804:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c808:	9b00      	ldr	r3, [sp, #0]
 800c80a:	05d8      	lsls	r0, r3, #23
 800c80c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c810:	d516      	bpl.n	800c840 <_dtoa_r+0x380>
 800c812:	4bb2      	ldr	r3, [pc, #712]	; (800cadc <_dtoa_r+0x61c>)
 800c814:	ec51 0b19 	vmov	r0, r1, d9
 800c818:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c81c:	f7f4 f816 	bl	800084c <__aeabi_ddiv>
 800c820:	f007 070f 	and.w	r7, r7, #15
 800c824:	4682      	mov	sl, r0
 800c826:	468b      	mov	fp, r1
 800c828:	2503      	movs	r5, #3
 800c82a:	4eac      	ldr	r6, [pc, #688]	; (800cadc <_dtoa_r+0x61c>)
 800c82c:	b957      	cbnz	r7, 800c844 <_dtoa_r+0x384>
 800c82e:	4642      	mov	r2, r8
 800c830:	464b      	mov	r3, r9
 800c832:	4650      	mov	r0, sl
 800c834:	4659      	mov	r1, fp
 800c836:	f7f4 f809 	bl	800084c <__aeabi_ddiv>
 800c83a:	4682      	mov	sl, r0
 800c83c:	468b      	mov	fp, r1
 800c83e:	e028      	b.n	800c892 <_dtoa_r+0x3d2>
 800c840:	2502      	movs	r5, #2
 800c842:	e7f2      	b.n	800c82a <_dtoa_r+0x36a>
 800c844:	07f9      	lsls	r1, r7, #31
 800c846:	d508      	bpl.n	800c85a <_dtoa_r+0x39a>
 800c848:	4640      	mov	r0, r8
 800c84a:	4649      	mov	r1, r9
 800c84c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c850:	f7f3 fed2 	bl	80005f8 <__aeabi_dmul>
 800c854:	3501      	adds	r5, #1
 800c856:	4680      	mov	r8, r0
 800c858:	4689      	mov	r9, r1
 800c85a:	107f      	asrs	r7, r7, #1
 800c85c:	3608      	adds	r6, #8
 800c85e:	e7e5      	b.n	800c82c <_dtoa_r+0x36c>
 800c860:	f000 809b 	beq.w	800c99a <_dtoa_r+0x4da>
 800c864:	9b00      	ldr	r3, [sp, #0]
 800c866:	4f9d      	ldr	r7, [pc, #628]	; (800cadc <_dtoa_r+0x61c>)
 800c868:	425e      	negs	r6, r3
 800c86a:	4b9b      	ldr	r3, [pc, #620]	; (800cad8 <_dtoa_r+0x618>)
 800c86c:	f006 020f 	and.w	r2, r6, #15
 800c870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	ec51 0b19 	vmov	r0, r1, d9
 800c87c:	f7f3 febc 	bl	80005f8 <__aeabi_dmul>
 800c880:	1136      	asrs	r6, r6, #4
 800c882:	4682      	mov	sl, r0
 800c884:	468b      	mov	fp, r1
 800c886:	2300      	movs	r3, #0
 800c888:	2502      	movs	r5, #2
 800c88a:	2e00      	cmp	r6, #0
 800c88c:	d17a      	bne.n	800c984 <_dtoa_r+0x4c4>
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1d3      	bne.n	800c83a <_dtoa_r+0x37a>
 800c892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 8082 	beq.w	800c99e <_dtoa_r+0x4de>
 800c89a:	4b91      	ldr	r3, [pc, #580]	; (800cae0 <_dtoa_r+0x620>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	4650      	mov	r0, sl
 800c8a0:	4659      	mov	r1, fp
 800c8a2:	f7f4 f91b 	bl	8000adc <__aeabi_dcmplt>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d079      	beq.n	800c99e <_dtoa_r+0x4de>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d076      	beq.n	800c99e <_dtoa_r+0x4de>
 800c8b0:	9b02      	ldr	r3, [sp, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	dd36      	ble.n	800c924 <_dtoa_r+0x464>
 800c8b6:	9b00      	ldr	r3, [sp, #0]
 800c8b8:	4650      	mov	r0, sl
 800c8ba:	4659      	mov	r1, fp
 800c8bc:	1e5f      	subs	r7, r3, #1
 800c8be:	2200      	movs	r2, #0
 800c8c0:	4b88      	ldr	r3, [pc, #544]	; (800cae4 <_dtoa_r+0x624>)
 800c8c2:	f7f3 fe99 	bl	80005f8 <__aeabi_dmul>
 800c8c6:	9e02      	ldr	r6, [sp, #8]
 800c8c8:	4682      	mov	sl, r0
 800c8ca:	468b      	mov	fp, r1
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f7f3 fe28 	bl	8000524 <__aeabi_i2d>
 800c8d4:	4652      	mov	r2, sl
 800c8d6:	465b      	mov	r3, fp
 800c8d8:	f7f3 fe8e 	bl	80005f8 <__aeabi_dmul>
 800c8dc:	4b82      	ldr	r3, [pc, #520]	; (800cae8 <_dtoa_r+0x628>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f7f3 fcd4 	bl	800028c <__adddf3>
 800c8e4:	46d0      	mov	r8, sl
 800c8e6:	46d9      	mov	r9, fp
 800c8e8:	4682      	mov	sl, r0
 800c8ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c8ee:	2e00      	cmp	r6, #0
 800c8f0:	d158      	bne.n	800c9a4 <_dtoa_r+0x4e4>
 800c8f2:	4b7e      	ldr	r3, [pc, #504]	; (800caec <_dtoa_r+0x62c>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	4640      	mov	r0, r8
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	f7f3 fcc5 	bl	8000288 <__aeabi_dsub>
 800c8fe:	4652      	mov	r2, sl
 800c900:	465b      	mov	r3, fp
 800c902:	4680      	mov	r8, r0
 800c904:	4689      	mov	r9, r1
 800c906:	f7f4 f907 	bl	8000b18 <__aeabi_dcmpgt>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	f040 8295 	bne.w	800ce3a <_dtoa_r+0x97a>
 800c910:	4652      	mov	r2, sl
 800c912:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c916:	4640      	mov	r0, r8
 800c918:	4649      	mov	r1, r9
 800c91a:	f7f4 f8df 	bl	8000adc <__aeabi_dcmplt>
 800c91e:	2800      	cmp	r0, #0
 800c920:	f040 8289 	bne.w	800ce36 <_dtoa_r+0x976>
 800c924:	ec5b ab19 	vmov	sl, fp, d9
 800c928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f2c0 8148 	blt.w	800cbc0 <_dtoa_r+0x700>
 800c930:	9a00      	ldr	r2, [sp, #0]
 800c932:	2a0e      	cmp	r2, #14
 800c934:	f300 8144 	bgt.w	800cbc0 <_dtoa_r+0x700>
 800c938:	4b67      	ldr	r3, [pc, #412]	; (800cad8 <_dtoa_r+0x618>)
 800c93a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c93e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c944:	2b00      	cmp	r3, #0
 800c946:	f280 80d5 	bge.w	800caf4 <_dtoa_r+0x634>
 800c94a:	9b03      	ldr	r3, [sp, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f300 80d1 	bgt.w	800caf4 <_dtoa_r+0x634>
 800c952:	f040 826f 	bne.w	800ce34 <_dtoa_r+0x974>
 800c956:	4b65      	ldr	r3, [pc, #404]	; (800caec <_dtoa_r+0x62c>)
 800c958:	2200      	movs	r2, #0
 800c95a:	4640      	mov	r0, r8
 800c95c:	4649      	mov	r1, r9
 800c95e:	f7f3 fe4b 	bl	80005f8 <__aeabi_dmul>
 800c962:	4652      	mov	r2, sl
 800c964:	465b      	mov	r3, fp
 800c966:	f7f4 f8cd 	bl	8000b04 <__aeabi_dcmpge>
 800c96a:	9e03      	ldr	r6, [sp, #12]
 800c96c:	4637      	mov	r7, r6
 800c96e:	2800      	cmp	r0, #0
 800c970:	f040 8245 	bne.w	800cdfe <_dtoa_r+0x93e>
 800c974:	9d01      	ldr	r5, [sp, #4]
 800c976:	2331      	movs	r3, #49	; 0x31
 800c978:	f805 3b01 	strb.w	r3, [r5], #1
 800c97c:	9b00      	ldr	r3, [sp, #0]
 800c97e:	3301      	adds	r3, #1
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	e240      	b.n	800ce06 <_dtoa_r+0x946>
 800c984:	07f2      	lsls	r2, r6, #31
 800c986:	d505      	bpl.n	800c994 <_dtoa_r+0x4d4>
 800c988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c98c:	f7f3 fe34 	bl	80005f8 <__aeabi_dmul>
 800c990:	3501      	adds	r5, #1
 800c992:	2301      	movs	r3, #1
 800c994:	1076      	asrs	r6, r6, #1
 800c996:	3708      	adds	r7, #8
 800c998:	e777      	b.n	800c88a <_dtoa_r+0x3ca>
 800c99a:	2502      	movs	r5, #2
 800c99c:	e779      	b.n	800c892 <_dtoa_r+0x3d2>
 800c99e:	9f00      	ldr	r7, [sp, #0]
 800c9a0:	9e03      	ldr	r6, [sp, #12]
 800c9a2:	e794      	b.n	800c8ce <_dtoa_r+0x40e>
 800c9a4:	9901      	ldr	r1, [sp, #4]
 800c9a6:	4b4c      	ldr	r3, [pc, #304]	; (800cad8 <_dtoa_r+0x618>)
 800c9a8:	4431      	add	r1, r6
 800c9aa:	910d      	str	r1, [sp, #52]	; 0x34
 800c9ac:	9908      	ldr	r1, [sp, #32]
 800c9ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c9b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9b6:	2900      	cmp	r1, #0
 800c9b8:	d043      	beq.n	800ca42 <_dtoa_r+0x582>
 800c9ba:	494d      	ldr	r1, [pc, #308]	; (800caf0 <_dtoa_r+0x630>)
 800c9bc:	2000      	movs	r0, #0
 800c9be:	f7f3 ff45 	bl	800084c <__aeabi_ddiv>
 800c9c2:	4652      	mov	r2, sl
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	f7f3 fc5f 	bl	8000288 <__aeabi_dsub>
 800c9ca:	9d01      	ldr	r5, [sp, #4]
 800c9cc:	4682      	mov	sl, r0
 800c9ce:	468b      	mov	fp, r1
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	f7f4 f8c0 	bl	8000b58 <__aeabi_d2iz>
 800c9d8:	4606      	mov	r6, r0
 800c9da:	f7f3 fda3 	bl	8000524 <__aeabi_i2d>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4640      	mov	r0, r8
 800c9e4:	4649      	mov	r1, r9
 800c9e6:	f7f3 fc4f 	bl	8000288 <__aeabi_dsub>
 800c9ea:	3630      	adds	r6, #48	; 0x30
 800c9ec:	f805 6b01 	strb.w	r6, [r5], #1
 800c9f0:	4652      	mov	r2, sl
 800c9f2:	465b      	mov	r3, fp
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	4689      	mov	r9, r1
 800c9f8:	f7f4 f870 	bl	8000adc <__aeabi_dcmplt>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d163      	bne.n	800cac8 <_dtoa_r+0x608>
 800ca00:	4642      	mov	r2, r8
 800ca02:	464b      	mov	r3, r9
 800ca04:	4936      	ldr	r1, [pc, #216]	; (800cae0 <_dtoa_r+0x620>)
 800ca06:	2000      	movs	r0, #0
 800ca08:	f7f3 fc3e 	bl	8000288 <__aeabi_dsub>
 800ca0c:	4652      	mov	r2, sl
 800ca0e:	465b      	mov	r3, fp
 800ca10:	f7f4 f864 	bl	8000adc <__aeabi_dcmplt>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	f040 80b5 	bne.w	800cb84 <_dtoa_r+0x6c4>
 800ca1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca1c:	429d      	cmp	r5, r3
 800ca1e:	d081      	beq.n	800c924 <_dtoa_r+0x464>
 800ca20:	4b30      	ldr	r3, [pc, #192]	; (800cae4 <_dtoa_r+0x624>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	4650      	mov	r0, sl
 800ca26:	4659      	mov	r1, fp
 800ca28:	f7f3 fde6 	bl	80005f8 <__aeabi_dmul>
 800ca2c:	4b2d      	ldr	r3, [pc, #180]	; (800cae4 <_dtoa_r+0x624>)
 800ca2e:	4682      	mov	sl, r0
 800ca30:	468b      	mov	fp, r1
 800ca32:	4640      	mov	r0, r8
 800ca34:	4649      	mov	r1, r9
 800ca36:	2200      	movs	r2, #0
 800ca38:	f7f3 fdde 	bl	80005f8 <__aeabi_dmul>
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	4689      	mov	r9, r1
 800ca40:	e7c6      	b.n	800c9d0 <_dtoa_r+0x510>
 800ca42:	4650      	mov	r0, sl
 800ca44:	4659      	mov	r1, fp
 800ca46:	f7f3 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ca4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca4c:	9d01      	ldr	r5, [sp, #4]
 800ca4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca50:	4682      	mov	sl, r0
 800ca52:	468b      	mov	fp, r1
 800ca54:	4649      	mov	r1, r9
 800ca56:	4640      	mov	r0, r8
 800ca58:	f7f4 f87e 	bl	8000b58 <__aeabi_d2iz>
 800ca5c:	4606      	mov	r6, r0
 800ca5e:	f7f3 fd61 	bl	8000524 <__aeabi_i2d>
 800ca62:	3630      	adds	r6, #48	; 0x30
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4640      	mov	r0, r8
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	f7f3 fc0c 	bl	8000288 <__aeabi_dsub>
 800ca70:	f805 6b01 	strb.w	r6, [r5], #1
 800ca74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca76:	429d      	cmp	r5, r3
 800ca78:	4680      	mov	r8, r0
 800ca7a:	4689      	mov	r9, r1
 800ca7c:	f04f 0200 	mov.w	r2, #0
 800ca80:	d124      	bne.n	800cacc <_dtoa_r+0x60c>
 800ca82:	4b1b      	ldr	r3, [pc, #108]	; (800caf0 <_dtoa_r+0x630>)
 800ca84:	4650      	mov	r0, sl
 800ca86:	4659      	mov	r1, fp
 800ca88:	f7f3 fc00 	bl	800028c <__adddf3>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4640      	mov	r0, r8
 800ca92:	4649      	mov	r1, r9
 800ca94:	f7f4 f840 	bl	8000b18 <__aeabi_dcmpgt>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	d173      	bne.n	800cb84 <_dtoa_r+0x6c4>
 800ca9c:	4652      	mov	r2, sl
 800ca9e:	465b      	mov	r3, fp
 800caa0:	4913      	ldr	r1, [pc, #76]	; (800caf0 <_dtoa_r+0x630>)
 800caa2:	2000      	movs	r0, #0
 800caa4:	f7f3 fbf0 	bl	8000288 <__aeabi_dsub>
 800caa8:	4602      	mov	r2, r0
 800caaa:	460b      	mov	r3, r1
 800caac:	4640      	mov	r0, r8
 800caae:	4649      	mov	r1, r9
 800cab0:	f7f4 f814 	bl	8000adc <__aeabi_dcmplt>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	f43f af35 	beq.w	800c924 <_dtoa_r+0x464>
 800caba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cabc:	1e6b      	subs	r3, r5, #1
 800cabe:	930f      	str	r3, [sp, #60]	; 0x3c
 800cac0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cac4:	2b30      	cmp	r3, #48	; 0x30
 800cac6:	d0f8      	beq.n	800caba <_dtoa_r+0x5fa>
 800cac8:	9700      	str	r7, [sp, #0]
 800caca:	e049      	b.n	800cb60 <_dtoa_r+0x6a0>
 800cacc:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <_dtoa_r+0x624>)
 800cace:	f7f3 fd93 	bl	80005f8 <__aeabi_dmul>
 800cad2:	4680      	mov	r8, r0
 800cad4:	4689      	mov	r9, r1
 800cad6:	e7bd      	b.n	800ca54 <_dtoa_r+0x594>
 800cad8:	0800f820 	.word	0x0800f820
 800cadc:	0800f7f8 	.word	0x0800f7f8
 800cae0:	3ff00000 	.word	0x3ff00000
 800cae4:	40240000 	.word	0x40240000
 800cae8:	401c0000 	.word	0x401c0000
 800caec:	40140000 	.word	0x40140000
 800caf0:	3fe00000 	.word	0x3fe00000
 800caf4:	9d01      	ldr	r5, [sp, #4]
 800caf6:	4656      	mov	r6, sl
 800caf8:	465f      	mov	r7, fp
 800cafa:	4642      	mov	r2, r8
 800cafc:	464b      	mov	r3, r9
 800cafe:	4630      	mov	r0, r6
 800cb00:	4639      	mov	r1, r7
 800cb02:	f7f3 fea3 	bl	800084c <__aeabi_ddiv>
 800cb06:	f7f4 f827 	bl	8000b58 <__aeabi_d2iz>
 800cb0a:	4682      	mov	sl, r0
 800cb0c:	f7f3 fd0a 	bl	8000524 <__aeabi_i2d>
 800cb10:	4642      	mov	r2, r8
 800cb12:	464b      	mov	r3, r9
 800cb14:	f7f3 fd70 	bl	80005f8 <__aeabi_dmul>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	4639      	mov	r1, r7
 800cb20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cb24:	f7f3 fbb0 	bl	8000288 <__aeabi_dsub>
 800cb28:	f805 6b01 	strb.w	r6, [r5], #1
 800cb2c:	9e01      	ldr	r6, [sp, #4]
 800cb2e:	9f03      	ldr	r7, [sp, #12]
 800cb30:	1bae      	subs	r6, r5, r6
 800cb32:	42b7      	cmp	r7, r6
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	d135      	bne.n	800cba6 <_dtoa_r+0x6e6>
 800cb3a:	f7f3 fba7 	bl	800028c <__adddf3>
 800cb3e:	4642      	mov	r2, r8
 800cb40:	464b      	mov	r3, r9
 800cb42:	4606      	mov	r6, r0
 800cb44:	460f      	mov	r7, r1
 800cb46:	f7f3 ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 800cb4a:	b9d0      	cbnz	r0, 800cb82 <_dtoa_r+0x6c2>
 800cb4c:	4642      	mov	r2, r8
 800cb4e:	464b      	mov	r3, r9
 800cb50:	4630      	mov	r0, r6
 800cb52:	4639      	mov	r1, r7
 800cb54:	f7f3 ffb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb58:	b110      	cbz	r0, 800cb60 <_dtoa_r+0x6a0>
 800cb5a:	f01a 0f01 	tst.w	sl, #1
 800cb5e:	d110      	bne.n	800cb82 <_dtoa_r+0x6c2>
 800cb60:	4620      	mov	r0, r4
 800cb62:	ee18 1a10 	vmov	r1, s16
 800cb66:	f000 ff71 	bl	800da4c <_Bfree>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	9800      	ldr	r0, [sp, #0]
 800cb6e:	702b      	strb	r3, [r5, #0]
 800cb70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb72:	3001      	adds	r0, #1
 800cb74:	6018      	str	r0, [r3, #0]
 800cb76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f43f acf1 	beq.w	800c560 <_dtoa_r+0xa0>
 800cb7e:	601d      	str	r5, [r3, #0]
 800cb80:	e4ee      	b.n	800c560 <_dtoa_r+0xa0>
 800cb82:	9f00      	ldr	r7, [sp, #0]
 800cb84:	462b      	mov	r3, r5
 800cb86:	461d      	mov	r5, r3
 800cb88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb8c:	2a39      	cmp	r2, #57	; 0x39
 800cb8e:	d106      	bne.n	800cb9e <_dtoa_r+0x6de>
 800cb90:	9a01      	ldr	r2, [sp, #4]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d1f7      	bne.n	800cb86 <_dtoa_r+0x6c6>
 800cb96:	9901      	ldr	r1, [sp, #4]
 800cb98:	2230      	movs	r2, #48	; 0x30
 800cb9a:	3701      	adds	r7, #1
 800cb9c:	700a      	strb	r2, [r1, #0]
 800cb9e:	781a      	ldrb	r2, [r3, #0]
 800cba0:	3201      	adds	r2, #1
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	e790      	b.n	800cac8 <_dtoa_r+0x608>
 800cba6:	4ba6      	ldr	r3, [pc, #664]	; (800ce40 <_dtoa_r+0x980>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f7f3 fd25 	bl	80005f8 <__aeabi_dmul>
 800cbae:	2200      	movs	r2, #0
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	f7f3 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d09d      	beq.n	800cafa <_dtoa_r+0x63a>
 800cbbe:	e7cf      	b.n	800cb60 <_dtoa_r+0x6a0>
 800cbc0:	9a08      	ldr	r2, [sp, #32]
 800cbc2:	2a00      	cmp	r2, #0
 800cbc4:	f000 80d7 	beq.w	800cd76 <_dtoa_r+0x8b6>
 800cbc8:	9a06      	ldr	r2, [sp, #24]
 800cbca:	2a01      	cmp	r2, #1
 800cbcc:	f300 80ba 	bgt.w	800cd44 <_dtoa_r+0x884>
 800cbd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbd2:	2a00      	cmp	r2, #0
 800cbd4:	f000 80b2 	beq.w	800cd3c <_dtoa_r+0x87c>
 800cbd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cbdc:	9e07      	ldr	r6, [sp, #28]
 800cbde:	9d04      	ldr	r5, [sp, #16]
 800cbe0:	9a04      	ldr	r2, [sp, #16]
 800cbe2:	441a      	add	r2, r3
 800cbe4:	9204      	str	r2, [sp, #16]
 800cbe6:	9a05      	ldr	r2, [sp, #20]
 800cbe8:	2101      	movs	r1, #1
 800cbea:	441a      	add	r2, r3
 800cbec:	4620      	mov	r0, r4
 800cbee:	9205      	str	r2, [sp, #20]
 800cbf0:	f001 f82e 	bl	800dc50 <__i2b>
 800cbf4:	4607      	mov	r7, r0
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	dd0c      	ble.n	800cc14 <_dtoa_r+0x754>
 800cbfa:	9b05      	ldr	r3, [sp, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	dd09      	ble.n	800cc14 <_dtoa_r+0x754>
 800cc00:	42ab      	cmp	r3, r5
 800cc02:	9a04      	ldr	r2, [sp, #16]
 800cc04:	bfa8      	it	ge
 800cc06:	462b      	movge	r3, r5
 800cc08:	1ad2      	subs	r2, r2, r3
 800cc0a:	9204      	str	r2, [sp, #16]
 800cc0c:	9a05      	ldr	r2, [sp, #20]
 800cc0e:	1aed      	subs	r5, r5, r3
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	9305      	str	r3, [sp, #20]
 800cc14:	9b07      	ldr	r3, [sp, #28]
 800cc16:	b31b      	cbz	r3, 800cc60 <_dtoa_r+0x7a0>
 800cc18:	9b08      	ldr	r3, [sp, #32]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 80af 	beq.w	800cd7e <_dtoa_r+0x8be>
 800cc20:	2e00      	cmp	r6, #0
 800cc22:	dd13      	ble.n	800cc4c <_dtoa_r+0x78c>
 800cc24:	4639      	mov	r1, r7
 800cc26:	4632      	mov	r2, r6
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f001 f8d1 	bl	800ddd0 <__pow5mult>
 800cc2e:	ee18 2a10 	vmov	r2, s16
 800cc32:	4601      	mov	r1, r0
 800cc34:	4607      	mov	r7, r0
 800cc36:	4620      	mov	r0, r4
 800cc38:	f001 f820 	bl	800dc7c <__multiply>
 800cc3c:	ee18 1a10 	vmov	r1, s16
 800cc40:	4680      	mov	r8, r0
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 ff02 	bl	800da4c <_Bfree>
 800cc48:	ee08 8a10 	vmov	s16, r8
 800cc4c:	9b07      	ldr	r3, [sp, #28]
 800cc4e:	1b9a      	subs	r2, r3, r6
 800cc50:	d006      	beq.n	800cc60 <_dtoa_r+0x7a0>
 800cc52:	ee18 1a10 	vmov	r1, s16
 800cc56:	4620      	mov	r0, r4
 800cc58:	f001 f8ba 	bl	800ddd0 <__pow5mult>
 800cc5c:	ee08 0a10 	vmov	s16, r0
 800cc60:	2101      	movs	r1, #1
 800cc62:	4620      	mov	r0, r4
 800cc64:	f000 fff4 	bl	800dc50 <__i2b>
 800cc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	f340 8088 	ble.w	800cd82 <_dtoa_r+0x8c2>
 800cc72:	461a      	mov	r2, r3
 800cc74:	4601      	mov	r1, r0
 800cc76:	4620      	mov	r0, r4
 800cc78:	f001 f8aa 	bl	800ddd0 <__pow5mult>
 800cc7c:	9b06      	ldr	r3, [sp, #24]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	4606      	mov	r6, r0
 800cc82:	f340 8081 	ble.w	800cd88 <_dtoa_r+0x8c8>
 800cc86:	f04f 0800 	mov.w	r8, #0
 800cc8a:	6933      	ldr	r3, [r6, #16]
 800cc8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc90:	6918      	ldr	r0, [r3, #16]
 800cc92:	f000 ff8d 	bl	800dbb0 <__hi0bits>
 800cc96:	f1c0 0020 	rsb	r0, r0, #32
 800cc9a:	9b05      	ldr	r3, [sp, #20]
 800cc9c:	4418      	add	r0, r3
 800cc9e:	f010 001f 	ands.w	r0, r0, #31
 800cca2:	f000 8092 	beq.w	800cdca <_dtoa_r+0x90a>
 800cca6:	f1c0 0320 	rsb	r3, r0, #32
 800ccaa:	2b04      	cmp	r3, #4
 800ccac:	f340 808a 	ble.w	800cdc4 <_dtoa_r+0x904>
 800ccb0:	f1c0 001c 	rsb	r0, r0, #28
 800ccb4:	9b04      	ldr	r3, [sp, #16]
 800ccb6:	4403      	add	r3, r0
 800ccb8:	9304      	str	r3, [sp, #16]
 800ccba:	9b05      	ldr	r3, [sp, #20]
 800ccbc:	4403      	add	r3, r0
 800ccbe:	4405      	add	r5, r0
 800ccc0:	9305      	str	r3, [sp, #20]
 800ccc2:	9b04      	ldr	r3, [sp, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	dd07      	ble.n	800ccd8 <_dtoa_r+0x818>
 800ccc8:	ee18 1a10 	vmov	r1, s16
 800cccc:	461a      	mov	r2, r3
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f001 f8d8 	bl	800de84 <__lshift>
 800ccd4:	ee08 0a10 	vmov	s16, r0
 800ccd8:	9b05      	ldr	r3, [sp, #20]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	dd05      	ble.n	800ccea <_dtoa_r+0x82a>
 800ccde:	4631      	mov	r1, r6
 800cce0:	461a      	mov	r2, r3
 800cce2:	4620      	mov	r0, r4
 800cce4:	f001 f8ce 	bl	800de84 <__lshift>
 800cce8:	4606      	mov	r6, r0
 800ccea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d06e      	beq.n	800cdce <_dtoa_r+0x90e>
 800ccf0:	ee18 0a10 	vmov	r0, s16
 800ccf4:	4631      	mov	r1, r6
 800ccf6:	f001 f935 	bl	800df64 <__mcmp>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	da67      	bge.n	800cdce <_dtoa_r+0x90e>
 800ccfe:	9b00      	ldr	r3, [sp, #0]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	ee18 1a10 	vmov	r1, s16
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	220a      	movs	r2, #10
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f000 febf 	bl	800da90 <__multadd>
 800cd12:	9b08      	ldr	r3, [sp, #32]
 800cd14:	ee08 0a10 	vmov	s16, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 81b1 	beq.w	800d080 <_dtoa_r+0xbc0>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	4639      	mov	r1, r7
 800cd22:	220a      	movs	r2, #10
 800cd24:	4620      	mov	r0, r4
 800cd26:	f000 feb3 	bl	800da90 <__multadd>
 800cd2a:	9b02      	ldr	r3, [sp, #8]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	4607      	mov	r7, r0
 800cd30:	f300 808e 	bgt.w	800ce50 <_dtoa_r+0x990>
 800cd34:	9b06      	ldr	r3, [sp, #24]
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	dc51      	bgt.n	800cdde <_dtoa_r+0x91e>
 800cd3a:	e089      	b.n	800ce50 <_dtoa_r+0x990>
 800cd3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd42:	e74b      	b.n	800cbdc <_dtoa_r+0x71c>
 800cd44:	9b03      	ldr	r3, [sp, #12]
 800cd46:	1e5e      	subs	r6, r3, #1
 800cd48:	9b07      	ldr	r3, [sp, #28]
 800cd4a:	42b3      	cmp	r3, r6
 800cd4c:	bfbf      	itttt	lt
 800cd4e:	9b07      	ldrlt	r3, [sp, #28]
 800cd50:	9607      	strlt	r6, [sp, #28]
 800cd52:	1af2      	sublt	r2, r6, r3
 800cd54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cd56:	bfb6      	itet	lt
 800cd58:	189b      	addlt	r3, r3, r2
 800cd5a:	1b9e      	subge	r6, r3, r6
 800cd5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cd5e:	9b03      	ldr	r3, [sp, #12]
 800cd60:	bfb8      	it	lt
 800cd62:	2600      	movlt	r6, #0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	bfb7      	itett	lt
 800cd68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cd6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cd70:	1a9d      	sublt	r5, r3, r2
 800cd72:	2300      	movlt	r3, #0
 800cd74:	e734      	b.n	800cbe0 <_dtoa_r+0x720>
 800cd76:	9e07      	ldr	r6, [sp, #28]
 800cd78:	9d04      	ldr	r5, [sp, #16]
 800cd7a:	9f08      	ldr	r7, [sp, #32]
 800cd7c:	e73b      	b.n	800cbf6 <_dtoa_r+0x736>
 800cd7e:	9a07      	ldr	r2, [sp, #28]
 800cd80:	e767      	b.n	800cc52 <_dtoa_r+0x792>
 800cd82:	9b06      	ldr	r3, [sp, #24]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	dc18      	bgt.n	800cdba <_dtoa_r+0x8fa>
 800cd88:	f1ba 0f00 	cmp.w	sl, #0
 800cd8c:	d115      	bne.n	800cdba <_dtoa_r+0x8fa>
 800cd8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd92:	b993      	cbnz	r3, 800cdba <_dtoa_r+0x8fa>
 800cd94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd98:	0d1b      	lsrs	r3, r3, #20
 800cd9a:	051b      	lsls	r3, r3, #20
 800cd9c:	b183      	cbz	r3, 800cdc0 <_dtoa_r+0x900>
 800cd9e:	9b04      	ldr	r3, [sp, #16]
 800cda0:	3301      	adds	r3, #1
 800cda2:	9304      	str	r3, [sp, #16]
 800cda4:	9b05      	ldr	r3, [sp, #20]
 800cda6:	3301      	adds	r3, #1
 800cda8:	9305      	str	r3, [sp, #20]
 800cdaa:	f04f 0801 	mov.w	r8, #1
 800cdae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f47f af6a 	bne.w	800cc8a <_dtoa_r+0x7ca>
 800cdb6:	2001      	movs	r0, #1
 800cdb8:	e76f      	b.n	800cc9a <_dtoa_r+0x7da>
 800cdba:	f04f 0800 	mov.w	r8, #0
 800cdbe:	e7f6      	b.n	800cdae <_dtoa_r+0x8ee>
 800cdc0:	4698      	mov	r8, r3
 800cdc2:	e7f4      	b.n	800cdae <_dtoa_r+0x8ee>
 800cdc4:	f43f af7d 	beq.w	800ccc2 <_dtoa_r+0x802>
 800cdc8:	4618      	mov	r0, r3
 800cdca:	301c      	adds	r0, #28
 800cdcc:	e772      	b.n	800ccb4 <_dtoa_r+0x7f4>
 800cdce:	9b03      	ldr	r3, [sp, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	dc37      	bgt.n	800ce44 <_dtoa_r+0x984>
 800cdd4:	9b06      	ldr	r3, [sp, #24]
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	dd34      	ble.n	800ce44 <_dtoa_r+0x984>
 800cdda:	9b03      	ldr	r3, [sp, #12]
 800cddc:	9302      	str	r3, [sp, #8]
 800cdde:	9b02      	ldr	r3, [sp, #8]
 800cde0:	b96b      	cbnz	r3, 800cdfe <_dtoa_r+0x93e>
 800cde2:	4631      	mov	r1, r6
 800cde4:	2205      	movs	r2, #5
 800cde6:	4620      	mov	r0, r4
 800cde8:	f000 fe52 	bl	800da90 <__multadd>
 800cdec:	4601      	mov	r1, r0
 800cdee:	4606      	mov	r6, r0
 800cdf0:	ee18 0a10 	vmov	r0, s16
 800cdf4:	f001 f8b6 	bl	800df64 <__mcmp>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	f73f adbb 	bgt.w	800c974 <_dtoa_r+0x4b4>
 800cdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce00:	9d01      	ldr	r5, [sp, #4]
 800ce02:	43db      	mvns	r3, r3
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	f04f 0800 	mov.w	r8, #0
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f000 fe1d 	bl	800da4c <_Bfree>
 800ce12:	2f00      	cmp	r7, #0
 800ce14:	f43f aea4 	beq.w	800cb60 <_dtoa_r+0x6a0>
 800ce18:	f1b8 0f00 	cmp.w	r8, #0
 800ce1c:	d005      	beq.n	800ce2a <_dtoa_r+0x96a>
 800ce1e:	45b8      	cmp	r8, r7
 800ce20:	d003      	beq.n	800ce2a <_dtoa_r+0x96a>
 800ce22:	4641      	mov	r1, r8
 800ce24:	4620      	mov	r0, r4
 800ce26:	f000 fe11 	bl	800da4c <_Bfree>
 800ce2a:	4639      	mov	r1, r7
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 fe0d 	bl	800da4c <_Bfree>
 800ce32:	e695      	b.n	800cb60 <_dtoa_r+0x6a0>
 800ce34:	2600      	movs	r6, #0
 800ce36:	4637      	mov	r7, r6
 800ce38:	e7e1      	b.n	800cdfe <_dtoa_r+0x93e>
 800ce3a:	9700      	str	r7, [sp, #0]
 800ce3c:	4637      	mov	r7, r6
 800ce3e:	e599      	b.n	800c974 <_dtoa_r+0x4b4>
 800ce40:	40240000 	.word	0x40240000
 800ce44:	9b08      	ldr	r3, [sp, #32]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f000 80ca 	beq.w	800cfe0 <_dtoa_r+0xb20>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	9302      	str	r3, [sp, #8]
 800ce50:	2d00      	cmp	r5, #0
 800ce52:	dd05      	ble.n	800ce60 <_dtoa_r+0x9a0>
 800ce54:	4639      	mov	r1, r7
 800ce56:	462a      	mov	r2, r5
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f001 f813 	bl	800de84 <__lshift>
 800ce5e:	4607      	mov	r7, r0
 800ce60:	f1b8 0f00 	cmp.w	r8, #0
 800ce64:	d05b      	beq.n	800cf1e <_dtoa_r+0xa5e>
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f000 fdaf 	bl	800d9cc <_Balloc>
 800ce6e:	4605      	mov	r5, r0
 800ce70:	b928      	cbnz	r0, 800ce7e <_dtoa_r+0x9be>
 800ce72:	4b87      	ldr	r3, [pc, #540]	; (800d090 <_dtoa_r+0xbd0>)
 800ce74:	4602      	mov	r2, r0
 800ce76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ce7a:	f7ff bb3b 	b.w	800c4f4 <_dtoa_r+0x34>
 800ce7e:	693a      	ldr	r2, [r7, #16]
 800ce80:	3202      	adds	r2, #2
 800ce82:	0092      	lsls	r2, r2, #2
 800ce84:	f107 010c 	add.w	r1, r7, #12
 800ce88:	300c      	adds	r0, #12
 800ce8a:	f7fd fcf9 	bl	800a880 <memcpy>
 800ce8e:	2201      	movs	r2, #1
 800ce90:	4629      	mov	r1, r5
 800ce92:	4620      	mov	r0, r4
 800ce94:	f000 fff6 	bl	800de84 <__lshift>
 800ce98:	9b01      	ldr	r3, [sp, #4]
 800ce9a:	f103 0901 	add.w	r9, r3, #1
 800ce9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cea2:	4413      	add	r3, r2
 800cea4:	9305      	str	r3, [sp, #20]
 800cea6:	f00a 0301 	and.w	r3, sl, #1
 800ceaa:	46b8      	mov	r8, r7
 800ceac:	9304      	str	r3, [sp, #16]
 800ceae:	4607      	mov	r7, r0
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	ee18 0a10 	vmov	r0, s16
 800ceb6:	f7ff fa75 	bl	800c3a4 <quorem>
 800ceba:	4641      	mov	r1, r8
 800cebc:	9002      	str	r0, [sp, #8]
 800cebe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cec2:	ee18 0a10 	vmov	r0, s16
 800cec6:	f001 f84d 	bl	800df64 <__mcmp>
 800ceca:	463a      	mov	r2, r7
 800cecc:	9003      	str	r0, [sp, #12]
 800cece:	4631      	mov	r1, r6
 800ced0:	4620      	mov	r0, r4
 800ced2:	f001 f863 	bl	800df9c <__mdiff>
 800ced6:	68c2      	ldr	r2, [r0, #12]
 800ced8:	f109 3bff 	add.w	fp, r9, #4294967295
 800cedc:	4605      	mov	r5, r0
 800cede:	bb02      	cbnz	r2, 800cf22 <_dtoa_r+0xa62>
 800cee0:	4601      	mov	r1, r0
 800cee2:	ee18 0a10 	vmov	r0, s16
 800cee6:	f001 f83d 	bl	800df64 <__mcmp>
 800ceea:	4602      	mov	r2, r0
 800ceec:	4629      	mov	r1, r5
 800ceee:	4620      	mov	r0, r4
 800cef0:	9207      	str	r2, [sp, #28]
 800cef2:	f000 fdab 	bl	800da4c <_Bfree>
 800cef6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cefa:	ea43 0102 	orr.w	r1, r3, r2
 800cefe:	9b04      	ldr	r3, [sp, #16]
 800cf00:	430b      	orrs	r3, r1
 800cf02:	464d      	mov	r5, r9
 800cf04:	d10f      	bne.n	800cf26 <_dtoa_r+0xa66>
 800cf06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf0a:	d02a      	beq.n	800cf62 <_dtoa_r+0xaa2>
 800cf0c:	9b03      	ldr	r3, [sp, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	dd02      	ble.n	800cf18 <_dtoa_r+0xa58>
 800cf12:	9b02      	ldr	r3, [sp, #8]
 800cf14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cf18:	f88b a000 	strb.w	sl, [fp]
 800cf1c:	e775      	b.n	800ce0a <_dtoa_r+0x94a>
 800cf1e:	4638      	mov	r0, r7
 800cf20:	e7ba      	b.n	800ce98 <_dtoa_r+0x9d8>
 800cf22:	2201      	movs	r2, #1
 800cf24:	e7e2      	b.n	800ceec <_dtoa_r+0xa2c>
 800cf26:	9b03      	ldr	r3, [sp, #12]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	db04      	blt.n	800cf36 <_dtoa_r+0xa76>
 800cf2c:	9906      	ldr	r1, [sp, #24]
 800cf2e:	430b      	orrs	r3, r1
 800cf30:	9904      	ldr	r1, [sp, #16]
 800cf32:	430b      	orrs	r3, r1
 800cf34:	d122      	bne.n	800cf7c <_dtoa_r+0xabc>
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	ddee      	ble.n	800cf18 <_dtoa_r+0xa58>
 800cf3a:	ee18 1a10 	vmov	r1, s16
 800cf3e:	2201      	movs	r2, #1
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 ff9f 	bl	800de84 <__lshift>
 800cf46:	4631      	mov	r1, r6
 800cf48:	ee08 0a10 	vmov	s16, r0
 800cf4c:	f001 f80a 	bl	800df64 <__mcmp>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	dc03      	bgt.n	800cf5c <_dtoa_r+0xa9c>
 800cf54:	d1e0      	bne.n	800cf18 <_dtoa_r+0xa58>
 800cf56:	f01a 0f01 	tst.w	sl, #1
 800cf5a:	d0dd      	beq.n	800cf18 <_dtoa_r+0xa58>
 800cf5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf60:	d1d7      	bne.n	800cf12 <_dtoa_r+0xa52>
 800cf62:	2339      	movs	r3, #57	; 0x39
 800cf64:	f88b 3000 	strb.w	r3, [fp]
 800cf68:	462b      	mov	r3, r5
 800cf6a:	461d      	mov	r5, r3
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf72:	2a39      	cmp	r2, #57	; 0x39
 800cf74:	d071      	beq.n	800d05a <_dtoa_r+0xb9a>
 800cf76:	3201      	adds	r2, #1
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	e746      	b.n	800ce0a <_dtoa_r+0x94a>
 800cf7c:	2a00      	cmp	r2, #0
 800cf7e:	dd07      	ble.n	800cf90 <_dtoa_r+0xad0>
 800cf80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf84:	d0ed      	beq.n	800cf62 <_dtoa_r+0xaa2>
 800cf86:	f10a 0301 	add.w	r3, sl, #1
 800cf8a:	f88b 3000 	strb.w	r3, [fp]
 800cf8e:	e73c      	b.n	800ce0a <_dtoa_r+0x94a>
 800cf90:	9b05      	ldr	r3, [sp, #20]
 800cf92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cf96:	4599      	cmp	r9, r3
 800cf98:	d047      	beq.n	800d02a <_dtoa_r+0xb6a>
 800cf9a:	ee18 1a10 	vmov	r1, s16
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	220a      	movs	r2, #10
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f000 fd74 	bl	800da90 <__multadd>
 800cfa8:	45b8      	cmp	r8, r7
 800cfaa:	ee08 0a10 	vmov	s16, r0
 800cfae:	f04f 0300 	mov.w	r3, #0
 800cfb2:	f04f 020a 	mov.w	r2, #10
 800cfb6:	4641      	mov	r1, r8
 800cfb8:	4620      	mov	r0, r4
 800cfba:	d106      	bne.n	800cfca <_dtoa_r+0xb0a>
 800cfbc:	f000 fd68 	bl	800da90 <__multadd>
 800cfc0:	4680      	mov	r8, r0
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	f109 0901 	add.w	r9, r9, #1
 800cfc8:	e772      	b.n	800ceb0 <_dtoa_r+0x9f0>
 800cfca:	f000 fd61 	bl	800da90 <__multadd>
 800cfce:	4639      	mov	r1, r7
 800cfd0:	4680      	mov	r8, r0
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	220a      	movs	r2, #10
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f000 fd5a 	bl	800da90 <__multadd>
 800cfdc:	4607      	mov	r7, r0
 800cfde:	e7f1      	b.n	800cfc4 <_dtoa_r+0xb04>
 800cfe0:	9b03      	ldr	r3, [sp, #12]
 800cfe2:	9302      	str	r3, [sp, #8]
 800cfe4:	9d01      	ldr	r5, [sp, #4]
 800cfe6:	ee18 0a10 	vmov	r0, s16
 800cfea:	4631      	mov	r1, r6
 800cfec:	f7ff f9da 	bl	800c3a4 <quorem>
 800cff0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cff4:	9b01      	ldr	r3, [sp, #4]
 800cff6:	f805 ab01 	strb.w	sl, [r5], #1
 800cffa:	1aea      	subs	r2, r5, r3
 800cffc:	9b02      	ldr	r3, [sp, #8]
 800cffe:	4293      	cmp	r3, r2
 800d000:	dd09      	ble.n	800d016 <_dtoa_r+0xb56>
 800d002:	ee18 1a10 	vmov	r1, s16
 800d006:	2300      	movs	r3, #0
 800d008:	220a      	movs	r2, #10
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fd40 	bl	800da90 <__multadd>
 800d010:	ee08 0a10 	vmov	s16, r0
 800d014:	e7e7      	b.n	800cfe6 <_dtoa_r+0xb26>
 800d016:	9b02      	ldr	r3, [sp, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	bfc8      	it	gt
 800d01c:	461d      	movgt	r5, r3
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	bfd8      	it	le
 800d022:	2501      	movle	r5, #1
 800d024:	441d      	add	r5, r3
 800d026:	f04f 0800 	mov.w	r8, #0
 800d02a:	ee18 1a10 	vmov	r1, s16
 800d02e:	2201      	movs	r2, #1
 800d030:	4620      	mov	r0, r4
 800d032:	f000 ff27 	bl	800de84 <__lshift>
 800d036:	4631      	mov	r1, r6
 800d038:	ee08 0a10 	vmov	s16, r0
 800d03c:	f000 ff92 	bl	800df64 <__mcmp>
 800d040:	2800      	cmp	r0, #0
 800d042:	dc91      	bgt.n	800cf68 <_dtoa_r+0xaa8>
 800d044:	d102      	bne.n	800d04c <_dtoa_r+0xb8c>
 800d046:	f01a 0f01 	tst.w	sl, #1
 800d04a:	d18d      	bne.n	800cf68 <_dtoa_r+0xaa8>
 800d04c:	462b      	mov	r3, r5
 800d04e:	461d      	mov	r5, r3
 800d050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d054:	2a30      	cmp	r2, #48	; 0x30
 800d056:	d0fa      	beq.n	800d04e <_dtoa_r+0xb8e>
 800d058:	e6d7      	b.n	800ce0a <_dtoa_r+0x94a>
 800d05a:	9a01      	ldr	r2, [sp, #4]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d184      	bne.n	800cf6a <_dtoa_r+0xaaa>
 800d060:	9b00      	ldr	r3, [sp, #0]
 800d062:	3301      	adds	r3, #1
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	2331      	movs	r3, #49	; 0x31
 800d068:	7013      	strb	r3, [r2, #0]
 800d06a:	e6ce      	b.n	800ce0a <_dtoa_r+0x94a>
 800d06c:	4b09      	ldr	r3, [pc, #36]	; (800d094 <_dtoa_r+0xbd4>)
 800d06e:	f7ff ba95 	b.w	800c59c <_dtoa_r+0xdc>
 800d072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d074:	2b00      	cmp	r3, #0
 800d076:	f47f aa6e 	bne.w	800c556 <_dtoa_r+0x96>
 800d07a:	4b07      	ldr	r3, [pc, #28]	; (800d098 <_dtoa_r+0xbd8>)
 800d07c:	f7ff ba8e 	b.w	800c59c <_dtoa_r+0xdc>
 800d080:	9b02      	ldr	r3, [sp, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	dcae      	bgt.n	800cfe4 <_dtoa_r+0xb24>
 800d086:	9b06      	ldr	r3, [sp, #24]
 800d088:	2b02      	cmp	r3, #2
 800d08a:	f73f aea8 	bgt.w	800cdde <_dtoa_r+0x91e>
 800d08e:	e7a9      	b.n	800cfe4 <_dtoa_r+0xb24>
 800d090:	0800f6ac 	.word	0x0800f6ac
 800d094:	0800f474 	.word	0x0800f474
 800d098:	0800f62d 	.word	0x0800f62d

0800d09c <std>:
 800d09c:	2300      	movs	r3, #0
 800d09e:	b510      	push	{r4, lr}
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d0a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0aa:	6083      	str	r3, [r0, #8]
 800d0ac:	8181      	strh	r1, [r0, #12]
 800d0ae:	6643      	str	r3, [r0, #100]	; 0x64
 800d0b0:	81c2      	strh	r2, [r0, #14]
 800d0b2:	6183      	str	r3, [r0, #24]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	2208      	movs	r2, #8
 800d0b8:	305c      	adds	r0, #92	; 0x5c
 800d0ba:	f7fd fbef 	bl	800a89c <memset>
 800d0be:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <std+0x38>)
 800d0c0:	6263      	str	r3, [r4, #36]	; 0x24
 800d0c2:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <std+0x3c>)
 800d0c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0c6:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <std+0x40>)
 800d0c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0ca:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <std+0x44>)
 800d0cc:	6224      	str	r4, [r4, #32]
 800d0ce:	6323      	str	r3, [r4, #48]	; 0x30
 800d0d0:	bd10      	pop	{r4, pc}
 800d0d2:	bf00      	nop
 800d0d4:	0800ead9 	.word	0x0800ead9
 800d0d8:	0800eafb 	.word	0x0800eafb
 800d0dc:	0800eb33 	.word	0x0800eb33
 800d0e0:	0800eb57 	.word	0x0800eb57

0800d0e4 <_cleanup_r>:
 800d0e4:	4901      	ldr	r1, [pc, #4]	; (800d0ec <_cleanup_r+0x8>)
 800d0e6:	f000 b8c1 	b.w	800d26c <_fwalk_reent>
 800d0ea:	bf00      	nop
 800d0ec:	0800ee85 	.word	0x0800ee85

0800d0f0 <__sfmoreglue>:
 800d0f0:	b570      	push	{r4, r5, r6, lr}
 800d0f2:	2268      	movs	r2, #104	; 0x68
 800d0f4:	1e4d      	subs	r5, r1, #1
 800d0f6:	4355      	muls	r5, r2
 800d0f8:	460e      	mov	r6, r1
 800d0fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0fe:	f001 f9a9 	bl	800e454 <_malloc_r>
 800d102:	4604      	mov	r4, r0
 800d104:	b140      	cbz	r0, 800d118 <__sfmoreglue+0x28>
 800d106:	2100      	movs	r1, #0
 800d108:	e9c0 1600 	strd	r1, r6, [r0]
 800d10c:	300c      	adds	r0, #12
 800d10e:	60a0      	str	r0, [r4, #8]
 800d110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d114:	f7fd fbc2 	bl	800a89c <memset>
 800d118:	4620      	mov	r0, r4
 800d11a:	bd70      	pop	{r4, r5, r6, pc}

0800d11c <__sfp_lock_acquire>:
 800d11c:	4801      	ldr	r0, [pc, #4]	; (800d124 <__sfp_lock_acquire+0x8>)
 800d11e:	f000 bc38 	b.w	800d992 <__retarget_lock_acquire_recursive>
 800d122:	bf00      	nop
 800d124:	2000509d 	.word	0x2000509d

0800d128 <__sfp_lock_release>:
 800d128:	4801      	ldr	r0, [pc, #4]	; (800d130 <__sfp_lock_release+0x8>)
 800d12a:	f000 bc33 	b.w	800d994 <__retarget_lock_release_recursive>
 800d12e:	bf00      	nop
 800d130:	2000509d 	.word	0x2000509d

0800d134 <__sinit_lock_acquire>:
 800d134:	4801      	ldr	r0, [pc, #4]	; (800d13c <__sinit_lock_acquire+0x8>)
 800d136:	f000 bc2c 	b.w	800d992 <__retarget_lock_acquire_recursive>
 800d13a:	bf00      	nop
 800d13c:	2000509e 	.word	0x2000509e

0800d140 <__sinit_lock_release>:
 800d140:	4801      	ldr	r0, [pc, #4]	; (800d148 <__sinit_lock_release+0x8>)
 800d142:	f000 bc27 	b.w	800d994 <__retarget_lock_release_recursive>
 800d146:	bf00      	nop
 800d148:	2000509e 	.word	0x2000509e

0800d14c <__sinit>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	4604      	mov	r4, r0
 800d150:	f7ff fff0 	bl	800d134 <__sinit_lock_acquire>
 800d154:	69a3      	ldr	r3, [r4, #24]
 800d156:	b11b      	cbz	r3, 800d160 <__sinit+0x14>
 800d158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d15c:	f7ff bff0 	b.w	800d140 <__sinit_lock_release>
 800d160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d164:	6523      	str	r3, [r4, #80]	; 0x50
 800d166:	4b13      	ldr	r3, [pc, #76]	; (800d1b4 <__sinit+0x68>)
 800d168:	4a13      	ldr	r2, [pc, #76]	; (800d1b8 <__sinit+0x6c>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d16e:	42a3      	cmp	r3, r4
 800d170:	bf04      	itt	eq
 800d172:	2301      	moveq	r3, #1
 800d174:	61a3      	streq	r3, [r4, #24]
 800d176:	4620      	mov	r0, r4
 800d178:	f000 f820 	bl	800d1bc <__sfp>
 800d17c:	6060      	str	r0, [r4, #4]
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 f81c 	bl	800d1bc <__sfp>
 800d184:	60a0      	str	r0, [r4, #8]
 800d186:	4620      	mov	r0, r4
 800d188:	f000 f818 	bl	800d1bc <__sfp>
 800d18c:	2200      	movs	r2, #0
 800d18e:	60e0      	str	r0, [r4, #12]
 800d190:	2104      	movs	r1, #4
 800d192:	6860      	ldr	r0, [r4, #4]
 800d194:	f7ff ff82 	bl	800d09c <std>
 800d198:	68a0      	ldr	r0, [r4, #8]
 800d19a:	2201      	movs	r2, #1
 800d19c:	2109      	movs	r1, #9
 800d19e:	f7ff ff7d 	bl	800d09c <std>
 800d1a2:	68e0      	ldr	r0, [r4, #12]
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	2112      	movs	r1, #18
 800d1a8:	f7ff ff78 	bl	800d09c <std>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	61a3      	str	r3, [r4, #24]
 800d1b0:	e7d2      	b.n	800d158 <__sinit+0xc>
 800d1b2:	bf00      	nop
 800d1b4:	0800f460 	.word	0x0800f460
 800d1b8:	0800d0e5 	.word	0x0800d0e5

0800d1bc <__sfp>:
 800d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1be:	4607      	mov	r7, r0
 800d1c0:	f7ff ffac 	bl	800d11c <__sfp_lock_acquire>
 800d1c4:	4b1e      	ldr	r3, [pc, #120]	; (800d240 <__sfp+0x84>)
 800d1c6:	681e      	ldr	r6, [r3, #0]
 800d1c8:	69b3      	ldr	r3, [r6, #24]
 800d1ca:	b913      	cbnz	r3, 800d1d2 <__sfp+0x16>
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f7ff ffbd 	bl	800d14c <__sinit>
 800d1d2:	3648      	adds	r6, #72	; 0x48
 800d1d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	d503      	bpl.n	800d1e4 <__sfp+0x28>
 800d1dc:	6833      	ldr	r3, [r6, #0]
 800d1de:	b30b      	cbz	r3, 800d224 <__sfp+0x68>
 800d1e0:	6836      	ldr	r6, [r6, #0]
 800d1e2:	e7f7      	b.n	800d1d4 <__sfp+0x18>
 800d1e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1e8:	b9d5      	cbnz	r5, 800d220 <__sfp+0x64>
 800d1ea:	4b16      	ldr	r3, [pc, #88]	; (800d244 <__sfp+0x88>)
 800d1ec:	60e3      	str	r3, [r4, #12]
 800d1ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1f2:	6665      	str	r5, [r4, #100]	; 0x64
 800d1f4:	f000 fbcc 	bl	800d990 <__retarget_lock_init_recursive>
 800d1f8:	f7ff ff96 	bl	800d128 <__sfp_lock_release>
 800d1fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d204:	6025      	str	r5, [r4, #0]
 800d206:	61a5      	str	r5, [r4, #24]
 800d208:	2208      	movs	r2, #8
 800d20a:	4629      	mov	r1, r5
 800d20c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d210:	f7fd fb44 	bl	800a89c <memset>
 800d214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d21c:	4620      	mov	r0, r4
 800d21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d220:	3468      	adds	r4, #104	; 0x68
 800d222:	e7d9      	b.n	800d1d8 <__sfp+0x1c>
 800d224:	2104      	movs	r1, #4
 800d226:	4638      	mov	r0, r7
 800d228:	f7ff ff62 	bl	800d0f0 <__sfmoreglue>
 800d22c:	4604      	mov	r4, r0
 800d22e:	6030      	str	r0, [r6, #0]
 800d230:	2800      	cmp	r0, #0
 800d232:	d1d5      	bne.n	800d1e0 <__sfp+0x24>
 800d234:	f7ff ff78 	bl	800d128 <__sfp_lock_release>
 800d238:	230c      	movs	r3, #12
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	e7ee      	b.n	800d21c <__sfp+0x60>
 800d23e:	bf00      	nop
 800d240:	0800f460 	.word	0x0800f460
 800d244:	ffff0001 	.word	0xffff0001

0800d248 <fiprintf>:
 800d248:	b40e      	push	{r1, r2, r3}
 800d24a:	b503      	push	{r0, r1, lr}
 800d24c:	4601      	mov	r1, r0
 800d24e:	ab03      	add	r3, sp, #12
 800d250:	4805      	ldr	r0, [pc, #20]	; (800d268 <fiprintf+0x20>)
 800d252:	f853 2b04 	ldr.w	r2, [r3], #4
 800d256:	6800      	ldr	r0, [r0, #0]
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	f001 faf5 	bl	800e848 <_vfiprintf_r>
 800d25e:	b002      	add	sp, #8
 800d260:	f85d eb04 	ldr.w	lr, [sp], #4
 800d264:	b003      	add	sp, #12
 800d266:	4770      	bx	lr
 800d268:	20000010 	.word	0x20000010

0800d26c <_fwalk_reent>:
 800d26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d270:	4606      	mov	r6, r0
 800d272:	4688      	mov	r8, r1
 800d274:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d278:	2700      	movs	r7, #0
 800d27a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d27e:	f1b9 0901 	subs.w	r9, r9, #1
 800d282:	d505      	bpl.n	800d290 <_fwalk_reent+0x24>
 800d284:	6824      	ldr	r4, [r4, #0]
 800d286:	2c00      	cmp	r4, #0
 800d288:	d1f7      	bne.n	800d27a <_fwalk_reent+0xe>
 800d28a:	4638      	mov	r0, r7
 800d28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d290:	89ab      	ldrh	r3, [r5, #12]
 800d292:	2b01      	cmp	r3, #1
 800d294:	d907      	bls.n	800d2a6 <_fwalk_reent+0x3a>
 800d296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d29a:	3301      	adds	r3, #1
 800d29c:	d003      	beq.n	800d2a6 <_fwalk_reent+0x3a>
 800d29e:	4629      	mov	r1, r5
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	47c0      	blx	r8
 800d2a4:	4307      	orrs	r7, r0
 800d2a6:	3568      	adds	r5, #104	; 0x68
 800d2a8:	e7e9      	b.n	800d27e <_fwalk_reent+0x12>

0800d2aa <rshift>:
 800d2aa:	6903      	ldr	r3, [r0, #16]
 800d2ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d2b8:	f100 0414 	add.w	r4, r0, #20
 800d2bc:	dd45      	ble.n	800d34a <rshift+0xa0>
 800d2be:	f011 011f 	ands.w	r1, r1, #31
 800d2c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d2c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d2ca:	d10c      	bne.n	800d2e6 <rshift+0x3c>
 800d2cc:	f100 0710 	add.w	r7, r0, #16
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	42b1      	cmp	r1, r6
 800d2d4:	d334      	bcc.n	800d340 <rshift+0x96>
 800d2d6:	1a9b      	subs	r3, r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	1eea      	subs	r2, r5, #3
 800d2dc:	4296      	cmp	r6, r2
 800d2de:	bf38      	it	cc
 800d2e0:	2300      	movcc	r3, #0
 800d2e2:	4423      	add	r3, r4
 800d2e4:	e015      	b.n	800d312 <rshift+0x68>
 800d2e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2ea:	f1c1 0820 	rsb	r8, r1, #32
 800d2ee:	40cf      	lsrs	r7, r1
 800d2f0:	f105 0e04 	add.w	lr, r5, #4
 800d2f4:	46a1      	mov	r9, r4
 800d2f6:	4576      	cmp	r6, lr
 800d2f8:	46f4      	mov	ip, lr
 800d2fa:	d815      	bhi.n	800d328 <rshift+0x7e>
 800d2fc:	1a9a      	subs	r2, r3, r2
 800d2fe:	0092      	lsls	r2, r2, #2
 800d300:	3a04      	subs	r2, #4
 800d302:	3501      	adds	r5, #1
 800d304:	42ae      	cmp	r6, r5
 800d306:	bf38      	it	cc
 800d308:	2200      	movcc	r2, #0
 800d30a:	18a3      	adds	r3, r4, r2
 800d30c:	50a7      	str	r7, [r4, r2]
 800d30e:	b107      	cbz	r7, 800d312 <rshift+0x68>
 800d310:	3304      	adds	r3, #4
 800d312:	1b1a      	subs	r2, r3, r4
 800d314:	42a3      	cmp	r3, r4
 800d316:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d31a:	bf08      	it	eq
 800d31c:	2300      	moveq	r3, #0
 800d31e:	6102      	str	r2, [r0, #16]
 800d320:	bf08      	it	eq
 800d322:	6143      	streq	r3, [r0, #20]
 800d324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d328:	f8dc c000 	ldr.w	ip, [ip]
 800d32c:	fa0c fc08 	lsl.w	ip, ip, r8
 800d330:	ea4c 0707 	orr.w	r7, ip, r7
 800d334:	f849 7b04 	str.w	r7, [r9], #4
 800d338:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d33c:	40cf      	lsrs	r7, r1
 800d33e:	e7da      	b.n	800d2f6 <rshift+0x4c>
 800d340:	f851 cb04 	ldr.w	ip, [r1], #4
 800d344:	f847 cf04 	str.w	ip, [r7, #4]!
 800d348:	e7c3      	b.n	800d2d2 <rshift+0x28>
 800d34a:	4623      	mov	r3, r4
 800d34c:	e7e1      	b.n	800d312 <rshift+0x68>

0800d34e <__hexdig_fun>:
 800d34e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d352:	2b09      	cmp	r3, #9
 800d354:	d802      	bhi.n	800d35c <__hexdig_fun+0xe>
 800d356:	3820      	subs	r0, #32
 800d358:	b2c0      	uxtb	r0, r0
 800d35a:	4770      	bx	lr
 800d35c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d360:	2b05      	cmp	r3, #5
 800d362:	d801      	bhi.n	800d368 <__hexdig_fun+0x1a>
 800d364:	3847      	subs	r0, #71	; 0x47
 800d366:	e7f7      	b.n	800d358 <__hexdig_fun+0xa>
 800d368:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d36c:	2b05      	cmp	r3, #5
 800d36e:	d801      	bhi.n	800d374 <__hexdig_fun+0x26>
 800d370:	3827      	subs	r0, #39	; 0x27
 800d372:	e7f1      	b.n	800d358 <__hexdig_fun+0xa>
 800d374:	2000      	movs	r0, #0
 800d376:	4770      	bx	lr

0800d378 <__gethex>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	ed2d 8b02 	vpush	{d8}
 800d380:	b089      	sub	sp, #36	; 0x24
 800d382:	ee08 0a10 	vmov	s16, r0
 800d386:	9304      	str	r3, [sp, #16]
 800d388:	4bb4      	ldr	r3, [pc, #720]	; (800d65c <__gethex+0x2e4>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	4618      	mov	r0, r3
 800d390:	468b      	mov	fp, r1
 800d392:	4690      	mov	r8, r2
 800d394:	f7f2 ff1c 	bl	80001d0 <strlen>
 800d398:	9b01      	ldr	r3, [sp, #4]
 800d39a:	f8db 2000 	ldr.w	r2, [fp]
 800d39e:	4403      	add	r3, r0
 800d3a0:	4682      	mov	sl, r0
 800d3a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d3a6:	9305      	str	r3, [sp, #20]
 800d3a8:	1c93      	adds	r3, r2, #2
 800d3aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d3ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d3b2:	32fe      	adds	r2, #254	; 0xfe
 800d3b4:	18d1      	adds	r1, r2, r3
 800d3b6:	461f      	mov	r7, r3
 800d3b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3bc:	9100      	str	r1, [sp, #0]
 800d3be:	2830      	cmp	r0, #48	; 0x30
 800d3c0:	d0f8      	beq.n	800d3b4 <__gethex+0x3c>
 800d3c2:	f7ff ffc4 	bl	800d34e <__hexdig_fun>
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d13a      	bne.n	800d442 <__gethex+0xca>
 800d3cc:	9901      	ldr	r1, [sp, #4]
 800d3ce:	4652      	mov	r2, sl
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	f001 fbc4 	bl	800eb5e <strncmp>
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d168      	bne.n	800d4ae <__gethex+0x136>
 800d3dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d3e0:	eb07 060a 	add.w	r6, r7, sl
 800d3e4:	f7ff ffb3 	bl	800d34e <__hexdig_fun>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d062      	beq.n	800d4b2 <__gethex+0x13a>
 800d3ec:	4633      	mov	r3, r6
 800d3ee:	7818      	ldrb	r0, [r3, #0]
 800d3f0:	2830      	cmp	r0, #48	; 0x30
 800d3f2:	461f      	mov	r7, r3
 800d3f4:	f103 0301 	add.w	r3, r3, #1
 800d3f8:	d0f9      	beq.n	800d3ee <__gethex+0x76>
 800d3fa:	f7ff ffa8 	bl	800d34e <__hexdig_fun>
 800d3fe:	2301      	movs	r3, #1
 800d400:	fab0 f480 	clz	r4, r0
 800d404:	0964      	lsrs	r4, r4, #5
 800d406:	4635      	mov	r5, r6
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	463a      	mov	r2, r7
 800d40c:	4616      	mov	r6, r2
 800d40e:	3201      	adds	r2, #1
 800d410:	7830      	ldrb	r0, [r6, #0]
 800d412:	f7ff ff9c 	bl	800d34e <__hexdig_fun>
 800d416:	2800      	cmp	r0, #0
 800d418:	d1f8      	bne.n	800d40c <__gethex+0x94>
 800d41a:	9901      	ldr	r1, [sp, #4]
 800d41c:	4652      	mov	r2, sl
 800d41e:	4630      	mov	r0, r6
 800d420:	f001 fb9d 	bl	800eb5e <strncmp>
 800d424:	b980      	cbnz	r0, 800d448 <__gethex+0xd0>
 800d426:	b94d      	cbnz	r5, 800d43c <__gethex+0xc4>
 800d428:	eb06 050a 	add.w	r5, r6, sl
 800d42c:	462a      	mov	r2, r5
 800d42e:	4616      	mov	r6, r2
 800d430:	3201      	adds	r2, #1
 800d432:	7830      	ldrb	r0, [r6, #0]
 800d434:	f7ff ff8b 	bl	800d34e <__hexdig_fun>
 800d438:	2800      	cmp	r0, #0
 800d43a:	d1f8      	bne.n	800d42e <__gethex+0xb6>
 800d43c:	1bad      	subs	r5, r5, r6
 800d43e:	00ad      	lsls	r5, r5, #2
 800d440:	e004      	b.n	800d44c <__gethex+0xd4>
 800d442:	2400      	movs	r4, #0
 800d444:	4625      	mov	r5, r4
 800d446:	e7e0      	b.n	800d40a <__gethex+0x92>
 800d448:	2d00      	cmp	r5, #0
 800d44a:	d1f7      	bne.n	800d43c <__gethex+0xc4>
 800d44c:	7833      	ldrb	r3, [r6, #0]
 800d44e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d452:	2b50      	cmp	r3, #80	; 0x50
 800d454:	d13b      	bne.n	800d4ce <__gethex+0x156>
 800d456:	7873      	ldrb	r3, [r6, #1]
 800d458:	2b2b      	cmp	r3, #43	; 0x2b
 800d45a:	d02c      	beq.n	800d4b6 <__gethex+0x13e>
 800d45c:	2b2d      	cmp	r3, #45	; 0x2d
 800d45e:	d02e      	beq.n	800d4be <__gethex+0x146>
 800d460:	1c71      	adds	r1, r6, #1
 800d462:	f04f 0900 	mov.w	r9, #0
 800d466:	7808      	ldrb	r0, [r1, #0]
 800d468:	f7ff ff71 	bl	800d34e <__hexdig_fun>
 800d46c:	1e43      	subs	r3, r0, #1
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	2b18      	cmp	r3, #24
 800d472:	d82c      	bhi.n	800d4ce <__gethex+0x156>
 800d474:	f1a0 0210 	sub.w	r2, r0, #16
 800d478:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d47c:	f7ff ff67 	bl	800d34e <__hexdig_fun>
 800d480:	1e43      	subs	r3, r0, #1
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2b18      	cmp	r3, #24
 800d486:	d91d      	bls.n	800d4c4 <__gethex+0x14c>
 800d488:	f1b9 0f00 	cmp.w	r9, #0
 800d48c:	d000      	beq.n	800d490 <__gethex+0x118>
 800d48e:	4252      	negs	r2, r2
 800d490:	4415      	add	r5, r2
 800d492:	f8cb 1000 	str.w	r1, [fp]
 800d496:	b1e4      	cbz	r4, 800d4d2 <__gethex+0x15a>
 800d498:	9b00      	ldr	r3, [sp, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	bf14      	ite	ne
 800d49e:	2700      	movne	r7, #0
 800d4a0:	2706      	moveq	r7, #6
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	b009      	add	sp, #36	; 0x24
 800d4a6:	ecbd 8b02 	vpop	{d8}
 800d4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ae:	463e      	mov	r6, r7
 800d4b0:	4625      	mov	r5, r4
 800d4b2:	2401      	movs	r4, #1
 800d4b4:	e7ca      	b.n	800d44c <__gethex+0xd4>
 800d4b6:	f04f 0900 	mov.w	r9, #0
 800d4ba:	1cb1      	adds	r1, r6, #2
 800d4bc:	e7d3      	b.n	800d466 <__gethex+0xee>
 800d4be:	f04f 0901 	mov.w	r9, #1
 800d4c2:	e7fa      	b.n	800d4ba <__gethex+0x142>
 800d4c4:	230a      	movs	r3, #10
 800d4c6:	fb03 0202 	mla	r2, r3, r2, r0
 800d4ca:	3a10      	subs	r2, #16
 800d4cc:	e7d4      	b.n	800d478 <__gethex+0x100>
 800d4ce:	4631      	mov	r1, r6
 800d4d0:	e7df      	b.n	800d492 <__gethex+0x11a>
 800d4d2:	1bf3      	subs	r3, r6, r7
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	2b07      	cmp	r3, #7
 800d4da:	dc0b      	bgt.n	800d4f4 <__gethex+0x17c>
 800d4dc:	ee18 0a10 	vmov	r0, s16
 800d4e0:	f000 fa74 	bl	800d9cc <_Balloc>
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	b940      	cbnz	r0, 800d4fa <__gethex+0x182>
 800d4e8:	4b5d      	ldr	r3, [pc, #372]	; (800d660 <__gethex+0x2e8>)
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	21de      	movs	r1, #222	; 0xde
 800d4ee:	485d      	ldr	r0, [pc, #372]	; (800d664 <__gethex+0x2ec>)
 800d4f0:	f7fe ff3a 	bl	800c368 <__assert_func>
 800d4f4:	3101      	adds	r1, #1
 800d4f6:	105b      	asrs	r3, r3, #1
 800d4f8:	e7ee      	b.n	800d4d8 <__gethex+0x160>
 800d4fa:	f100 0914 	add.w	r9, r0, #20
 800d4fe:	f04f 0b00 	mov.w	fp, #0
 800d502:	f1ca 0301 	rsb	r3, sl, #1
 800d506:	f8cd 9008 	str.w	r9, [sp, #8]
 800d50a:	f8cd b000 	str.w	fp, [sp]
 800d50e:	9306      	str	r3, [sp, #24]
 800d510:	42b7      	cmp	r7, r6
 800d512:	d340      	bcc.n	800d596 <__gethex+0x21e>
 800d514:	9802      	ldr	r0, [sp, #8]
 800d516:	9b00      	ldr	r3, [sp, #0]
 800d518:	f840 3b04 	str.w	r3, [r0], #4
 800d51c:	eba0 0009 	sub.w	r0, r0, r9
 800d520:	1080      	asrs	r0, r0, #2
 800d522:	0146      	lsls	r6, r0, #5
 800d524:	6120      	str	r0, [r4, #16]
 800d526:	4618      	mov	r0, r3
 800d528:	f000 fb42 	bl	800dbb0 <__hi0bits>
 800d52c:	1a30      	subs	r0, r6, r0
 800d52e:	f8d8 6000 	ldr.w	r6, [r8]
 800d532:	42b0      	cmp	r0, r6
 800d534:	dd63      	ble.n	800d5fe <__gethex+0x286>
 800d536:	1b87      	subs	r7, r0, r6
 800d538:	4639      	mov	r1, r7
 800d53a:	4620      	mov	r0, r4
 800d53c:	f000 fee6 	bl	800e30c <__any_on>
 800d540:	4682      	mov	sl, r0
 800d542:	b1a8      	cbz	r0, 800d570 <__gethex+0x1f8>
 800d544:	1e7b      	subs	r3, r7, #1
 800d546:	1159      	asrs	r1, r3, #5
 800d548:	f003 021f 	and.w	r2, r3, #31
 800d54c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d550:	f04f 0a01 	mov.w	sl, #1
 800d554:	fa0a f202 	lsl.w	r2, sl, r2
 800d558:	420a      	tst	r2, r1
 800d55a:	d009      	beq.n	800d570 <__gethex+0x1f8>
 800d55c:	4553      	cmp	r3, sl
 800d55e:	dd05      	ble.n	800d56c <__gethex+0x1f4>
 800d560:	1eb9      	subs	r1, r7, #2
 800d562:	4620      	mov	r0, r4
 800d564:	f000 fed2 	bl	800e30c <__any_on>
 800d568:	2800      	cmp	r0, #0
 800d56a:	d145      	bne.n	800d5f8 <__gethex+0x280>
 800d56c:	f04f 0a02 	mov.w	sl, #2
 800d570:	4639      	mov	r1, r7
 800d572:	4620      	mov	r0, r4
 800d574:	f7ff fe99 	bl	800d2aa <rshift>
 800d578:	443d      	add	r5, r7
 800d57a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d57e:	42ab      	cmp	r3, r5
 800d580:	da4c      	bge.n	800d61c <__gethex+0x2a4>
 800d582:	ee18 0a10 	vmov	r0, s16
 800d586:	4621      	mov	r1, r4
 800d588:	f000 fa60 	bl	800da4c <_Bfree>
 800d58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d58e:	2300      	movs	r3, #0
 800d590:	6013      	str	r3, [r2, #0]
 800d592:	27a3      	movs	r7, #163	; 0xa3
 800d594:	e785      	b.n	800d4a2 <__gethex+0x12a>
 800d596:	1e73      	subs	r3, r6, #1
 800d598:	9a05      	ldr	r2, [sp, #20]
 800d59a:	9303      	str	r3, [sp, #12]
 800d59c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d019      	beq.n	800d5d8 <__gethex+0x260>
 800d5a4:	f1bb 0f20 	cmp.w	fp, #32
 800d5a8:	d107      	bne.n	800d5ba <__gethex+0x242>
 800d5aa:	9b02      	ldr	r3, [sp, #8]
 800d5ac:	9a00      	ldr	r2, [sp, #0]
 800d5ae:	f843 2b04 	str.w	r2, [r3], #4
 800d5b2:	9302      	str	r3, [sp, #8]
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	469b      	mov	fp, r3
 800d5ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d5be:	f7ff fec6 	bl	800d34e <__hexdig_fun>
 800d5c2:	9b00      	ldr	r3, [sp, #0]
 800d5c4:	f000 000f 	and.w	r0, r0, #15
 800d5c8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d5cc:	4303      	orrs	r3, r0
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	f10b 0b04 	add.w	fp, fp, #4
 800d5d4:	9b03      	ldr	r3, [sp, #12]
 800d5d6:	e00d      	b.n	800d5f4 <__gethex+0x27c>
 800d5d8:	9b03      	ldr	r3, [sp, #12]
 800d5da:	9a06      	ldr	r2, [sp, #24]
 800d5dc:	4413      	add	r3, r2
 800d5de:	42bb      	cmp	r3, r7
 800d5e0:	d3e0      	bcc.n	800d5a4 <__gethex+0x22c>
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	9901      	ldr	r1, [sp, #4]
 800d5e6:	9307      	str	r3, [sp, #28]
 800d5e8:	4652      	mov	r2, sl
 800d5ea:	f001 fab8 	bl	800eb5e <strncmp>
 800d5ee:	9b07      	ldr	r3, [sp, #28]
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	d1d7      	bne.n	800d5a4 <__gethex+0x22c>
 800d5f4:	461e      	mov	r6, r3
 800d5f6:	e78b      	b.n	800d510 <__gethex+0x198>
 800d5f8:	f04f 0a03 	mov.w	sl, #3
 800d5fc:	e7b8      	b.n	800d570 <__gethex+0x1f8>
 800d5fe:	da0a      	bge.n	800d616 <__gethex+0x29e>
 800d600:	1a37      	subs	r7, r6, r0
 800d602:	4621      	mov	r1, r4
 800d604:	ee18 0a10 	vmov	r0, s16
 800d608:	463a      	mov	r2, r7
 800d60a:	f000 fc3b 	bl	800de84 <__lshift>
 800d60e:	1bed      	subs	r5, r5, r7
 800d610:	4604      	mov	r4, r0
 800d612:	f100 0914 	add.w	r9, r0, #20
 800d616:	f04f 0a00 	mov.w	sl, #0
 800d61a:	e7ae      	b.n	800d57a <__gethex+0x202>
 800d61c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d620:	42a8      	cmp	r0, r5
 800d622:	dd72      	ble.n	800d70a <__gethex+0x392>
 800d624:	1b45      	subs	r5, r0, r5
 800d626:	42ae      	cmp	r6, r5
 800d628:	dc36      	bgt.n	800d698 <__gethex+0x320>
 800d62a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d02a      	beq.n	800d688 <__gethex+0x310>
 800d632:	2b03      	cmp	r3, #3
 800d634:	d02c      	beq.n	800d690 <__gethex+0x318>
 800d636:	2b01      	cmp	r3, #1
 800d638:	d11c      	bne.n	800d674 <__gethex+0x2fc>
 800d63a:	42ae      	cmp	r6, r5
 800d63c:	d11a      	bne.n	800d674 <__gethex+0x2fc>
 800d63e:	2e01      	cmp	r6, #1
 800d640:	d112      	bne.n	800d668 <__gethex+0x2f0>
 800d642:	9a04      	ldr	r2, [sp, #16]
 800d644:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	2301      	movs	r3, #1
 800d64c:	6123      	str	r3, [r4, #16]
 800d64e:	f8c9 3000 	str.w	r3, [r9]
 800d652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d654:	2762      	movs	r7, #98	; 0x62
 800d656:	601c      	str	r4, [r3, #0]
 800d658:	e723      	b.n	800d4a2 <__gethex+0x12a>
 800d65a:	bf00      	nop
 800d65c:	0800f788 	.word	0x0800f788
 800d660:	0800f6ac 	.word	0x0800f6ac
 800d664:	0800f720 	.word	0x0800f720
 800d668:	1e71      	subs	r1, r6, #1
 800d66a:	4620      	mov	r0, r4
 800d66c:	f000 fe4e 	bl	800e30c <__any_on>
 800d670:	2800      	cmp	r0, #0
 800d672:	d1e6      	bne.n	800d642 <__gethex+0x2ca>
 800d674:	ee18 0a10 	vmov	r0, s16
 800d678:	4621      	mov	r1, r4
 800d67a:	f000 f9e7 	bl	800da4c <_Bfree>
 800d67e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d680:	2300      	movs	r3, #0
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	2750      	movs	r7, #80	; 0x50
 800d686:	e70c      	b.n	800d4a2 <__gethex+0x12a>
 800d688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1f2      	bne.n	800d674 <__gethex+0x2fc>
 800d68e:	e7d8      	b.n	800d642 <__gethex+0x2ca>
 800d690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1d5      	bne.n	800d642 <__gethex+0x2ca>
 800d696:	e7ed      	b.n	800d674 <__gethex+0x2fc>
 800d698:	1e6f      	subs	r7, r5, #1
 800d69a:	f1ba 0f00 	cmp.w	sl, #0
 800d69e:	d131      	bne.n	800d704 <__gethex+0x38c>
 800d6a0:	b127      	cbz	r7, 800d6ac <__gethex+0x334>
 800d6a2:	4639      	mov	r1, r7
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f000 fe31 	bl	800e30c <__any_on>
 800d6aa:	4682      	mov	sl, r0
 800d6ac:	117b      	asrs	r3, r7, #5
 800d6ae:	2101      	movs	r1, #1
 800d6b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d6b4:	f007 071f 	and.w	r7, r7, #31
 800d6b8:	fa01 f707 	lsl.w	r7, r1, r7
 800d6bc:	421f      	tst	r7, r3
 800d6be:	4629      	mov	r1, r5
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	bf18      	it	ne
 800d6c4:	f04a 0a02 	orrne.w	sl, sl, #2
 800d6c8:	1b76      	subs	r6, r6, r5
 800d6ca:	f7ff fdee 	bl	800d2aa <rshift>
 800d6ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d6d2:	2702      	movs	r7, #2
 800d6d4:	f1ba 0f00 	cmp.w	sl, #0
 800d6d8:	d048      	beq.n	800d76c <__gethex+0x3f4>
 800d6da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d015      	beq.n	800d70e <__gethex+0x396>
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d017      	beq.n	800d716 <__gethex+0x39e>
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d109      	bne.n	800d6fe <__gethex+0x386>
 800d6ea:	f01a 0f02 	tst.w	sl, #2
 800d6ee:	d006      	beq.n	800d6fe <__gethex+0x386>
 800d6f0:	f8d9 0000 	ldr.w	r0, [r9]
 800d6f4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d6f8:	f01a 0f01 	tst.w	sl, #1
 800d6fc:	d10e      	bne.n	800d71c <__gethex+0x3a4>
 800d6fe:	f047 0710 	orr.w	r7, r7, #16
 800d702:	e033      	b.n	800d76c <__gethex+0x3f4>
 800d704:	f04f 0a01 	mov.w	sl, #1
 800d708:	e7d0      	b.n	800d6ac <__gethex+0x334>
 800d70a:	2701      	movs	r7, #1
 800d70c:	e7e2      	b.n	800d6d4 <__gethex+0x35c>
 800d70e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d710:	f1c3 0301 	rsb	r3, r3, #1
 800d714:	9315      	str	r3, [sp, #84]	; 0x54
 800d716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d0f0      	beq.n	800d6fe <__gethex+0x386>
 800d71c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d720:	f104 0314 	add.w	r3, r4, #20
 800d724:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d728:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d72c:	f04f 0c00 	mov.w	ip, #0
 800d730:	4618      	mov	r0, r3
 800d732:	f853 2b04 	ldr.w	r2, [r3], #4
 800d736:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d73a:	d01c      	beq.n	800d776 <__gethex+0x3fe>
 800d73c:	3201      	adds	r2, #1
 800d73e:	6002      	str	r2, [r0, #0]
 800d740:	2f02      	cmp	r7, #2
 800d742:	f104 0314 	add.w	r3, r4, #20
 800d746:	d13f      	bne.n	800d7c8 <__gethex+0x450>
 800d748:	f8d8 2000 	ldr.w	r2, [r8]
 800d74c:	3a01      	subs	r2, #1
 800d74e:	42b2      	cmp	r2, r6
 800d750:	d10a      	bne.n	800d768 <__gethex+0x3f0>
 800d752:	1171      	asrs	r1, r6, #5
 800d754:	2201      	movs	r2, #1
 800d756:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d75a:	f006 061f 	and.w	r6, r6, #31
 800d75e:	fa02 f606 	lsl.w	r6, r2, r6
 800d762:	421e      	tst	r6, r3
 800d764:	bf18      	it	ne
 800d766:	4617      	movne	r7, r2
 800d768:	f047 0720 	orr.w	r7, r7, #32
 800d76c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d76e:	601c      	str	r4, [r3, #0]
 800d770:	9b04      	ldr	r3, [sp, #16]
 800d772:	601d      	str	r5, [r3, #0]
 800d774:	e695      	b.n	800d4a2 <__gethex+0x12a>
 800d776:	4299      	cmp	r1, r3
 800d778:	f843 cc04 	str.w	ip, [r3, #-4]
 800d77c:	d8d8      	bhi.n	800d730 <__gethex+0x3b8>
 800d77e:	68a3      	ldr	r3, [r4, #8]
 800d780:	459b      	cmp	fp, r3
 800d782:	db19      	blt.n	800d7b8 <__gethex+0x440>
 800d784:	6861      	ldr	r1, [r4, #4]
 800d786:	ee18 0a10 	vmov	r0, s16
 800d78a:	3101      	adds	r1, #1
 800d78c:	f000 f91e 	bl	800d9cc <_Balloc>
 800d790:	4681      	mov	r9, r0
 800d792:	b918      	cbnz	r0, 800d79c <__gethex+0x424>
 800d794:	4b1a      	ldr	r3, [pc, #104]	; (800d800 <__gethex+0x488>)
 800d796:	4602      	mov	r2, r0
 800d798:	2184      	movs	r1, #132	; 0x84
 800d79a:	e6a8      	b.n	800d4ee <__gethex+0x176>
 800d79c:	6922      	ldr	r2, [r4, #16]
 800d79e:	3202      	adds	r2, #2
 800d7a0:	f104 010c 	add.w	r1, r4, #12
 800d7a4:	0092      	lsls	r2, r2, #2
 800d7a6:	300c      	adds	r0, #12
 800d7a8:	f7fd f86a 	bl	800a880 <memcpy>
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	ee18 0a10 	vmov	r0, s16
 800d7b2:	f000 f94b 	bl	800da4c <_Bfree>
 800d7b6:	464c      	mov	r4, r9
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7c0:	6122      	str	r2, [r4, #16]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	615a      	str	r2, [r3, #20]
 800d7c6:	e7bb      	b.n	800d740 <__gethex+0x3c8>
 800d7c8:	6922      	ldr	r2, [r4, #16]
 800d7ca:	455a      	cmp	r2, fp
 800d7cc:	dd0b      	ble.n	800d7e6 <__gethex+0x46e>
 800d7ce:	2101      	movs	r1, #1
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f7ff fd6a 	bl	800d2aa <rshift>
 800d7d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7da:	3501      	adds	r5, #1
 800d7dc:	42ab      	cmp	r3, r5
 800d7de:	f6ff aed0 	blt.w	800d582 <__gethex+0x20a>
 800d7e2:	2701      	movs	r7, #1
 800d7e4:	e7c0      	b.n	800d768 <__gethex+0x3f0>
 800d7e6:	f016 061f 	ands.w	r6, r6, #31
 800d7ea:	d0fa      	beq.n	800d7e2 <__gethex+0x46a>
 800d7ec:	4453      	add	r3, sl
 800d7ee:	f1c6 0620 	rsb	r6, r6, #32
 800d7f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d7f6:	f000 f9db 	bl	800dbb0 <__hi0bits>
 800d7fa:	42b0      	cmp	r0, r6
 800d7fc:	dbe7      	blt.n	800d7ce <__gethex+0x456>
 800d7fe:	e7f0      	b.n	800d7e2 <__gethex+0x46a>
 800d800:	0800f6ac 	.word	0x0800f6ac

0800d804 <L_shift>:
 800d804:	f1c2 0208 	rsb	r2, r2, #8
 800d808:	0092      	lsls	r2, r2, #2
 800d80a:	b570      	push	{r4, r5, r6, lr}
 800d80c:	f1c2 0620 	rsb	r6, r2, #32
 800d810:	6843      	ldr	r3, [r0, #4]
 800d812:	6804      	ldr	r4, [r0, #0]
 800d814:	fa03 f506 	lsl.w	r5, r3, r6
 800d818:	432c      	orrs	r4, r5
 800d81a:	40d3      	lsrs	r3, r2
 800d81c:	6004      	str	r4, [r0, #0]
 800d81e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d822:	4288      	cmp	r0, r1
 800d824:	d3f4      	bcc.n	800d810 <L_shift+0xc>
 800d826:	bd70      	pop	{r4, r5, r6, pc}

0800d828 <__match>:
 800d828:	b530      	push	{r4, r5, lr}
 800d82a:	6803      	ldr	r3, [r0, #0]
 800d82c:	3301      	adds	r3, #1
 800d82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d832:	b914      	cbnz	r4, 800d83a <__match+0x12>
 800d834:	6003      	str	r3, [r0, #0]
 800d836:	2001      	movs	r0, #1
 800d838:	bd30      	pop	{r4, r5, pc}
 800d83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d83e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d842:	2d19      	cmp	r5, #25
 800d844:	bf98      	it	ls
 800d846:	3220      	addls	r2, #32
 800d848:	42a2      	cmp	r2, r4
 800d84a:	d0f0      	beq.n	800d82e <__match+0x6>
 800d84c:	2000      	movs	r0, #0
 800d84e:	e7f3      	b.n	800d838 <__match+0x10>

0800d850 <__hexnan>:
 800d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	680b      	ldr	r3, [r1, #0]
 800d856:	115e      	asrs	r6, r3, #5
 800d858:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d85c:	f013 031f 	ands.w	r3, r3, #31
 800d860:	b087      	sub	sp, #28
 800d862:	bf18      	it	ne
 800d864:	3604      	addne	r6, #4
 800d866:	2500      	movs	r5, #0
 800d868:	1f37      	subs	r7, r6, #4
 800d86a:	4690      	mov	r8, r2
 800d86c:	6802      	ldr	r2, [r0, #0]
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	4682      	mov	sl, r0
 800d872:	f846 5c04 	str.w	r5, [r6, #-4]
 800d876:	46b9      	mov	r9, r7
 800d878:	463c      	mov	r4, r7
 800d87a:	9502      	str	r5, [sp, #8]
 800d87c:	46ab      	mov	fp, r5
 800d87e:	7851      	ldrb	r1, [r2, #1]
 800d880:	1c53      	adds	r3, r2, #1
 800d882:	9303      	str	r3, [sp, #12]
 800d884:	b341      	cbz	r1, 800d8d8 <__hexnan+0x88>
 800d886:	4608      	mov	r0, r1
 800d888:	9205      	str	r2, [sp, #20]
 800d88a:	9104      	str	r1, [sp, #16]
 800d88c:	f7ff fd5f 	bl	800d34e <__hexdig_fun>
 800d890:	2800      	cmp	r0, #0
 800d892:	d14f      	bne.n	800d934 <__hexnan+0xe4>
 800d894:	9904      	ldr	r1, [sp, #16]
 800d896:	9a05      	ldr	r2, [sp, #20]
 800d898:	2920      	cmp	r1, #32
 800d89a:	d818      	bhi.n	800d8ce <__hexnan+0x7e>
 800d89c:	9b02      	ldr	r3, [sp, #8]
 800d89e:	459b      	cmp	fp, r3
 800d8a0:	dd13      	ble.n	800d8ca <__hexnan+0x7a>
 800d8a2:	454c      	cmp	r4, r9
 800d8a4:	d206      	bcs.n	800d8b4 <__hexnan+0x64>
 800d8a6:	2d07      	cmp	r5, #7
 800d8a8:	dc04      	bgt.n	800d8b4 <__hexnan+0x64>
 800d8aa:	462a      	mov	r2, r5
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f7ff ffa8 	bl	800d804 <L_shift>
 800d8b4:	4544      	cmp	r4, r8
 800d8b6:	d950      	bls.n	800d95a <__hexnan+0x10a>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f1a4 0904 	sub.w	r9, r4, #4
 800d8be:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8c2:	f8cd b008 	str.w	fp, [sp, #8]
 800d8c6:	464c      	mov	r4, r9
 800d8c8:	461d      	mov	r5, r3
 800d8ca:	9a03      	ldr	r2, [sp, #12]
 800d8cc:	e7d7      	b.n	800d87e <__hexnan+0x2e>
 800d8ce:	2929      	cmp	r1, #41	; 0x29
 800d8d0:	d156      	bne.n	800d980 <__hexnan+0x130>
 800d8d2:	3202      	adds	r2, #2
 800d8d4:	f8ca 2000 	str.w	r2, [sl]
 800d8d8:	f1bb 0f00 	cmp.w	fp, #0
 800d8dc:	d050      	beq.n	800d980 <__hexnan+0x130>
 800d8de:	454c      	cmp	r4, r9
 800d8e0:	d206      	bcs.n	800d8f0 <__hexnan+0xa0>
 800d8e2:	2d07      	cmp	r5, #7
 800d8e4:	dc04      	bgt.n	800d8f0 <__hexnan+0xa0>
 800d8e6:	462a      	mov	r2, r5
 800d8e8:	4649      	mov	r1, r9
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f7ff ff8a 	bl	800d804 <L_shift>
 800d8f0:	4544      	cmp	r4, r8
 800d8f2:	d934      	bls.n	800d95e <__hexnan+0x10e>
 800d8f4:	f1a8 0204 	sub.w	r2, r8, #4
 800d8f8:	4623      	mov	r3, r4
 800d8fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d8fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800d902:	429f      	cmp	r7, r3
 800d904:	d2f9      	bcs.n	800d8fa <__hexnan+0xaa>
 800d906:	1b3b      	subs	r3, r7, r4
 800d908:	f023 0303 	bic.w	r3, r3, #3
 800d90c:	3304      	adds	r3, #4
 800d90e:	3401      	adds	r4, #1
 800d910:	3e03      	subs	r6, #3
 800d912:	42b4      	cmp	r4, r6
 800d914:	bf88      	it	hi
 800d916:	2304      	movhi	r3, #4
 800d918:	4443      	add	r3, r8
 800d91a:	2200      	movs	r2, #0
 800d91c:	f843 2b04 	str.w	r2, [r3], #4
 800d920:	429f      	cmp	r7, r3
 800d922:	d2fb      	bcs.n	800d91c <__hexnan+0xcc>
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	b91b      	cbnz	r3, 800d930 <__hexnan+0xe0>
 800d928:	4547      	cmp	r7, r8
 800d92a:	d127      	bne.n	800d97c <__hexnan+0x12c>
 800d92c:	2301      	movs	r3, #1
 800d92e:	603b      	str	r3, [r7, #0]
 800d930:	2005      	movs	r0, #5
 800d932:	e026      	b.n	800d982 <__hexnan+0x132>
 800d934:	3501      	adds	r5, #1
 800d936:	2d08      	cmp	r5, #8
 800d938:	f10b 0b01 	add.w	fp, fp, #1
 800d93c:	dd06      	ble.n	800d94c <__hexnan+0xfc>
 800d93e:	4544      	cmp	r4, r8
 800d940:	d9c3      	bls.n	800d8ca <__hexnan+0x7a>
 800d942:	2300      	movs	r3, #0
 800d944:	f844 3c04 	str.w	r3, [r4, #-4]
 800d948:	2501      	movs	r5, #1
 800d94a:	3c04      	subs	r4, #4
 800d94c:	6822      	ldr	r2, [r4, #0]
 800d94e:	f000 000f 	and.w	r0, r0, #15
 800d952:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d956:	6022      	str	r2, [r4, #0]
 800d958:	e7b7      	b.n	800d8ca <__hexnan+0x7a>
 800d95a:	2508      	movs	r5, #8
 800d95c:	e7b5      	b.n	800d8ca <__hexnan+0x7a>
 800d95e:	9b01      	ldr	r3, [sp, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d0df      	beq.n	800d924 <__hexnan+0xd4>
 800d964:	f04f 32ff 	mov.w	r2, #4294967295
 800d968:	f1c3 0320 	rsb	r3, r3, #32
 800d96c:	fa22 f303 	lsr.w	r3, r2, r3
 800d970:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d974:	401a      	ands	r2, r3
 800d976:	f846 2c04 	str.w	r2, [r6, #-4]
 800d97a:	e7d3      	b.n	800d924 <__hexnan+0xd4>
 800d97c:	3f04      	subs	r7, #4
 800d97e:	e7d1      	b.n	800d924 <__hexnan+0xd4>
 800d980:	2004      	movs	r0, #4
 800d982:	b007      	add	sp, #28
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d988 <_localeconv_r>:
 800d988:	4800      	ldr	r0, [pc, #0]	; (800d98c <_localeconv_r+0x4>)
 800d98a:	4770      	bx	lr
 800d98c:	20000168 	.word	0x20000168

0800d990 <__retarget_lock_init_recursive>:
 800d990:	4770      	bx	lr

0800d992 <__retarget_lock_acquire_recursive>:
 800d992:	4770      	bx	lr

0800d994 <__retarget_lock_release_recursive>:
 800d994:	4770      	bx	lr
	...

0800d998 <malloc>:
 800d998:	4b02      	ldr	r3, [pc, #8]	; (800d9a4 <malloc+0xc>)
 800d99a:	4601      	mov	r1, r0
 800d99c:	6818      	ldr	r0, [r3, #0]
 800d99e:	f000 bd59 	b.w	800e454 <_malloc_r>
 800d9a2:	bf00      	nop
 800d9a4:	20000010 	.word	0x20000010

0800d9a8 <__ascii_mbtowc>:
 800d9a8:	b082      	sub	sp, #8
 800d9aa:	b901      	cbnz	r1, 800d9ae <__ascii_mbtowc+0x6>
 800d9ac:	a901      	add	r1, sp, #4
 800d9ae:	b142      	cbz	r2, 800d9c2 <__ascii_mbtowc+0x1a>
 800d9b0:	b14b      	cbz	r3, 800d9c6 <__ascii_mbtowc+0x1e>
 800d9b2:	7813      	ldrb	r3, [r2, #0]
 800d9b4:	600b      	str	r3, [r1, #0]
 800d9b6:	7812      	ldrb	r2, [r2, #0]
 800d9b8:	1e10      	subs	r0, r2, #0
 800d9ba:	bf18      	it	ne
 800d9bc:	2001      	movne	r0, #1
 800d9be:	b002      	add	sp, #8
 800d9c0:	4770      	bx	lr
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	e7fb      	b.n	800d9be <__ascii_mbtowc+0x16>
 800d9c6:	f06f 0001 	mvn.w	r0, #1
 800d9ca:	e7f8      	b.n	800d9be <__ascii_mbtowc+0x16>

0800d9cc <_Balloc>:
 800d9cc:	b570      	push	{r4, r5, r6, lr}
 800d9ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9d0:	4604      	mov	r4, r0
 800d9d2:	460d      	mov	r5, r1
 800d9d4:	b976      	cbnz	r6, 800d9f4 <_Balloc+0x28>
 800d9d6:	2010      	movs	r0, #16
 800d9d8:	f7ff ffde 	bl	800d998 <malloc>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	6260      	str	r0, [r4, #36]	; 0x24
 800d9e0:	b920      	cbnz	r0, 800d9ec <_Balloc+0x20>
 800d9e2:	4b18      	ldr	r3, [pc, #96]	; (800da44 <_Balloc+0x78>)
 800d9e4:	4818      	ldr	r0, [pc, #96]	; (800da48 <_Balloc+0x7c>)
 800d9e6:	2166      	movs	r1, #102	; 0x66
 800d9e8:	f7fe fcbe 	bl	800c368 <__assert_func>
 800d9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9f0:	6006      	str	r6, [r0, #0]
 800d9f2:	60c6      	str	r6, [r0, #12]
 800d9f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9f6:	68f3      	ldr	r3, [r6, #12]
 800d9f8:	b183      	cbz	r3, 800da1c <_Balloc+0x50>
 800d9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da02:	b9b8      	cbnz	r0, 800da34 <_Balloc+0x68>
 800da04:	2101      	movs	r1, #1
 800da06:	fa01 f605 	lsl.w	r6, r1, r5
 800da0a:	1d72      	adds	r2, r6, #5
 800da0c:	0092      	lsls	r2, r2, #2
 800da0e:	4620      	mov	r0, r4
 800da10:	f000 fc9d 	bl	800e34e <_calloc_r>
 800da14:	b160      	cbz	r0, 800da30 <_Balloc+0x64>
 800da16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da1a:	e00e      	b.n	800da3a <_Balloc+0x6e>
 800da1c:	2221      	movs	r2, #33	; 0x21
 800da1e:	2104      	movs	r1, #4
 800da20:	4620      	mov	r0, r4
 800da22:	f000 fc94 	bl	800e34e <_calloc_r>
 800da26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da28:	60f0      	str	r0, [r6, #12]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1e4      	bne.n	800d9fa <_Balloc+0x2e>
 800da30:	2000      	movs	r0, #0
 800da32:	bd70      	pop	{r4, r5, r6, pc}
 800da34:	6802      	ldr	r2, [r0, #0]
 800da36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da3a:	2300      	movs	r3, #0
 800da3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da40:	e7f7      	b.n	800da32 <_Balloc+0x66>
 800da42:	bf00      	nop
 800da44:	0800f63a 	.word	0x0800f63a
 800da48:	0800f79c 	.word	0x0800f79c

0800da4c <_Bfree>:
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da50:	4605      	mov	r5, r0
 800da52:	460c      	mov	r4, r1
 800da54:	b976      	cbnz	r6, 800da74 <_Bfree+0x28>
 800da56:	2010      	movs	r0, #16
 800da58:	f7ff ff9e 	bl	800d998 <malloc>
 800da5c:	4602      	mov	r2, r0
 800da5e:	6268      	str	r0, [r5, #36]	; 0x24
 800da60:	b920      	cbnz	r0, 800da6c <_Bfree+0x20>
 800da62:	4b09      	ldr	r3, [pc, #36]	; (800da88 <_Bfree+0x3c>)
 800da64:	4809      	ldr	r0, [pc, #36]	; (800da8c <_Bfree+0x40>)
 800da66:	218a      	movs	r1, #138	; 0x8a
 800da68:	f7fe fc7e 	bl	800c368 <__assert_func>
 800da6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da70:	6006      	str	r6, [r0, #0]
 800da72:	60c6      	str	r6, [r0, #12]
 800da74:	b13c      	cbz	r4, 800da86 <_Bfree+0x3a>
 800da76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da78:	6862      	ldr	r2, [r4, #4]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da80:	6021      	str	r1, [r4, #0]
 800da82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da86:	bd70      	pop	{r4, r5, r6, pc}
 800da88:	0800f63a 	.word	0x0800f63a
 800da8c:	0800f79c 	.word	0x0800f79c

0800da90 <__multadd>:
 800da90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da94:	690d      	ldr	r5, [r1, #16]
 800da96:	4607      	mov	r7, r0
 800da98:	460c      	mov	r4, r1
 800da9a:	461e      	mov	r6, r3
 800da9c:	f101 0c14 	add.w	ip, r1, #20
 800daa0:	2000      	movs	r0, #0
 800daa2:	f8dc 3000 	ldr.w	r3, [ip]
 800daa6:	b299      	uxth	r1, r3
 800daa8:	fb02 6101 	mla	r1, r2, r1, r6
 800daac:	0c1e      	lsrs	r6, r3, #16
 800daae:	0c0b      	lsrs	r3, r1, #16
 800dab0:	fb02 3306 	mla	r3, r2, r6, r3
 800dab4:	b289      	uxth	r1, r1
 800dab6:	3001      	adds	r0, #1
 800dab8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dabc:	4285      	cmp	r5, r0
 800dabe:	f84c 1b04 	str.w	r1, [ip], #4
 800dac2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dac6:	dcec      	bgt.n	800daa2 <__multadd+0x12>
 800dac8:	b30e      	cbz	r6, 800db0e <__multadd+0x7e>
 800daca:	68a3      	ldr	r3, [r4, #8]
 800dacc:	42ab      	cmp	r3, r5
 800dace:	dc19      	bgt.n	800db04 <__multadd+0x74>
 800dad0:	6861      	ldr	r1, [r4, #4]
 800dad2:	4638      	mov	r0, r7
 800dad4:	3101      	adds	r1, #1
 800dad6:	f7ff ff79 	bl	800d9cc <_Balloc>
 800dada:	4680      	mov	r8, r0
 800dadc:	b928      	cbnz	r0, 800daea <__multadd+0x5a>
 800dade:	4602      	mov	r2, r0
 800dae0:	4b0c      	ldr	r3, [pc, #48]	; (800db14 <__multadd+0x84>)
 800dae2:	480d      	ldr	r0, [pc, #52]	; (800db18 <__multadd+0x88>)
 800dae4:	21b5      	movs	r1, #181	; 0xb5
 800dae6:	f7fe fc3f 	bl	800c368 <__assert_func>
 800daea:	6922      	ldr	r2, [r4, #16]
 800daec:	3202      	adds	r2, #2
 800daee:	f104 010c 	add.w	r1, r4, #12
 800daf2:	0092      	lsls	r2, r2, #2
 800daf4:	300c      	adds	r0, #12
 800daf6:	f7fc fec3 	bl	800a880 <memcpy>
 800dafa:	4621      	mov	r1, r4
 800dafc:	4638      	mov	r0, r7
 800dafe:	f7ff ffa5 	bl	800da4c <_Bfree>
 800db02:	4644      	mov	r4, r8
 800db04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db08:	3501      	adds	r5, #1
 800db0a:	615e      	str	r6, [r3, #20]
 800db0c:	6125      	str	r5, [r4, #16]
 800db0e:	4620      	mov	r0, r4
 800db10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db14:	0800f6ac 	.word	0x0800f6ac
 800db18:	0800f79c 	.word	0x0800f79c

0800db1c <__s2b>:
 800db1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db20:	460c      	mov	r4, r1
 800db22:	4615      	mov	r5, r2
 800db24:	461f      	mov	r7, r3
 800db26:	2209      	movs	r2, #9
 800db28:	3308      	adds	r3, #8
 800db2a:	4606      	mov	r6, r0
 800db2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800db30:	2100      	movs	r1, #0
 800db32:	2201      	movs	r2, #1
 800db34:	429a      	cmp	r2, r3
 800db36:	db09      	blt.n	800db4c <__s2b+0x30>
 800db38:	4630      	mov	r0, r6
 800db3a:	f7ff ff47 	bl	800d9cc <_Balloc>
 800db3e:	b940      	cbnz	r0, 800db52 <__s2b+0x36>
 800db40:	4602      	mov	r2, r0
 800db42:	4b19      	ldr	r3, [pc, #100]	; (800dba8 <__s2b+0x8c>)
 800db44:	4819      	ldr	r0, [pc, #100]	; (800dbac <__s2b+0x90>)
 800db46:	21ce      	movs	r1, #206	; 0xce
 800db48:	f7fe fc0e 	bl	800c368 <__assert_func>
 800db4c:	0052      	lsls	r2, r2, #1
 800db4e:	3101      	adds	r1, #1
 800db50:	e7f0      	b.n	800db34 <__s2b+0x18>
 800db52:	9b08      	ldr	r3, [sp, #32]
 800db54:	6143      	str	r3, [r0, #20]
 800db56:	2d09      	cmp	r5, #9
 800db58:	f04f 0301 	mov.w	r3, #1
 800db5c:	6103      	str	r3, [r0, #16]
 800db5e:	dd16      	ble.n	800db8e <__s2b+0x72>
 800db60:	f104 0909 	add.w	r9, r4, #9
 800db64:	46c8      	mov	r8, r9
 800db66:	442c      	add	r4, r5
 800db68:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db6c:	4601      	mov	r1, r0
 800db6e:	3b30      	subs	r3, #48	; 0x30
 800db70:	220a      	movs	r2, #10
 800db72:	4630      	mov	r0, r6
 800db74:	f7ff ff8c 	bl	800da90 <__multadd>
 800db78:	45a0      	cmp	r8, r4
 800db7a:	d1f5      	bne.n	800db68 <__s2b+0x4c>
 800db7c:	f1a5 0408 	sub.w	r4, r5, #8
 800db80:	444c      	add	r4, r9
 800db82:	1b2d      	subs	r5, r5, r4
 800db84:	1963      	adds	r3, r4, r5
 800db86:	42bb      	cmp	r3, r7
 800db88:	db04      	blt.n	800db94 <__s2b+0x78>
 800db8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db8e:	340a      	adds	r4, #10
 800db90:	2509      	movs	r5, #9
 800db92:	e7f6      	b.n	800db82 <__s2b+0x66>
 800db94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db98:	4601      	mov	r1, r0
 800db9a:	3b30      	subs	r3, #48	; 0x30
 800db9c:	220a      	movs	r2, #10
 800db9e:	4630      	mov	r0, r6
 800dba0:	f7ff ff76 	bl	800da90 <__multadd>
 800dba4:	e7ee      	b.n	800db84 <__s2b+0x68>
 800dba6:	bf00      	nop
 800dba8:	0800f6ac 	.word	0x0800f6ac
 800dbac:	0800f79c 	.word	0x0800f79c

0800dbb0 <__hi0bits>:
 800dbb0:	0c03      	lsrs	r3, r0, #16
 800dbb2:	041b      	lsls	r3, r3, #16
 800dbb4:	b9d3      	cbnz	r3, 800dbec <__hi0bits+0x3c>
 800dbb6:	0400      	lsls	r0, r0, #16
 800dbb8:	2310      	movs	r3, #16
 800dbba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dbbe:	bf04      	itt	eq
 800dbc0:	0200      	lsleq	r0, r0, #8
 800dbc2:	3308      	addeq	r3, #8
 800dbc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dbc8:	bf04      	itt	eq
 800dbca:	0100      	lsleq	r0, r0, #4
 800dbcc:	3304      	addeq	r3, #4
 800dbce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dbd2:	bf04      	itt	eq
 800dbd4:	0080      	lsleq	r0, r0, #2
 800dbd6:	3302      	addeq	r3, #2
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	db05      	blt.n	800dbe8 <__hi0bits+0x38>
 800dbdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dbe0:	f103 0301 	add.w	r3, r3, #1
 800dbe4:	bf08      	it	eq
 800dbe6:	2320      	moveq	r3, #32
 800dbe8:	4618      	mov	r0, r3
 800dbea:	4770      	bx	lr
 800dbec:	2300      	movs	r3, #0
 800dbee:	e7e4      	b.n	800dbba <__hi0bits+0xa>

0800dbf0 <__lo0bits>:
 800dbf0:	6803      	ldr	r3, [r0, #0]
 800dbf2:	f013 0207 	ands.w	r2, r3, #7
 800dbf6:	4601      	mov	r1, r0
 800dbf8:	d00b      	beq.n	800dc12 <__lo0bits+0x22>
 800dbfa:	07da      	lsls	r2, r3, #31
 800dbfc:	d423      	bmi.n	800dc46 <__lo0bits+0x56>
 800dbfe:	0798      	lsls	r0, r3, #30
 800dc00:	bf49      	itett	mi
 800dc02:	085b      	lsrmi	r3, r3, #1
 800dc04:	089b      	lsrpl	r3, r3, #2
 800dc06:	2001      	movmi	r0, #1
 800dc08:	600b      	strmi	r3, [r1, #0]
 800dc0a:	bf5c      	itt	pl
 800dc0c:	600b      	strpl	r3, [r1, #0]
 800dc0e:	2002      	movpl	r0, #2
 800dc10:	4770      	bx	lr
 800dc12:	b298      	uxth	r0, r3
 800dc14:	b9a8      	cbnz	r0, 800dc42 <__lo0bits+0x52>
 800dc16:	0c1b      	lsrs	r3, r3, #16
 800dc18:	2010      	movs	r0, #16
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	b90a      	cbnz	r2, 800dc22 <__lo0bits+0x32>
 800dc1e:	3008      	adds	r0, #8
 800dc20:	0a1b      	lsrs	r3, r3, #8
 800dc22:	071a      	lsls	r2, r3, #28
 800dc24:	bf04      	itt	eq
 800dc26:	091b      	lsreq	r3, r3, #4
 800dc28:	3004      	addeq	r0, #4
 800dc2a:	079a      	lsls	r2, r3, #30
 800dc2c:	bf04      	itt	eq
 800dc2e:	089b      	lsreq	r3, r3, #2
 800dc30:	3002      	addeq	r0, #2
 800dc32:	07da      	lsls	r2, r3, #31
 800dc34:	d403      	bmi.n	800dc3e <__lo0bits+0x4e>
 800dc36:	085b      	lsrs	r3, r3, #1
 800dc38:	f100 0001 	add.w	r0, r0, #1
 800dc3c:	d005      	beq.n	800dc4a <__lo0bits+0x5a>
 800dc3e:	600b      	str	r3, [r1, #0]
 800dc40:	4770      	bx	lr
 800dc42:	4610      	mov	r0, r2
 800dc44:	e7e9      	b.n	800dc1a <__lo0bits+0x2a>
 800dc46:	2000      	movs	r0, #0
 800dc48:	4770      	bx	lr
 800dc4a:	2020      	movs	r0, #32
 800dc4c:	4770      	bx	lr
	...

0800dc50 <__i2b>:
 800dc50:	b510      	push	{r4, lr}
 800dc52:	460c      	mov	r4, r1
 800dc54:	2101      	movs	r1, #1
 800dc56:	f7ff feb9 	bl	800d9cc <_Balloc>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	b928      	cbnz	r0, 800dc6a <__i2b+0x1a>
 800dc5e:	4b05      	ldr	r3, [pc, #20]	; (800dc74 <__i2b+0x24>)
 800dc60:	4805      	ldr	r0, [pc, #20]	; (800dc78 <__i2b+0x28>)
 800dc62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc66:	f7fe fb7f 	bl	800c368 <__assert_func>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	6144      	str	r4, [r0, #20]
 800dc6e:	6103      	str	r3, [r0, #16]
 800dc70:	bd10      	pop	{r4, pc}
 800dc72:	bf00      	nop
 800dc74:	0800f6ac 	.word	0x0800f6ac
 800dc78:	0800f79c 	.word	0x0800f79c

0800dc7c <__multiply>:
 800dc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc80:	4691      	mov	r9, r2
 800dc82:	690a      	ldr	r2, [r1, #16]
 800dc84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	bfb8      	it	lt
 800dc8c:	460b      	movlt	r3, r1
 800dc8e:	460c      	mov	r4, r1
 800dc90:	bfbc      	itt	lt
 800dc92:	464c      	movlt	r4, r9
 800dc94:	4699      	movlt	r9, r3
 800dc96:	6927      	ldr	r7, [r4, #16]
 800dc98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc9c:	68a3      	ldr	r3, [r4, #8]
 800dc9e:	6861      	ldr	r1, [r4, #4]
 800dca0:	eb07 060a 	add.w	r6, r7, sl
 800dca4:	42b3      	cmp	r3, r6
 800dca6:	b085      	sub	sp, #20
 800dca8:	bfb8      	it	lt
 800dcaa:	3101      	addlt	r1, #1
 800dcac:	f7ff fe8e 	bl	800d9cc <_Balloc>
 800dcb0:	b930      	cbnz	r0, 800dcc0 <__multiply+0x44>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	4b44      	ldr	r3, [pc, #272]	; (800ddc8 <__multiply+0x14c>)
 800dcb6:	4845      	ldr	r0, [pc, #276]	; (800ddcc <__multiply+0x150>)
 800dcb8:	f240 115d 	movw	r1, #349	; 0x15d
 800dcbc:	f7fe fb54 	bl	800c368 <__assert_func>
 800dcc0:	f100 0514 	add.w	r5, r0, #20
 800dcc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dcc8:	462b      	mov	r3, r5
 800dcca:	2200      	movs	r2, #0
 800dccc:	4543      	cmp	r3, r8
 800dcce:	d321      	bcc.n	800dd14 <__multiply+0x98>
 800dcd0:	f104 0314 	add.w	r3, r4, #20
 800dcd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcd8:	f109 0314 	add.w	r3, r9, #20
 800dcdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dce0:	9202      	str	r2, [sp, #8]
 800dce2:	1b3a      	subs	r2, r7, r4
 800dce4:	3a15      	subs	r2, #21
 800dce6:	f022 0203 	bic.w	r2, r2, #3
 800dcea:	3204      	adds	r2, #4
 800dcec:	f104 0115 	add.w	r1, r4, #21
 800dcf0:	428f      	cmp	r7, r1
 800dcf2:	bf38      	it	cc
 800dcf4:	2204      	movcc	r2, #4
 800dcf6:	9201      	str	r2, [sp, #4]
 800dcf8:	9a02      	ldr	r2, [sp, #8]
 800dcfa:	9303      	str	r3, [sp, #12]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d80c      	bhi.n	800dd1a <__multiply+0x9e>
 800dd00:	2e00      	cmp	r6, #0
 800dd02:	dd03      	ble.n	800dd0c <__multiply+0x90>
 800dd04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d05a      	beq.n	800ddc2 <__multiply+0x146>
 800dd0c:	6106      	str	r6, [r0, #16]
 800dd0e:	b005      	add	sp, #20
 800dd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd14:	f843 2b04 	str.w	r2, [r3], #4
 800dd18:	e7d8      	b.n	800dccc <__multiply+0x50>
 800dd1a:	f8b3 a000 	ldrh.w	sl, [r3]
 800dd1e:	f1ba 0f00 	cmp.w	sl, #0
 800dd22:	d024      	beq.n	800dd6e <__multiply+0xf2>
 800dd24:	f104 0e14 	add.w	lr, r4, #20
 800dd28:	46a9      	mov	r9, r5
 800dd2a:	f04f 0c00 	mov.w	ip, #0
 800dd2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd32:	f8d9 1000 	ldr.w	r1, [r9]
 800dd36:	fa1f fb82 	uxth.w	fp, r2
 800dd3a:	b289      	uxth	r1, r1
 800dd3c:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dd44:	f8d9 2000 	ldr.w	r2, [r9]
 800dd48:	4461      	add	r1, ip
 800dd4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd4e:	fb0a c20b 	mla	r2, sl, fp, ip
 800dd52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd56:	b289      	uxth	r1, r1
 800dd58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd5c:	4577      	cmp	r7, lr
 800dd5e:	f849 1b04 	str.w	r1, [r9], #4
 800dd62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd66:	d8e2      	bhi.n	800dd2e <__multiply+0xb2>
 800dd68:	9a01      	ldr	r2, [sp, #4]
 800dd6a:	f845 c002 	str.w	ip, [r5, r2]
 800dd6e:	9a03      	ldr	r2, [sp, #12]
 800dd70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd74:	3304      	adds	r3, #4
 800dd76:	f1b9 0f00 	cmp.w	r9, #0
 800dd7a:	d020      	beq.n	800ddbe <__multiply+0x142>
 800dd7c:	6829      	ldr	r1, [r5, #0]
 800dd7e:	f104 0c14 	add.w	ip, r4, #20
 800dd82:	46ae      	mov	lr, r5
 800dd84:	f04f 0a00 	mov.w	sl, #0
 800dd88:	f8bc b000 	ldrh.w	fp, [ip]
 800dd8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd90:	fb09 220b 	mla	r2, r9, fp, r2
 800dd94:	4492      	add	sl, r2
 800dd96:	b289      	uxth	r1, r1
 800dd98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd9c:	f84e 1b04 	str.w	r1, [lr], #4
 800dda0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dda4:	f8be 1000 	ldrh.w	r1, [lr]
 800dda8:	0c12      	lsrs	r2, r2, #16
 800ddaa:	fb09 1102 	mla	r1, r9, r2, r1
 800ddae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ddb2:	4567      	cmp	r7, ip
 800ddb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ddb8:	d8e6      	bhi.n	800dd88 <__multiply+0x10c>
 800ddba:	9a01      	ldr	r2, [sp, #4]
 800ddbc:	50a9      	str	r1, [r5, r2]
 800ddbe:	3504      	adds	r5, #4
 800ddc0:	e79a      	b.n	800dcf8 <__multiply+0x7c>
 800ddc2:	3e01      	subs	r6, #1
 800ddc4:	e79c      	b.n	800dd00 <__multiply+0x84>
 800ddc6:	bf00      	nop
 800ddc8:	0800f6ac 	.word	0x0800f6ac
 800ddcc:	0800f79c 	.word	0x0800f79c

0800ddd0 <__pow5mult>:
 800ddd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd4:	4615      	mov	r5, r2
 800ddd6:	f012 0203 	ands.w	r2, r2, #3
 800ddda:	4606      	mov	r6, r0
 800dddc:	460f      	mov	r7, r1
 800ddde:	d007      	beq.n	800ddf0 <__pow5mult+0x20>
 800dde0:	4c25      	ldr	r4, [pc, #148]	; (800de78 <__pow5mult+0xa8>)
 800dde2:	3a01      	subs	r2, #1
 800dde4:	2300      	movs	r3, #0
 800dde6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddea:	f7ff fe51 	bl	800da90 <__multadd>
 800ddee:	4607      	mov	r7, r0
 800ddf0:	10ad      	asrs	r5, r5, #2
 800ddf2:	d03d      	beq.n	800de70 <__pow5mult+0xa0>
 800ddf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddf6:	b97c      	cbnz	r4, 800de18 <__pow5mult+0x48>
 800ddf8:	2010      	movs	r0, #16
 800ddfa:	f7ff fdcd 	bl	800d998 <malloc>
 800ddfe:	4602      	mov	r2, r0
 800de00:	6270      	str	r0, [r6, #36]	; 0x24
 800de02:	b928      	cbnz	r0, 800de10 <__pow5mult+0x40>
 800de04:	4b1d      	ldr	r3, [pc, #116]	; (800de7c <__pow5mult+0xac>)
 800de06:	481e      	ldr	r0, [pc, #120]	; (800de80 <__pow5mult+0xb0>)
 800de08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800de0c:	f7fe faac 	bl	800c368 <__assert_func>
 800de10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de14:	6004      	str	r4, [r0, #0]
 800de16:	60c4      	str	r4, [r0, #12]
 800de18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de20:	b94c      	cbnz	r4, 800de36 <__pow5mult+0x66>
 800de22:	f240 2171 	movw	r1, #625	; 0x271
 800de26:	4630      	mov	r0, r6
 800de28:	f7ff ff12 	bl	800dc50 <__i2b>
 800de2c:	2300      	movs	r3, #0
 800de2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800de32:	4604      	mov	r4, r0
 800de34:	6003      	str	r3, [r0, #0]
 800de36:	f04f 0900 	mov.w	r9, #0
 800de3a:	07eb      	lsls	r3, r5, #31
 800de3c:	d50a      	bpl.n	800de54 <__pow5mult+0x84>
 800de3e:	4639      	mov	r1, r7
 800de40:	4622      	mov	r2, r4
 800de42:	4630      	mov	r0, r6
 800de44:	f7ff ff1a 	bl	800dc7c <__multiply>
 800de48:	4639      	mov	r1, r7
 800de4a:	4680      	mov	r8, r0
 800de4c:	4630      	mov	r0, r6
 800de4e:	f7ff fdfd 	bl	800da4c <_Bfree>
 800de52:	4647      	mov	r7, r8
 800de54:	106d      	asrs	r5, r5, #1
 800de56:	d00b      	beq.n	800de70 <__pow5mult+0xa0>
 800de58:	6820      	ldr	r0, [r4, #0]
 800de5a:	b938      	cbnz	r0, 800de6c <__pow5mult+0x9c>
 800de5c:	4622      	mov	r2, r4
 800de5e:	4621      	mov	r1, r4
 800de60:	4630      	mov	r0, r6
 800de62:	f7ff ff0b 	bl	800dc7c <__multiply>
 800de66:	6020      	str	r0, [r4, #0]
 800de68:	f8c0 9000 	str.w	r9, [r0]
 800de6c:	4604      	mov	r4, r0
 800de6e:	e7e4      	b.n	800de3a <__pow5mult+0x6a>
 800de70:	4638      	mov	r0, r7
 800de72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de76:	bf00      	nop
 800de78:	0800f8e8 	.word	0x0800f8e8
 800de7c:	0800f63a 	.word	0x0800f63a
 800de80:	0800f79c 	.word	0x0800f79c

0800de84 <__lshift>:
 800de84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de88:	460c      	mov	r4, r1
 800de8a:	6849      	ldr	r1, [r1, #4]
 800de8c:	6923      	ldr	r3, [r4, #16]
 800de8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de92:	68a3      	ldr	r3, [r4, #8]
 800de94:	4607      	mov	r7, r0
 800de96:	4691      	mov	r9, r2
 800de98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de9c:	f108 0601 	add.w	r6, r8, #1
 800dea0:	42b3      	cmp	r3, r6
 800dea2:	db0b      	blt.n	800debc <__lshift+0x38>
 800dea4:	4638      	mov	r0, r7
 800dea6:	f7ff fd91 	bl	800d9cc <_Balloc>
 800deaa:	4605      	mov	r5, r0
 800deac:	b948      	cbnz	r0, 800dec2 <__lshift+0x3e>
 800deae:	4602      	mov	r2, r0
 800deb0:	4b2a      	ldr	r3, [pc, #168]	; (800df5c <__lshift+0xd8>)
 800deb2:	482b      	ldr	r0, [pc, #172]	; (800df60 <__lshift+0xdc>)
 800deb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800deb8:	f7fe fa56 	bl	800c368 <__assert_func>
 800debc:	3101      	adds	r1, #1
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	e7ee      	b.n	800dea0 <__lshift+0x1c>
 800dec2:	2300      	movs	r3, #0
 800dec4:	f100 0114 	add.w	r1, r0, #20
 800dec8:	f100 0210 	add.w	r2, r0, #16
 800decc:	4618      	mov	r0, r3
 800dece:	4553      	cmp	r3, sl
 800ded0:	db37      	blt.n	800df42 <__lshift+0xbe>
 800ded2:	6920      	ldr	r0, [r4, #16]
 800ded4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ded8:	f104 0314 	add.w	r3, r4, #20
 800dedc:	f019 091f 	ands.w	r9, r9, #31
 800dee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dee8:	d02f      	beq.n	800df4a <__lshift+0xc6>
 800deea:	f1c9 0e20 	rsb	lr, r9, #32
 800deee:	468a      	mov	sl, r1
 800def0:	f04f 0c00 	mov.w	ip, #0
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	fa02 f209 	lsl.w	r2, r2, r9
 800defa:	ea42 020c 	orr.w	r2, r2, ip
 800defe:	f84a 2b04 	str.w	r2, [sl], #4
 800df02:	f853 2b04 	ldr.w	r2, [r3], #4
 800df06:	4298      	cmp	r0, r3
 800df08:	fa22 fc0e 	lsr.w	ip, r2, lr
 800df0c:	d8f2      	bhi.n	800def4 <__lshift+0x70>
 800df0e:	1b03      	subs	r3, r0, r4
 800df10:	3b15      	subs	r3, #21
 800df12:	f023 0303 	bic.w	r3, r3, #3
 800df16:	3304      	adds	r3, #4
 800df18:	f104 0215 	add.w	r2, r4, #21
 800df1c:	4290      	cmp	r0, r2
 800df1e:	bf38      	it	cc
 800df20:	2304      	movcc	r3, #4
 800df22:	f841 c003 	str.w	ip, [r1, r3]
 800df26:	f1bc 0f00 	cmp.w	ip, #0
 800df2a:	d001      	beq.n	800df30 <__lshift+0xac>
 800df2c:	f108 0602 	add.w	r6, r8, #2
 800df30:	3e01      	subs	r6, #1
 800df32:	4638      	mov	r0, r7
 800df34:	612e      	str	r6, [r5, #16]
 800df36:	4621      	mov	r1, r4
 800df38:	f7ff fd88 	bl	800da4c <_Bfree>
 800df3c:	4628      	mov	r0, r5
 800df3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df42:	f842 0f04 	str.w	r0, [r2, #4]!
 800df46:	3301      	adds	r3, #1
 800df48:	e7c1      	b.n	800dece <__lshift+0x4a>
 800df4a:	3904      	subs	r1, #4
 800df4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df50:	f841 2f04 	str.w	r2, [r1, #4]!
 800df54:	4298      	cmp	r0, r3
 800df56:	d8f9      	bhi.n	800df4c <__lshift+0xc8>
 800df58:	e7ea      	b.n	800df30 <__lshift+0xac>
 800df5a:	bf00      	nop
 800df5c:	0800f6ac 	.word	0x0800f6ac
 800df60:	0800f79c 	.word	0x0800f79c

0800df64 <__mcmp>:
 800df64:	b530      	push	{r4, r5, lr}
 800df66:	6902      	ldr	r2, [r0, #16]
 800df68:	690c      	ldr	r4, [r1, #16]
 800df6a:	1b12      	subs	r2, r2, r4
 800df6c:	d10e      	bne.n	800df8c <__mcmp+0x28>
 800df6e:	f100 0314 	add.w	r3, r0, #20
 800df72:	3114      	adds	r1, #20
 800df74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df84:	42a5      	cmp	r5, r4
 800df86:	d003      	beq.n	800df90 <__mcmp+0x2c>
 800df88:	d305      	bcc.n	800df96 <__mcmp+0x32>
 800df8a:	2201      	movs	r2, #1
 800df8c:	4610      	mov	r0, r2
 800df8e:	bd30      	pop	{r4, r5, pc}
 800df90:	4283      	cmp	r3, r0
 800df92:	d3f3      	bcc.n	800df7c <__mcmp+0x18>
 800df94:	e7fa      	b.n	800df8c <__mcmp+0x28>
 800df96:	f04f 32ff 	mov.w	r2, #4294967295
 800df9a:	e7f7      	b.n	800df8c <__mcmp+0x28>

0800df9c <__mdiff>:
 800df9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	4690      	mov	r8, r2
 800dfaa:	f7ff ffdb 	bl	800df64 <__mcmp>
 800dfae:	1e05      	subs	r5, r0, #0
 800dfb0:	d110      	bne.n	800dfd4 <__mdiff+0x38>
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f7ff fd09 	bl	800d9cc <_Balloc>
 800dfba:	b930      	cbnz	r0, 800dfca <__mdiff+0x2e>
 800dfbc:	4b3a      	ldr	r3, [pc, #232]	; (800e0a8 <__mdiff+0x10c>)
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	f240 2132 	movw	r1, #562	; 0x232
 800dfc4:	4839      	ldr	r0, [pc, #228]	; (800e0ac <__mdiff+0x110>)
 800dfc6:	f7fe f9cf 	bl	800c368 <__assert_func>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd4:	bfa4      	itt	ge
 800dfd6:	4643      	movge	r3, r8
 800dfd8:	46a0      	movge	r8, r4
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfe0:	bfa6      	itte	ge
 800dfe2:	461c      	movge	r4, r3
 800dfe4:	2500      	movge	r5, #0
 800dfe6:	2501      	movlt	r5, #1
 800dfe8:	f7ff fcf0 	bl	800d9cc <_Balloc>
 800dfec:	b920      	cbnz	r0, 800dff8 <__mdiff+0x5c>
 800dfee:	4b2e      	ldr	r3, [pc, #184]	; (800e0a8 <__mdiff+0x10c>)
 800dff0:	4602      	mov	r2, r0
 800dff2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dff6:	e7e5      	b.n	800dfc4 <__mdiff+0x28>
 800dff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dffc:	6926      	ldr	r6, [r4, #16]
 800dffe:	60c5      	str	r5, [r0, #12]
 800e000:	f104 0914 	add.w	r9, r4, #20
 800e004:	f108 0514 	add.w	r5, r8, #20
 800e008:	f100 0e14 	add.w	lr, r0, #20
 800e00c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e010:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e014:	f108 0210 	add.w	r2, r8, #16
 800e018:	46f2      	mov	sl, lr
 800e01a:	2100      	movs	r1, #0
 800e01c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e020:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e024:	fa1f f883 	uxth.w	r8, r3
 800e028:	fa11 f18b 	uxtah	r1, r1, fp
 800e02c:	0c1b      	lsrs	r3, r3, #16
 800e02e:	eba1 0808 	sub.w	r8, r1, r8
 800e032:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e036:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e03a:	fa1f f888 	uxth.w	r8, r8
 800e03e:	1419      	asrs	r1, r3, #16
 800e040:	454e      	cmp	r6, r9
 800e042:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e046:	f84a 3b04 	str.w	r3, [sl], #4
 800e04a:	d8e7      	bhi.n	800e01c <__mdiff+0x80>
 800e04c:	1b33      	subs	r3, r6, r4
 800e04e:	3b15      	subs	r3, #21
 800e050:	f023 0303 	bic.w	r3, r3, #3
 800e054:	3304      	adds	r3, #4
 800e056:	3415      	adds	r4, #21
 800e058:	42a6      	cmp	r6, r4
 800e05a:	bf38      	it	cc
 800e05c:	2304      	movcc	r3, #4
 800e05e:	441d      	add	r5, r3
 800e060:	4473      	add	r3, lr
 800e062:	469e      	mov	lr, r3
 800e064:	462e      	mov	r6, r5
 800e066:	4566      	cmp	r6, ip
 800e068:	d30e      	bcc.n	800e088 <__mdiff+0xec>
 800e06a:	f10c 0203 	add.w	r2, ip, #3
 800e06e:	1b52      	subs	r2, r2, r5
 800e070:	f022 0203 	bic.w	r2, r2, #3
 800e074:	3d03      	subs	r5, #3
 800e076:	45ac      	cmp	ip, r5
 800e078:	bf38      	it	cc
 800e07a:	2200      	movcc	r2, #0
 800e07c:	441a      	add	r2, r3
 800e07e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e082:	b17b      	cbz	r3, 800e0a4 <__mdiff+0x108>
 800e084:	6107      	str	r7, [r0, #16]
 800e086:	e7a3      	b.n	800dfd0 <__mdiff+0x34>
 800e088:	f856 8b04 	ldr.w	r8, [r6], #4
 800e08c:	fa11 f288 	uxtah	r2, r1, r8
 800e090:	1414      	asrs	r4, r2, #16
 800e092:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e096:	b292      	uxth	r2, r2
 800e098:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e09c:	f84e 2b04 	str.w	r2, [lr], #4
 800e0a0:	1421      	asrs	r1, r4, #16
 800e0a2:	e7e0      	b.n	800e066 <__mdiff+0xca>
 800e0a4:	3f01      	subs	r7, #1
 800e0a6:	e7ea      	b.n	800e07e <__mdiff+0xe2>
 800e0a8:	0800f6ac 	.word	0x0800f6ac
 800e0ac:	0800f79c 	.word	0x0800f79c

0800e0b0 <__ulp>:
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	ed8d 0b00 	vstr	d0, [sp]
 800e0b6:	9b01      	ldr	r3, [sp, #4]
 800e0b8:	4912      	ldr	r1, [pc, #72]	; (800e104 <__ulp+0x54>)
 800e0ba:	4019      	ands	r1, r3
 800e0bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e0c0:	2900      	cmp	r1, #0
 800e0c2:	dd05      	ble.n	800e0d0 <__ulp+0x20>
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	ec43 2b10 	vmov	d0, r2, r3
 800e0cc:	b002      	add	sp, #8
 800e0ce:	4770      	bx	lr
 800e0d0:	4249      	negs	r1, r1
 800e0d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e0d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e0da:	f04f 0200 	mov.w	r2, #0
 800e0de:	f04f 0300 	mov.w	r3, #0
 800e0e2:	da04      	bge.n	800e0ee <__ulp+0x3e>
 800e0e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e0e8:	fa41 f300 	asr.w	r3, r1, r0
 800e0ec:	e7ec      	b.n	800e0c8 <__ulp+0x18>
 800e0ee:	f1a0 0114 	sub.w	r1, r0, #20
 800e0f2:	291e      	cmp	r1, #30
 800e0f4:	bfda      	itte	le
 800e0f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e0fa:	fa20 f101 	lsrle.w	r1, r0, r1
 800e0fe:	2101      	movgt	r1, #1
 800e100:	460a      	mov	r2, r1
 800e102:	e7e1      	b.n	800e0c8 <__ulp+0x18>
 800e104:	7ff00000 	.word	0x7ff00000

0800e108 <__b2d>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	6905      	ldr	r5, [r0, #16]
 800e10c:	f100 0714 	add.w	r7, r0, #20
 800e110:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e114:	1f2e      	subs	r6, r5, #4
 800e116:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e11a:	4620      	mov	r0, r4
 800e11c:	f7ff fd48 	bl	800dbb0 <__hi0bits>
 800e120:	f1c0 0320 	rsb	r3, r0, #32
 800e124:	280a      	cmp	r0, #10
 800e126:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e1a4 <__b2d+0x9c>
 800e12a:	600b      	str	r3, [r1, #0]
 800e12c:	dc14      	bgt.n	800e158 <__b2d+0x50>
 800e12e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e132:	fa24 f10e 	lsr.w	r1, r4, lr
 800e136:	42b7      	cmp	r7, r6
 800e138:	ea41 030c 	orr.w	r3, r1, ip
 800e13c:	bf34      	ite	cc
 800e13e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e142:	2100      	movcs	r1, #0
 800e144:	3015      	adds	r0, #21
 800e146:	fa04 f000 	lsl.w	r0, r4, r0
 800e14a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e14e:	ea40 0201 	orr.w	r2, r0, r1
 800e152:	ec43 2b10 	vmov	d0, r2, r3
 800e156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e158:	42b7      	cmp	r7, r6
 800e15a:	bf3a      	itte	cc
 800e15c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e160:	f1a5 0608 	subcc.w	r6, r5, #8
 800e164:	2100      	movcs	r1, #0
 800e166:	380b      	subs	r0, #11
 800e168:	d017      	beq.n	800e19a <__b2d+0x92>
 800e16a:	f1c0 0c20 	rsb	ip, r0, #32
 800e16e:	fa04 f500 	lsl.w	r5, r4, r0
 800e172:	42be      	cmp	r6, r7
 800e174:	fa21 f40c 	lsr.w	r4, r1, ip
 800e178:	ea45 0504 	orr.w	r5, r5, r4
 800e17c:	bf8c      	ite	hi
 800e17e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e182:	2400      	movls	r4, #0
 800e184:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e188:	fa01 f000 	lsl.w	r0, r1, r0
 800e18c:	fa24 f40c 	lsr.w	r4, r4, ip
 800e190:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e194:	ea40 0204 	orr.w	r2, r0, r4
 800e198:	e7db      	b.n	800e152 <__b2d+0x4a>
 800e19a:	ea44 030c 	orr.w	r3, r4, ip
 800e19e:	460a      	mov	r2, r1
 800e1a0:	e7d7      	b.n	800e152 <__b2d+0x4a>
 800e1a2:	bf00      	nop
 800e1a4:	3ff00000 	.word	0x3ff00000

0800e1a8 <__d2b>:
 800e1a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	4689      	mov	r9, r1
 800e1ae:	2101      	movs	r1, #1
 800e1b0:	ec57 6b10 	vmov	r6, r7, d0
 800e1b4:	4690      	mov	r8, r2
 800e1b6:	f7ff fc09 	bl	800d9cc <_Balloc>
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	b930      	cbnz	r0, 800e1cc <__d2b+0x24>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	4b25      	ldr	r3, [pc, #148]	; (800e258 <__d2b+0xb0>)
 800e1c2:	4826      	ldr	r0, [pc, #152]	; (800e25c <__d2b+0xb4>)
 800e1c4:	f240 310a 	movw	r1, #778	; 0x30a
 800e1c8:	f7fe f8ce 	bl	800c368 <__assert_func>
 800e1cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e1d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1d4:	bb35      	cbnz	r5, 800e224 <__d2b+0x7c>
 800e1d6:	2e00      	cmp	r6, #0
 800e1d8:	9301      	str	r3, [sp, #4]
 800e1da:	d028      	beq.n	800e22e <__d2b+0x86>
 800e1dc:	4668      	mov	r0, sp
 800e1de:	9600      	str	r6, [sp, #0]
 800e1e0:	f7ff fd06 	bl	800dbf0 <__lo0bits>
 800e1e4:	9900      	ldr	r1, [sp, #0]
 800e1e6:	b300      	cbz	r0, 800e22a <__d2b+0x82>
 800e1e8:	9a01      	ldr	r2, [sp, #4]
 800e1ea:	f1c0 0320 	rsb	r3, r0, #32
 800e1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e1f2:	430b      	orrs	r3, r1
 800e1f4:	40c2      	lsrs	r2, r0
 800e1f6:	6163      	str	r3, [r4, #20]
 800e1f8:	9201      	str	r2, [sp, #4]
 800e1fa:	9b01      	ldr	r3, [sp, #4]
 800e1fc:	61a3      	str	r3, [r4, #24]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	bf14      	ite	ne
 800e202:	2202      	movne	r2, #2
 800e204:	2201      	moveq	r2, #1
 800e206:	6122      	str	r2, [r4, #16]
 800e208:	b1d5      	cbz	r5, 800e240 <__d2b+0x98>
 800e20a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e20e:	4405      	add	r5, r0
 800e210:	f8c9 5000 	str.w	r5, [r9]
 800e214:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e218:	f8c8 0000 	str.w	r0, [r8]
 800e21c:	4620      	mov	r0, r4
 800e21e:	b003      	add	sp, #12
 800e220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e228:	e7d5      	b.n	800e1d6 <__d2b+0x2e>
 800e22a:	6161      	str	r1, [r4, #20]
 800e22c:	e7e5      	b.n	800e1fa <__d2b+0x52>
 800e22e:	a801      	add	r0, sp, #4
 800e230:	f7ff fcde 	bl	800dbf0 <__lo0bits>
 800e234:	9b01      	ldr	r3, [sp, #4]
 800e236:	6163      	str	r3, [r4, #20]
 800e238:	2201      	movs	r2, #1
 800e23a:	6122      	str	r2, [r4, #16]
 800e23c:	3020      	adds	r0, #32
 800e23e:	e7e3      	b.n	800e208 <__d2b+0x60>
 800e240:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e244:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e248:	f8c9 0000 	str.w	r0, [r9]
 800e24c:	6918      	ldr	r0, [r3, #16]
 800e24e:	f7ff fcaf 	bl	800dbb0 <__hi0bits>
 800e252:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e256:	e7df      	b.n	800e218 <__d2b+0x70>
 800e258:	0800f6ac 	.word	0x0800f6ac
 800e25c:	0800f79c 	.word	0x0800f79c

0800e260 <__ratio>:
 800e260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	4688      	mov	r8, r1
 800e266:	4669      	mov	r1, sp
 800e268:	4681      	mov	r9, r0
 800e26a:	f7ff ff4d 	bl	800e108 <__b2d>
 800e26e:	a901      	add	r1, sp, #4
 800e270:	4640      	mov	r0, r8
 800e272:	ec55 4b10 	vmov	r4, r5, d0
 800e276:	f7ff ff47 	bl	800e108 <__b2d>
 800e27a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e27e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e282:	eba3 0c02 	sub.w	ip, r3, r2
 800e286:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e28a:	1a9b      	subs	r3, r3, r2
 800e28c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e290:	ec51 0b10 	vmov	r0, r1, d0
 800e294:	2b00      	cmp	r3, #0
 800e296:	bfd6      	itet	le
 800e298:	460a      	movle	r2, r1
 800e29a:	462a      	movgt	r2, r5
 800e29c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e2a0:	468b      	mov	fp, r1
 800e2a2:	462f      	mov	r7, r5
 800e2a4:	bfd4      	ite	le
 800e2a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e2aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	ee10 2a10 	vmov	r2, s0
 800e2b4:	465b      	mov	r3, fp
 800e2b6:	4639      	mov	r1, r7
 800e2b8:	f7f2 fac8 	bl	800084c <__aeabi_ddiv>
 800e2bc:	ec41 0b10 	vmov	d0, r0, r1
 800e2c0:	b003      	add	sp, #12
 800e2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2c6 <__copybits>:
 800e2c6:	3901      	subs	r1, #1
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	1149      	asrs	r1, r1, #5
 800e2cc:	6914      	ldr	r4, [r2, #16]
 800e2ce:	3101      	adds	r1, #1
 800e2d0:	f102 0314 	add.w	r3, r2, #20
 800e2d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e2d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e2dc:	1f05      	subs	r5, r0, #4
 800e2de:	42a3      	cmp	r3, r4
 800e2e0:	d30c      	bcc.n	800e2fc <__copybits+0x36>
 800e2e2:	1aa3      	subs	r3, r4, r2
 800e2e4:	3b11      	subs	r3, #17
 800e2e6:	f023 0303 	bic.w	r3, r3, #3
 800e2ea:	3211      	adds	r2, #17
 800e2ec:	42a2      	cmp	r2, r4
 800e2ee:	bf88      	it	hi
 800e2f0:	2300      	movhi	r3, #0
 800e2f2:	4418      	add	r0, r3
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	4288      	cmp	r0, r1
 800e2f8:	d305      	bcc.n	800e306 <__copybits+0x40>
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}
 800e2fc:	f853 6b04 	ldr.w	r6, [r3], #4
 800e300:	f845 6f04 	str.w	r6, [r5, #4]!
 800e304:	e7eb      	b.n	800e2de <__copybits+0x18>
 800e306:	f840 3b04 	str.w	r3, [r0], #4
 800e30a:	e7f4      	b.n	800e2f6 <__copybits+0x30>

0800e30c <__any_on>:
 800e30c:	f100 0214 	add.w	r2, r0, #20
 800e310:	6900      	ldr	r0, [r0, #16]
 800e312:	114b      	asrs	r3, r1, #5
 800e314:	4298      	cmp	r0, r3
 800e316:	b510      	push	{r4, lr}
 800e318:	db11      	blt.n	800e33e <__any_on+0x32>
 800e31a:	dd0a      	ble.n	800e332 <__any_on+0x26>
 800e31c:	f011 011f 	ands.w	r1, r1, #31
 800e320:	d007      	beq.n	800e332 <__any_on+0x26>
 800e322:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e326:	fa24 f001 	lsr.w	r0, r4, r1
 800e32a:	fa00 f101 	lsl.w	r1, r0, r1
 800e32e:	428c      	cmp	r4, r1
 800e330:	d10b      	bne.n	800e34a <__any_on+0x3e>
 800e332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e336:	4293      	cmp	r3, r2
 800e338:	d803      	bhi.n	800e342 <__any_on+0x36>
 800e33a:	2000      	movs	r0, #0
 800e33c:	bd10      	pop	{r4, pc}
 800e33e:	4603      	mov	r3, r0
 800e340:	e7f7      	b.n	800e332 <__any_on+0x26>
 800e342:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e346:	2900      	cmp	r1, #0
 800e348:	d0f5      	beq.n	800e336 <__any_on+0x2a>
 800e34a:	2001      	movs	r0, #1
 800e34c:	e7f6      	b.n	800e33c <__any_on+0x30>

0800e34e <_calloc_r>:
 800e34e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e350:	fba1 2402 	umull	r2, r4, r1, r2
 800e354:	b94c      	cbnz	r4, 800e36a <_calloc_r+0x1c>
 800e356:	4611      	mov	r1, r2
 800e358:	9201      	str	r2, [sp, #4]
 800e35a:	f000 f87b 	bl	800e454 <_malloc_r>
 800e35e:	9a01      	ldr	r2, [sp, #4]
 800e360:	4605      	mov	r5, r0
 800e362:	b930      	cbnz	r0, 800e372 <_calloc_r+0x24>
 800e364:	4628      	mov	r0, r5
 800e366:	b003      	add	sp, #12
 800e368:	bd30      	pop	{r4, r5, pc}
 800e36a:	220c      	movs	r2, #12
 800e36c:	6002      	str	r2, [r0, #0]
 800e36e:	2500      	movs	r5, #0
 800e370:	e7f8      	b.n	800e364 <_calloc_r+0x16>
 800e372:	4621      	mov	r1, r4
 800e374:	f7fc fa92 	bl	800a89c <memset>
 800e378:	e7f4      	b.n	800e364 <_calloc_r+0x16>
	...

0800e37c <_free_r>:
 800e37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e37e:	2900      	cmp	r1, #0
 800e380:	d044      	beq.n	800e40c <_free_r+0x90>
 800e382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e386:	9001      	str	r0, [sp, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f1a1 0404 	sub.w	r4, r1, #4
 800e38e:	bfb8      	it	lt
 800e390:	18e4      	addlt	r4, r4, r3
 800e392:	f000 fe45 	bl	800f020 <__malloc_lock>
 800e396:	4a1e      	ldr	r2, [pc, #120]	; (800e410 <_free_r+0x94>)
 800e398:	9801      	ldr	r0, [sp, #4]
 800e39a:	6813      	ldr	r3, [r2, #0]
 800e39c:	b933      	cbnz	r3, 800e3ac <_free_r+0x30>
 800e39e:	6063      	str	r3, [r4, #4]
 800e3a0:	6014      	str	r4, [r2, #0]
 800e3a2:	b003      	add	sp, #12
 800e3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3a8:	f000 be40 	b.w	800f02c <__malloc_unlock>
 800e3ac:	42a3      	cmp	r3, r4
 800e3ae:	d908      	bls.n	800e3c2 <_free_r+0x46>
 800e3b0:	6825      	ldr	r5, [r4, #0]
 800e3b2:	1961      	adds	r1, r4, r5
 800e3b4:	428b      	cmp	r3, r1
 800e3b6:	bf01      	itttt	eq
 800e3b8:	6819      	ldreq	r1, [r3, #0]
 800e3ba:	685b      	ldreq	r3, [r3, #4]
 800e3bc:	1949      	addeq	r1, r1, r5
 800e3be:	6021      	streq	r1, [r4, #0]
 800e3c0:	e7ed      	b.n	800e39e <_free_r+0x22>
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	b10b      	cbz	r3, 800e3cc <_free_r+0x50>
 800e3c8:	42a3      	cmp	r3, r4
 800e3ca:	d9fa      	bls.n	800e3c2 <_free_r+0x46>
 800e3cc:	6811      	ldr	r1, [r2, #0]
 800e3ce:	1855      	adds	r5, r2, r1
 800e3d0:	42a5      	cmp	r5, r4
 800e3d2:	d10b      	bne.n	800e3ec <_free_r+0x70>
 800e3d4:	6824      	ldr	r4, [r4, #0]
 800e3d6:	4421      	add	r1, r4
 800e3d8:	1854      	adds	r4, r2, r1
 800e3da:	42a3      	cmp	r3, r4
 800e3dc:	6011      	str	r1, [r2, #0]
 800e3de:	d1e0      	bne.n	800e3a2 <_free_r+0x26>
 800e3e0:	681c      	ldr	r4, [r3, #0]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	6053      	str	r3, [r2, #4]
 800e3e6:	4421      	add	r1, r4
 800e3e8:	6011      	str	r1, [r2, #0]
 800e3ea:	e7da      	b.n	800e3a2 <_free_r+0x26>
 800e3ec:	d902      	bls.n	800e3f4 <_free_r+0x78>
 800e3ee:	230c      	movs	r3, #12
 800e3f0:	6003      	str	r3, [r0, #0]
 800e3f2:	e7d6      	b.n	800e3a2 <_free_r+0x26>
 800e3f4:	6825      	ldr	r5, [r4, #0]
 800e3f6:	1961      	adds	r1, r4, r5
 800e3f8:	428b      	cmp	r3, r1
 800e3fa:	bf04      	itt	eq
 800e3fc:	6819      	ldreq	r1, [r3, #0]
 800e3fe:	685b      	ldreq	r3, [r3, #4]
 800e400:	6063      	str	r3, [r4, #4]
 800e402:	bf04      	itt	eq
 800e404:	1949      	addeq	r1, r1, r5
 800e406:	6021      	streq	r1, [r4, #0]
 800e408:	6054      	str	r4, [r2, #4]
 800e40a:	e7ca      	b.n	800e3a2 <_free_r+0x26>
 800e40c:	b003      	add	sp, #12
 800e40e:	bd30      	pop	{r4, r5, pc}
 800e410:	200050a0 	.word	0x200050a0

0800e414 <sbrk_aligned>:
 800e414:	b570      	push	{r4, r5, r6, lr}
 800e416:	4e0e      	ldr	r6, [pc, #56]	; (800e450 <sbrk_aligned+0x3c>)
 800e418:	460c      	mov	r4, r1
 800e41a:	6831      	ldr	r1, [r6, #0]
 800e41c:	4605      	mov	r5, r0
 800e41e:	b911      	cbnz	r1, 800e426 <sbrk_aligned+0x12>
 800e420:	f000 fb4a 	bl	800eab8 <_sbrk_r>
 800e424:	6030      	str	r0, [r6, #0]
 800e426:	4621      	mov	r1, r4
 800e428:	4628      	mov	r0, r5
 800e42a:	f000 fb45 	bl	800eab8 <_sbrk_r>
 800e42e:	1c43      	adds	r3, r0, #1
 800e430:	d00a      	beq.n	800e448 <sbrk_aligned+0x34>
 800e432:	1cc4      	adds	r4, r0, #3
 800e434:	f024 0403 	bic.w	r4, r4, #3
 800e438:	42a0      	cmp	r0, r4
 800e43a:	d007      	beq.n	800e44c <sbrk_aligned+0x38>
 800e43c:	1a21      	subs	r1, r4, r0
 800e43e:	4628      	mov	r0, r5
 800e440:	f000 fb3a 	bl	800eab8 <_sbrk_r>
 800e444:	3001      	adds	r0, #1
 800e446:	d101      	bne.n	800e44c <sbrk_aligned+0x38>
 800e448:	f04f 34ff 	mov.w	r4, #4294967295
 800e44c:	4620      	mov	r0, r4
 800e44e:	bd70      	pop	{r4, r5, r6, pc}
 800e450:	200050a4 	.word	0x200050a4

0800e454 <_malloc_r>:
 800e454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e458:	1ccd      	adds	r5, r1, #3
 800e45a:	f025 0503 	bic.w	r5, r5, #3
 800e45e:	3508      	adds	r5, #8
 800e460:	2d0c      	cmp	r5, #12
 800e462:	bf38      	it	cc
 800e464:	250c      	movcc	r5, #12
 800e466:	2d00      	cmp	r5, #0
 800e468:	4607      	mov	r7, r0
 800e46a:	db01      	blt.n	800e470 <_malloc_r+0x1c>
 800e46c:	42a9      	cmp	r1, r5
 800e46e:	d905      	bls.n	800e47c <_malloc_r+0x28>
 800e470:	230c      	movs	r3, #12
 800e472:	603b      	str	r3, [r7, #0]
 800e474:	2600      	movs	r6, #0
 800e476:	4630      	mov	r0, r6
 800e478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e47c:	4e2e      	ldr	r6, [pc, #184]	; (800e538 <_malloc_r+0xe4>)
 800e47e:	f000 fdcf 	bl	800f020 <__malloc_lock>
 800e482:	6833      	ldr	r3, [r6, #0]
 800e484:	461c      	mov	r4, r3
 800e486:	bb34      	cbnz	r4, 800e4d6 <_malloc_r+0x82>
 800e488:	4629      	mov	r1, r5
 800e48a:	4638      	mov	r0, r7
 800e48c:	f7ff ffc2 	bl	800e414 <sbrk_aligned>
 800e490:	1c43      	adds	r3, r0, #1
 800e492:	4604      	mov	r4, r0
 800e494:	d14d      	bne.n	800e532 <_malloc_r+0xde>
 800e496:	6834      	ldr	r4, [r6, #0]
 800e498:	4626      	mov	r6, r4
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	d140      	bne.n	800e520 <_malloc_r+0xcc>
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	4638      	mov	r0, r7
 800e4a4:	eb04 0803 	add.w	r8, r4, r3
 800e4a8:	f000 fb06 	bl	800eab8 <_sbrk_r>
 800e4ac:	4580      	cmp	r8, r0
 800e4ae:	d13a      	bne.n	800e526 <_malloc_r+0xd2>
 800e4b0:	6821      	ldr	r1, [r4, #0]
 800e4b2:	3503      	adds	r5, #3
 800e4b4:	1a6d      	subs	r5, r5, r1
 800e4b6:	f025 0503 	bic.w	r5, r5, #3
 800e4ba:	3508      	adds	r5, #8
 800e4bc:	2d0c      	cmp	r5, #12
 800e4be:	bf38      	it	cc
 800e4c0:	250c      	movcc	r5, #12
 800e4c2:	4629      	mov	r1, r5
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	f7ff ffa5 	bl	800e414 <sbrk_aligned>
 800e4ca:	3001      	adds	r0, #1
 800e4cc:	d02b      	beq.n	800e526 <_malloc_r+0xd2>
 800e4ce:	6823      	ldr	r3, [r4, #0]
 800e4d0:	442b      	add	r3, r5
 800e4d2:	6023      	str	r3, [r4, #0]
 800e4d4:	e00e      	b.n	800e4f4 <_malloc_r+0xa0>
 800e4d6:	6822      	ldr	r2, [r4, #0]
 800e4d8:	1b52      	subs	r2, r2, r5
 800e4da:	d41e      	bmi.n	800e51a <_malloc_r+0xc6>
 800e4dc:	2a0b      	cmp	r2, #11
 800e4de:	d916      	bls.n	800e50e <_malloc_r+0xba>
 800e4e0:	1961      	adds	r1, r4, r5
 800e4e2:	42a3      	cmp	r3, r4
 800e4e4:	6025      	str	r5, [r4, #0]
 800e4e6:	bf18      	it	ne
 800e4e8:	6059      	strne	r1, [r3, #4]
 800e4ea:	6863      	ldr	r3, [r4, #4]
 800e4ec:	bf08      	it	eq
 800e4ee:	6031      	streq	r1, [r6, #0]
 800e4f0:	5162      	str	r2, [r4, r5]
 800e4f2:	604b      	str	r3, [r1, #4]
 800e4f4:	4638      	mov	r0, r7
 800e4f6:	f104 060b 	add.w	r6, r4, #11
 800e4fa:	f000 fd97 	bl	800f02c <__malloc_unlock>
 800e4fe:	f026 0607 	bic.w	r6, r6, #7
 800e502:	1d23      	adds	r3, r4, #4
 800e504:	1af2      	subs	r2, r6, r3
 800e506:	d0b6      	beq.n	800e476 <_malloc_r+0x22>
 800e508:	1b9b      	subs	r3, r3, r6
 800e50a:	50a3      	str	r3, [r4, r2]
 800e50c:	e7b3      	b.n	800e476 <_malloc_r+0x22>
 800e50e:	6862      	ldr	r2, [r4, #4]
 800e510:	42a3      	cmp	r3, r4
 800e512:	bf0c      	ite	eq
 800e514:	6032      	streq	r2, [r6, #0]
 800e516:	605a      	strne	r2, [r3, #4]
 800e518:	e7ec      	b.n	800e4f4 <_malloc_r+0xa0>
 800e51a:	4623      	mov	r3, r4
 800e51c:	6864      	ldr	r4, [r4, #4]
 800e51e:	e7b2      	b.n	800e486 <_malloc_r+0x32>
 800e520:	4634      	mov	r4, r6
 800e522:	6876      	ldr	r6, [r6, #4]
 800e524:	e7b9      	b.n	800e49a <_malloc_r+0x46>
 800e526:	230c      	movs	r3, #12
 800e528:	603b      	str	r3, [r7, #0]
 800e52a:	4638      	mov	r0, r7
 800e52c:	f000 fd7e 	bl	800f02c <__malloc_unlock>
 800e530:	e7a1      	b.n	800e476 <_malloc_r+0x22>
 800e532:	6025      	str	r5, [r4, #0]
 800e534:	e7de      	b.n	800e4f4 <_malloc_r+0xa0>
 800e536:	bf00      	nop
 800e538:	200050a0 	.word	0x200050a0

0800e53c <__ssputs_r>:
 800e53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e540:	688e      	ldr	r6, [r1, #8]
 800e542:	429e      	cmp	r6, r3
 800e544:	4682      	mov	sl, r0
 800e546:	460c      	mov	r4, r1
 800e548:	4690      	mov	r8, r2
 800e54a:	461f      	mov	r7, r3
 800e54c:	d838      	bhi.n	800e5c0 <__ssputs_r+0x84>
 800e54e:	898a      	ldrh	r2, [r1, #12]
 800e550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e554:	d032      	beq.n	800e5bc <__ssputs_r+0x80>
 800e556:	6825      	ldr	r5, [r4, #0]
 800e558:	6909      	ldr	r1, [r1, #16]
 800e55a:	eba5 0901 	sub.w	r9, r5, r1
 800e55e:	6965      	ldr	r5, [r4, #20]
 800e560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e568:	3301      	adds	r3, #1
 800e56a:	444b      	add	r3, r9
 800e56c:	106d      	asrs	r5, r5, #1
 800e56e:	429d      	cmp	r5, r3
 800e570:	bf38      	it	cc
 800e572:	461d      	movcc	r5, r3
 800e574:	0553      	lsls	r3, r2, #21
 800e576:	d531      	bpl.n	800e5dc <__ssputs_r+0xa0>
 800e578:	4629      	mov	r1, r5
 800e57a:	f7ff ff6b 	bl	800e454 <_malloc_r>
 800e57e:	4606      	mov	r6, r0
 800e580:	b950      	cbnz	r0, 800e598 <__ssputs_r+0x5c>
 800e582:	230c      	movs	r3, #12
 800e584:	f8ca 3000 	str.w	r3, [sl]
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e58e:	81a3      	strh	r3, [r4, #12]
 800e590:	f04f 30ff 	mov.w	r0, #4294967295
 800e594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e598:	6921      	ldr	r1, [r4, #16]
 800e59a:	464a      	mov	r2, r9
 800e59c:	f7fc f970 	bl	800a880 <memcpy>
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e5a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5aa:	81a3      	strh	r3, [r4, #12]
 800e5ac:	6126      	str	r6, [r4, #16]
 800e5ae:	6165      	str	r5, [r4, #20]
 800e5b0:	444e      	add	r6, r9
 800e5b2:	eba5 0509 	sub.w	r5, r5, r9
 800e5b6:	6026      	str	r6, [r4, #0]
 800e5b8:	60a5      	str	r5, [r4, #8]
 800e5ba:	463e      	mov	r6, r7
 800e5bc:	42be      	cmp	r6, r7
 800e5be:	d900      	bls.n	800e5c2 <__ssputs_r+0x86>
 800e5c0:	463e      	mov	r6, r7
 800e5c2:	6820      	ldr	r0, [r4, #0]
 800e5c4:	4632      	mov	r2, r6
 800e5c6:	4641      	mov	r1, r8
 800e5c8:	f000 fd10 	bl	800efec <memmove>
 800e5cc:	68a3      	ldr	r3, [r4, #8]
 800e5ce:	1b9b      	subs	r3, r3, r6
 800e5d0:	60a3      	str	r3, [r4, #8]
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	4433      	add	r3, r6
 800e5d6:	6023      	str	r3, [r4, #0]
 800e5d8:	2000      	movs	r0, #0
 800e5da:	e7db      	b.n	800e594 <__ssputs_r+0x58>
 800e5dc:	462a      	mov	r2, r5
 800e5de:	f000 fd2b 	bl	800f038 <_realloc_r>
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d1e1      	bne.n	800e5ac <__ssputs_r+0x70>
 800e5e8:	6921      	ldr	r1, [r4, #16]
 800e5ea:	4650      	mov	r0, sl
 800e5ec:	f7ff fec6 	bl	800e37c <_free_r>
 800e5f0:	e7c7      	b.n	800e582 <__ssputs_r+0x46>
	...

0800e5f4 <_svfiprintf_r>:
 800e5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f8:	4698      	mov	r8, r3
 800e5fa:	898b      	ldrh	r3, [r1, #12]
 800e5fc:	061b      	lsls	r3, r3, #24
 800e5fe:	b09d      	sub	sp, #116	; 0x74
 800e600:	4607      	mov	r7, r0
 800e602:	460d      	mov	r5, r1
 800e604:	4614      	mov	r4, r2
 800e606:	d50e      	bpl.n	800e626 <_svfiprintf_r+0x32>
 800e608:	690b      	ldr	r3, [r1, #16]
 800e60a:	b963      	cbnz	r3, 800e626 <_svfiprintf_r+0x32>
 800e60c:	2140      	movs	r1, #64	; 0x40
 800e60e:	f7ff ff21 	bl	800e454 <_malloc_r>
 800e612:	6028      	str	r0, [r5, #0]
 800e614:	6128      	str	r0, [r5, #16]
 800e616:	b920      	cbnz	r0, 800e622 <_svfiprintf_r+0x2e>
 800e618:	230c      	movs	r3, #12
 800e61a:	603b      	str	r3, [r7, #0]
 800e61c:	f04f 30ff 	mov.w	r0, #4294967295
 800e620:	e0d1      	b.n	800e7c6 <_svfiprintf_r+0x1d2>
 800e622:	2340      	movs	r3, #64	; 0x40
 800e624:	616b      	str	r3, [r5, #20]
 800e626:	2300      	movs	r3, #0
 800e628:	9309      	str	r3, [sp, #36]	; 0x24
 800e62a:	2320      	movs	r3, #32
 800e62c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e630:	f8cd 800c 	str.w	r8, [sp, #12]
 800e634:	2330      	movs	r3, #48	; 0x30
 800e636:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e7e0 <_svfiprintf_r+0x1ec>
 800e63a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e63e:	f04f 0901 	mov.w	r9, #1
 800e642:	4623      	mov	r3, r4
 800e644:	469a      	mov	sl, r3
 800e646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e64a:	b10a      	cbz	r2, 800e650 <_svfiprintf_r+0x5c>
 800e64c:	2a25      	cmp	r2, #37	; 0x25
 800e64e:	d1f9      	bne.n	800e644 <_svfiprintf_r+0x50>
 800e650:	ebba 0b04 	subs.w	fp, sl, r4
 800e654:	d00b      	beq.n	800e66e <_svfiprintf_r+0x7a>
 800e656:	465b      	mov	r3, fp
 800e658:	4622      	mov	r2, r4
 800e65a:	4629      	mov	r1, r5
 800e65c:	4638      	mov	r0, r7
 800e65e:	f7ff ff6d 	bl	800e53c <__ssputs_r>
 800e662:	3001      	adds	r0, #1
 800e664:	f000 80aa 	beq.w	800e7bc <_svfiprintf_r+0x1c8>
 800e668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e66a:	445a      	add	r2, fp
 800e66c:	9209      	str	r2, [sp, #36]	; 0x24
 800e66e:	f89a 3000 	ldrb.w	r3, [sl]
 800e672:	2b00      	cmp	r3, #0
 800e674:	f000 80a2 	beq.w	800e7bc <_svfiprintf_r+0x1c8>
 800e678:	2300      	movs	r3, #0
 800e67a:	f04f 32ff 	mov.w	r2, #4294967295
 800e67e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e682:	f10a 0a01 	add.w	sl, sl, #1
 800e686:	9304      	str	r3, [sp, #16]
 800e688:	9307      	str	r3, [sp, #28]
 800e68a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e68e:	931a      	str	r3, [sp, #104]	; 0x68
 800e690:	4654      	mov	r4, sl
 800e692:	2205      	movs	r2, #5
 800e694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e698:	4851      	ldr	r0, [pc, #324]	; (800e7e0 <_svfiprintf_r+0x1ec>)
 800e69a:	f7f1 fda1 	bl	80001e0 <memchr>
 800e69e:	9a04      	ldr	r2, [sp, #16]
 800e6a0:	b9d8      	cbnz	r0, 800e6da <_svfiprintf_r+0xe6>
 800e6a2:	06d0      	lsls	r0, r2, #27
 800e6a4:	bf44      	itt	mi
 800e6a6:	2320      	movmi	r3, #32
 800e6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6ac:	0711      	lsls	r1, r2, #28
 800e6ae:	bf44      	itt	mi
 800e6b0:	232b      	movmi	r3, #43	; 0x2b
 800e6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e6bc:	d015      	beq.n	800e6ea <_svfiprintf_r+0xf6>
 800e6be:	9a07      	ldr	r2, [sp, #28]
 800e6c0:	4654      	mov	r4, sl
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	f04f 0c0a 	mov.w	ip, #10
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6ce:	3b30      	subs	r3, #48	; 0x30
 800e6d0:	2b09      	cmp	r3, #9
 800e6d2:	d94e      	bls.n	800e772 <_svfiprintf_r+0x17e>
 800e6d4:	b1b0      	cbz	r0, 800e704 <_svfiprintf_r+0x110>
 800e6d6:	9207      	str	r2, [sp, #28]
 800e6d8:	e014      	b.n	800e704 <_svfiprintf_r+0x110>
 800e6da:	eba0 0308 	sub.w	r3, r0, r8
 800e6de:	fa09 f303 	lsl.w	r3, r9, r3
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	9304      	str	r3, [sp, #16]
 800e6e6:	46a2      	mov	sl, r4
 800e6e8:	e7d2      	b.n	800e690 <_svfiprintf_r+0x9c>
 800e6ea:	9b03      	ldr	r3, [sp, #12]
 800e6ec:	1d19      	adds	r1, r3, #4
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	9103      	str	r1, [sp, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bfbb      	ittet	lt
 800e6f6:	425b      	neglt	r3, r3
 800e6f8:	f042 0202 	orrlt.w	r2, r2, #2
 800e6fc:	9307      	strge	r3, [sp, #28]
 800e6fe:	9307      	strlt	r3, [sp, #28]
 800e700:	bfb8      	it	lt
 800e702:	9204      	strlt	r2, [sp, #16]
 800e704:	7823      	ldrb	r3, [r4, #0]
 800e706:	2b2e      	cmp	r3, #46	; 0x2e
 800e708:	d10c      	bne.n	800e724 <_svfiprintf_r+0x130>
 800e70a:	7863      	ldrb	r3, [r4, #1]
 800e70c:	2b2a      	cmp	r3, #42	; 0x2a
 800e70e:	d135      	bne.n	800e77c <_svfiprintf_r+0x188>
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	1d1a      	adds	r2, r3, #4
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	9203      	str	r2, [sp, #12]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	bfb8      	it	lt
 800e71c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e720:	3402      	adds	r4, #2
 800e722:	9305      	str	r3, [sp, #20]
 800e724:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e7f0 <_svfiprintf_r+0x1fc>
 800e728:	7821      	ldrb	r1, [r4, #0]
 800e72a:	2203      	movs	r2, #3
 800e72c:	4650      	mov	r0, sl
 800e72e:	f7f1 fd57 	bl	80001e0 <memchr>
 800e732:	b140      	cbz	r0, 800e746 <_svfiprintf_r+0x152>
 800e734:	2340      	movs	r3, #64	; 0x40
 800e736:	eba0 000a 	sub.w	r0, r0, sl
 800e73a:	fa03 f000 	lsl.w	r0, r3, r0
 800e73e:	9b04      	ldr	r3, [sp, #16]
 800e740:	4303      	orrs	r3, r0
 800e742:	3401      	adds	r4, #1
 800e744:	9304      	str	r3, [sp, #16]
 800e746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e74a:	4826      	ldr	r0, [pc, #152]	; (800e7e4 <_svfiprintf_r+0x1f0>)
 800e74c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e750:	2206      	movs	r2, #6
 800e752:	f7f1 fd45 	bl	80001e0 <memchr>
 800e756:	2800      	cmp	r0, #0
 800e758:	d038      	beq.n	800e7cc <_svfiprintf_r+0x1d8>
 800e75a:	4b23      	ldr	r3, [pc, #140]	; (800e7e8 <_svfiprintf_r+0x1f4>)
 800e75c:	bb1b      	cbnz	r3, 800e7a6 <_svfiprintf_r+0x1b2>
 800e75e:	9b03      	ldr	r3, [sp, #12]
 800e760:	3307      	adds	r3, #7
 800e762:	f023 0307 	bic.w	r3, r3, #7
 800e766:	3308      	adds	r3, #8
 800e768:	9303      	str	r3, [sp, #12]
 800e76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e76c:	4433      	add	r3, r6
 800e76e:	9309      	str	r3, [sp, #36]	; 0x24
 800e770:	e767      	b.n	800e642 <_svfiprintf_r+0x4e>
 800e772:	fb0c 3202 	mla	r2, ip, r2, r3
 800e776:	460c      	mov	r4, r1
 800e778:	2001      	movs	r0, #1
 800e77a:	e7a5      	b.n	800e6c8 <_svfiprintf_r+0xd4>
 800e77c:	2300      	movs	r3, #0
 800e77e:	3401      	adds	r4, #1
 800e780:	9305      	str	r3, [sp, #20]
 800e782:	4619      	mov	r1, r3
 800e784:	f04f 0c0a 	mov.w	ip, #10
 800e788:	4620      	mov	r0, r4
 800e78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e78e:	3a30      	subs	r2, #48	; 0x30
 800e790:	2a09      	cmp	r2, #9
 800e792:	d903      	bls.n	800e79c <_svfiprintf_r+0x1a8>
 800e794:	2b00      	cmp	r3, #0
 800e796:	d0c5      	beq.n	800e724 <_svfiprintf_r+0x130>
 800e798:	9105      	str	r1, [sp, #20]
 800e79a:	e7c3      	b.n	800e724 <_svfiprintf_r+0x130>
 800e79c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e7f0      	b.n	800e788 <_svfiprintf_r+0x194>
 800e7a6:	ab03      	add	r3, sp, #12
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	462a      	mov	r2, r5
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <_svfiprintf_r+0x1f8>)
 800e7ae:	a904      	add	r1, sp, #16
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	f7fc f91b 	bl	800a9ec <_printf_float>
 800e7b6:	1c42      	adds	r2, r0, #1
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	d1d6      	bne.n	800e76a <_svfiprintf_r+0x176>
 800e7bc:	89ab      	ldrh	r3, [r5, #12]
 800e7be:	065b      	lsls	r3, r3, #25
 800e7c0:	f53f af2c 	bmi.w	800e61c <_svfiprintf_r+0x28>
 800e7c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7c6:	b01d      	add	sp, #116	; 0x74
 800e7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7cc:	ab03      	add	r3, sp, #12
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	462a      	mov	r2, r5
 800e7d2:	4b06      	ldr	r3, [pc, #24]	; (800e7ec <_svfiprintf_r+0x1f8>)
 800e7d4:	a904      	add	r1, sp, #16
 800e7d6:	4638      	mov	r0, r7
 800e7d8:	f7fc fbac 	bl	800af34 <_printf_i>
 800e7dc:	e7eb      	b.n	800e7b6 <_svfiprintf_r+0x1c2>
 800e7de:	bf00      	nop
 800e7e0:	0800f8f4 	.word	0x0800f8f4
 800e7e4:	0800f8fe 	.word	0x0800f8fe
 800e7e8:	0800a9ed 	.word	0x0800a9ed
 800e7ec:	0800e53d 	.word	0x0800e53d
 800e7f0:	0800f8fa 	.word	0x0800f8fa

0800e7f4 <__sfputc_r>:
 800e7f4:	6893      	ldr	r3, [r2, #8]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	b410      	push	{r4}
 800e7fc:	6093      	str	r3, [r2, #8]
 800e7fe:	da08      	bge.n	800e812 <__sfputc_r+0x1e>
 800e800:	6994      	ldr	r4, [r2, #24]
 800e802:	42a3      	cmp	r3, r4
 800e804:	db01      	blt.n	800e80a <__sfputc_r+0x16>
 800e806:	290a      	cmp	r1, #10
 800e808:	d103      	bne.n	800e812 <__sfputc_r+0x1e>
 800e80a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e80e:	f000 b9bb 	b.w	800eb88 <__swbuf_r>
 800e812:	6813      	ldr	r3, [r2, #0]
 800e814:	1c58      	adds	r0, r3, #1
 800e816:	6010      	str	r0, [r2, #0]
 800e818:	7019      	strb	r1, [r3, #0]
 800e81a:	4608      	mov	r0, r1
 800e81c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <__sfputs_r>:
 800e822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e824:	4606      	mov	r6, r0
 800e826:	460f      	mov	r7, r1
 800e828:	4614      	mov	r4, r2
 800e82a:	18d5      	adds	r5, r2, r3
 800e82c:	42ac      	cmp	r4, r5
 800e82e:	d101      	bne.n	800e834 <__sfputs_r+0x12>
 800e830:	2000      	movs	r0, #0
 800e832:	e007      	b.n	800e844 <__sfputs_r+0x22>
 800e834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e838:	463a      	mov	r2, r7
 800e83a:	4630      	mov	r0, r6
 800e83c:	f7ff ffda 	bl	800e7f4 <__sfputc_r>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d1f3      	bne.n	800e82c <__sfputs_r+0xa>
 800e844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e848 <_vfiprintf_r>:
 800e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e84c:	460d      	mov	r5, r1
 800e84e:	b09d      	sub	sp, #116	; 0x74
 800e850:	4614      	mov	r4, r2
 800e852:	4698      	mov	r8, r3
 800e854:	4606      	mov	r6, r0
 800e856:	b118      	cbz	r0, 800e860 <_vfiprintf_r+0x18>
 800e858:	6983      	ldr	r3, [r0, #24]
 800e85a:	b90b      	cbnz	r3, 800e860 <_vfiprintf_r+0x18>
 800e85c:	f7fe fc76 	bl	800d14c <__sinit>
 800e860:	4b89      	ldr	r3, [pc, #548]	; (800ea88 <_vfiprintf_r+0x240>)
 800e862:	429d      	cmp	r5, r3
 800e864:	d11b      	bne.n	800e89e <_vfiprintf_r+0x56>
 800e866:	6875      	ldr	r5, [r6, #4]
 800e868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e86a:	07d9      	lsls	r1, r3, #31
 800e86c:	d405      	bmi.n	800e87a <_vfiprintf_r+0x32>
 800e86e:	89ab      	ldrh	r3, [r5, #12]
 800e870:	059a      	lsls	r2, r3, #22
 800e872:	d402      	bmi.n	800e87a <_vfiprintf_r+0x32>
 800e874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e876:	f7ff f88c 	bl	800d992 <__retarget_lock_acquire_recursive>
 800e87a:	89ab      	ldrh	r3, [r5, #12]
 800e87c:	071b      	lsls	r3, r3, #28
 800e87e:	d501      	bpl.n	800e884 <_vfiprintf_r+0x3c>
 800e880:	692b      	ldr	r3, [r5, #16]
 800e882:	b9eb      	cbnz	r3, 800e8c0 <_vfiprintf_r+0x78>
 800e884:	4629      	mov	r1, r5
 800e886:	4630      	mov	r0, r6
 800e888:	f000 f9f0 	bl	800ec6c <__swsetup_r>
 800e88c:	b1c0      	cbz	r0, 800e8c0 <_vfiprintf_r+0x78>
 800e88e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e890:	07dc      	lsls	r4, r3, #31
 800e892:	d50e      	bpl.n	800e8b2 <_vfiprintf_r+0x6a>
 800e894:	f04f 30ff 	mov.w	r0, #4294967295
 800e898:	b01d      	add	sp, #116	; 0x74
 800e89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89e:	4b7b      	ldr	r3, [pc, #492]	; (800ea8c <_vfiprintf_r+0x244>)
 800e8a0:	429d      	cmp	r5, r3
 800e8a2:	d101      	bne.n	800e8a8 <_vfiprintf_r+0x60>
 800e8a4:	68b5      	ldr	r5, [r6, #8]
 800e8a6:	e7df      	b.n	800e868 <_vfiprintf_r+0x20>
 800e8a8:	4b79      	ldr	r3, [pc, #484]	; (800ea90 <_vfiprintf_r+0x248>)
 800e8aa:	429d      	cmp	r5, r3
 800e8ac:	bf08      	it	eq
 800e8ae:	68f5      	ldreq	r5, [r6, #12]
 800e8b0:	e7da      	b.n	800e868 <_vfiprintf_r+0x20>
 800e8b2:	89ab      	ldrh	r3, [r5, #12]
 800e8b4:	0598      	lsls	r0, r3, #22
 800e8b6:	d4ed      	bmi.n	800e894 <_vfiprintf_r+0x4c>
 800e8b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ba:	f7ff f86b 	bl	800d994 <__retarget_lock_release_recursive>
 800e8be:	e7e9      	b.n	800e894 <_vfiprintf_r+0x4c>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c4:	2320      	movs	r3, #32
 800e8c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8ce:	2330      	movs	r3, #48	; 0x30
 800e8d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea94 <_vfiprintf_r+0x24c>
 800e8d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8d8:	f04f 0901 	mov.w	r9, #1
 800e8dc:	4623      	mov	r3, r4
 800e8de:	469a      	mov	sl, r3
 800e8e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8e4:	b10a      	cbz	r2, 800e8ea <_vfiprintf_r+0xa2>
 800e8e6:	2a25      	cmp	r2, #37	; 0x25
 800e8e8:	d1f9      	bne.n	800e8de <_vfiprintf_r+0x96>
 800e8ea:	ebba 0b04 	subs.w	fp, sl, r4
 800e8ee:	d00b      	beq.n	800e908 <_vfiprintf_r+0xc0>
 800e8f0:	465b      	mov	r3, fp
 800e8f2:	4622      	mov	r2, r4
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f7ff ff93 	bl	800e822 <__sfputs_r>
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	f000 80aa 	beq.w	800ea56 <_vfiprintf_r+0x20e>
 800e902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e904:	445a      	add	r2, fp
 800e906:	9209      	str	r2, [sp, #36]	; 0x24
 800e908:	f89a 3000 	ldrb.w	r3, [sl]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f000 80a2 	beq.w	800ea56 <_vfiprintf_r+0x20e>
 800e912:	2300      	movs	r3, #0
 800e914:	f04f 32ff 	mov.w	r2, #4294967295
 800e918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e91c:	f10a 0a01 	add.w	sl, sl, #1
 800e920:	9304      	str	r3, [sp, #16]
 800e922:	9307      	str	r3, [sp, #28]
 800e924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e928:	931a      	str	r3, [sp, #104]	; 0x68
 800e92a:	4654      	mov	r4, sl
 800e92c:	2205      	movs	r2, #5
 800e92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e932:	4858      	ldr	r0, [pc, #352]	; (800ea94 <_vfiprintf_r+0x24c>)
 800e934:	f7f1 fc54 	bl	80001e0 <memchr>
 800e938:	9a04      	ldr	r2, [sp, #16]
 800e93a:	b9d8      	cbnz	r0, 800e974 <_vfiprintf_r+0x12c>
 800e93c:	06d1      	lsls	r1, r2, #27
 800e93e:	bf44      	itt	mi
 800e940:	2320      	movmi	r3, #32
 800e942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e946:	0713      	lsls	r3, r2, #28
 800e948:	bf44      	itt	mi
 800e94a:	232b      	movmi	r3, #43	; 0x2b
 800e94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e950:	f89a 3000 	ldrb.w	r3, [sl]
 800e954:	2b2a      	cmp	r3, #42	; 0x2a
 800e956:	d015      	beq.n	800e984 <_vfiprintf_r+0x13c>
 800e958:	9a07      	ldr	r2, [sp, #28]
 800e95a:	4654      	mov	r4, sl
 800e95c:	2000      	movs	r0, #0
 800e95e:	f04f 0c0a 	mov.w	ip, #10
 800e962:	4621      	mov	r1, r4
 800e964:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e968:	3b30      	subs	r3, #48	; 0x30
 800e96a:	2b09      	cmp	r3, #9
 800e96c:	d94e      	bls.n	800ea0c <_vfiprintf_r+0x1c4>
 800e96e:	b1b0      	cbz	r0, 800e99e <_vfiprintf_r+0x156>
 800e970:	9207      	str	r2, [sp, #28]
 800e972:	e014      	b.n	800e99e <_vfiprintf_r+0x156>
 800e974:	eba0 0308 	sub.w	r3, r0, r8
 800e978:	fa09 f303 	lsl.w	r3, r9, r3
 800e97c:	4313      	orrs	r3, r2
 800e97e:	9304      	str	r3, [sp, #16]
 800e980:	46a2      	mov	sl, r4
 800e982:	e7d2      	b.n	800e92a <_vfiprintf_r+0xe2>
 800e984:	9b03      	ldr	r3, [sp, #12]
 800e986:	1d19      	adds	r1, r3, #4
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	9103      	str	r1, [sp, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	bfbb      	ittet	lt
 800e990:	425b      	neglt	r3, r3
 800e992:	f042 0202 	orrlt.w	r2, r2, #2
 800e996:	9307      	strge	r3, [sp, #28]
 800e998:	9307      	strlt	r3, [sp, #28]
 800e99a:	bfb8      	it	lt
 800e99c:	9204      	strlt	r2, [sp, #16]
 800e99e:	7823      	ldrb	r3, [r4, #0]
 800e9a0:	2b2e      	cmp	r3, #46	; 0x2e
 800e9a2:	d10c      	bne.n	800e9be <_vfiprintf_r+0x176>
 800e9a4:	7863      	ldrb	r3, [r4, #1]
 800e9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e9a8:	d135      	bne.n	800ea16 <_vfiprintf_r+0x1ce>
 800e9aa:	9b03      	ldr	r3, [sp, #12]
 800e9ac:	1d1a      	adds	r2, r3, #4
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	9203      	str	r2, [sp, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	bfb8      	it	lt
 800e9b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9ba:	3402      	adds	r4, #2
 800e9bc:	9305      	str	r3, [sp, #20]
 800e9be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eaa4 <_vfiprintf_r+0x25c>
 800e9c2:	7821      	ldrb	r1, [r4, #0]
 800e9c4:	2203      	movs	r2, #3
 800e9c6:	4650      	mov	r0, sl
 800e9c8:	f7f1 fc0a 	bl	80001e0 <memchr>
 800e9cc:	b140      	cbz	r0, 800e9e0 <_vfiprintf_r+0x198>
 800e9ce:	2340      	movs	r3, #64	; 0x40
 800e9d0:	eba0 000a 	sub.w	r0, r0, sl
 800e9d4:	fa03 f000 	lsl.w	r0, r3, r0
 800e9d8:	9b04      	ldr	r3, [sp, #16]
 800e9da:	4303      	orrs	r3, r0
 800e9dc:	3401      	adds	r4, #1
 800e9de:	9304      	str	r3, [sp, #16]
 800e9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e4:	482c      	ldr	r0, [pc, #176]	; (800ea98 <_vfiprintf_r+0x250>)
 800e9e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9ea:	2206      	movs	r2, #6
 800e9ec:	f7f1 fbf8 	bl	80001e0 <memchr>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d03f      	beq.n	800ea74 <_vfiprintf_r+0x22c>
 800e9f4:	4b29      	ldr	r3, [pc, #164]	; (800ea9c <_vfiprintf_r+0x254>)
 800e9f6:	bb1b      	cbnz	r3, 800ea40 <_vfiprintf_r+0x1f8>
 800e9f8:	9b03      	ldr	r3, [sp, #12]
 800e9fa:	3307      	adds	r3, #7
 800e9fc:	f023 0307 	bic.w	r3, r3, #7
 800ea00:	3308      	adds	r3, #8
 800ea02:	9303      	str	r3, [sp, #12]
 800ea04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea06:	443b      	add	r3, r7
 800ea08:	9309      	str	r3, [sp, #36]	; 0x24
 800ea0a:	e767      	b.n	800e8dc <_vfiprintf_r+0x94>
 800ea0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea10:	460c      	mov	r4, r1
 800ea12:	2001      	movs	r0, #1
 800ea14:	e7a5      	b.n	800e962 <_vfiprintf_r+0x11a>
 800ea16:	2300      	movs	r3, #0
 800ea18:	3401      	adds	r4, #1
 800ea1a:	9305      	str	r3, [sp, #20]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	f04f 0c0a 	mov.w	ip, #10
 800ea22:	4620      	mov	r0, r4
 800ea24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea28:	3a30      	subs	r2, #48	; 0x30
 800ea2a:	2a09      	cmp	r2, #9
 800ea2c:	d903      	bls.n	800ea36 <_vfiprintf_r+0x1ee>
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d0c5      	beq.n	800e9be <_vfiprintf_r+0x176>
 800ea32:	9105      	str	r1, [sp, #20]
 800ea34:	e7c3      	b.n	800e9be <_vfiprintf_r+0x176>
 800ea36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e7f0      	b.n	800ea22 <_vfiprintf_r+0x1da>
 800ea40:	ab03      	add	r3, sp, #12
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	462a      	mov	r2, r5
 800ea46:	4b16      	ldr	r3, [pc, #88]	; (800eaa0 <_vfiprintf_r+0x258>)
 800ea48:	a904      	add	r1, sp, #16
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	f7fb ffce 	bl	800a9ec <_printf_float>
 800ea50:	4607      	mov	r7, r0
 800ea52:	1c78      	adds	r0, r7, #1
 800ea54:	d1d6      	bne.n	800ea04 <_vfiprintf_r+0x1bc>
 800ea56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea58:	07d9      	lsls	r1, r3, #31
 800ea5a:	d405      	bmi.n	800ea68 <_vfiprintf_r+0x220>
 800ea5c:	89ab      	ldrh	r3, [r5, #12]
 800ea5e:	059a      	lsls	r2, r3, #22
 800ea60:	d402      	bmi.n	800ea68 <_vfiprintf_r+0x220>
 800ea62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea64:	f7fe ff96 	bl	800d994 <__retarget_lock_release_recursive>
 800ea68:	89ab      	ldrh	r3, [r5, #12]
 800ea6a:	065b      	lsls	r3, r3, #25
 800ea6c:	f53f af12 	bmi.w	800e894 <_vfiprintf_r+0x4c>
 800ea70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea72:	e711      	b.n	800e898 <_vfiprintf_r+0x50>
 800ea74:	ab03      	add	r3, sp, #12
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	462a      	mov	r2, r5
 800ea7a:	4b09      	ldr	r3, [pc, #36]	; (800eaa0 <_vfiprintf_r+0x258>)
 800ea7c:	a904      	add	r1, sp, #16
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f7fc fa58 	bl	800af34 <_printf_i>
 800ea84:	e7e4      	b.n	800ea50 <_vfiprintf_r+0x208>
 800ea86:	bf00      	nop
 800ea88:	0800f6e0 	.word	0x0800f6e0
 800ea8c:	0800f700 	.word	0x0800f700
 800ea90:	0800f6c0 	.word	0x0800f6c0
 800ea94:	0800f8f4 	.word	0x0800f8f4
 800ea98:	0800f8fe 	.word	0x0800f8fe
 800ea9c:	0800a9ed 	.word	0x0800a9ed
 800eaa0:	0800e823 	.word	0x0800e823
 800eaa4:	0800f8fa 	.word	0x0800f8fa

0800eaa8 <nan>:
 800eaa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eab0 <nan+0x8>
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	00000000 	.word	0x00000000
 800eab4:	7ff80000 	.word	0x7ff80000

0800eab8 <_sbrk_r>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	4d06      	ldr	r5, [pc, #24]	; (800ead4 <_sbrk_r+0x1c>)
 800eabc:	2300      	movs	r3, #0
 800eabe:	4604      	mov	r4, r0
 800eac0:	4608      	mov	r0, r1
 800eac2:	602b      	str	r3, [r5, #0]
 800eac4:	f7f4 fee4 	bl	8003890 <_sbrk>
 800eac8:	1c43      	adds	r3, r0, #1
 800eaca:	d102      	bne.n	800ead2 <_sbrk_r+0x1a>
 800eacc:	682b      	ldr	r3, [r5, #0]
 800eace:	b103      	cbz	r3, 800ead2 <_sbrk_r+0x1a>
 800ead0:	6023      	str	r3, [r4, #0]
 800ead2:	bd38      	pop	{r3, r4, r5, pc}
 800ead4:	200050a8 	.word	0x200050a8

0800ead8 <__sread>:
 800ead8:	b510      	push	{r4, lr}
 800eada:	460c      	mov	r4, r1
 800eadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eae0:	f000 fada 	bl	800f098 <_read_r>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	bfab      	itete	ge
 800eae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eaea:	89a3      	ldrhlt	r3, [r4, #12]
 800eaec:	181b      	addge	r3, r3, r0
 800eaee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eaf2:	bfac      	ite	ge
 800eaf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800eaf6:	81a3      	strhlt	r3, [r4, #12]
 800eaf8:	bd10      	pop	{r4, pc}

0800eafa <__swrite>:
 800eafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafe:	461f      	mov	r7, r3
 800eb00:	898b      	ldrh	r3, [r1, #12]
 800eb02:	05db      	lsls	r3, r3, #23
 800eb04:	4605      	mov	r5, r0
 800eb06:	460c      	mov	r4, r1
 800eb08:	4616      	mov	r6, r2
 800eb0a:	d505      	bpl.n	800eb18 <__swrite+0x1e>
 800eb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb10:	2302      	movs	r3, #2
 800eb12:	2200      	movs	r2, #0
 800eb14:	f000 f9f2 	bl	800eefc <_lseek_r>
 800eb18:	89a3      	ldrh	r3, [r4, #12]
 800eb1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb22:	81a3      	strh	r3, [r4, #12]
 800eb24:	4632      	mov	r2, r6
 800eb26:	463b      	mov	r3, r7
 800eb28:	4628      	mov	r0, r5
 800eb2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2e:	f000 b88b 	b.w	800ec48 <_write_r>

0800eb32 <__sseek>:
 800eb32:	b510      	push	{r4, lr}
 800eb34:	460c      	mov	r4, r1
 800eb36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb3a:	f000 f9df 	bl	800eefc <_lseek_r>
 800eb3e:	1c43      	adds	r3, r0, #1
 800eb40:	89a3      	ldrh	r3, [r4, #12]
 800eb42:	bf15      	itete	ne
 800eb44:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb4e:	81a3      	strheq	r3, [r4, #12]
 800eb50:	bf18      	it	ne
 800eb52:	81a3      	strhne	r3, [r4, #12]
 800eb54:	bd10      	pop	{r4, pc}

0800eb56 <__sclose>:
 800eb56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb5a:	f000 b8fd 	b.w	800ed58 <_close_r>

0800eb5e <strncmp>:
 800eb5e:	b510      	push	{r4, lr}
 800eb60:	b17a      	cbz	r2, 800eb82 <strncmp+0x24>
 800eb62:	4603      	mov	r3, r0
 800eb64:	3901      	subs	r1, #1
 800eb66:	1884      	adds	r4, r0, r2
 800eb68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eb70:	4290      	cmp	r0, r2
 800eb72:	d101      	bne.n	800eb78 <strncmp+0x1a>
 800eb74:	42a3      	cmp	r3, r4
 800eb76:	d101      	bne.n	800eb7c <strncmp+0x1e>
 800eb78:	1a80      	subs	r0, r0, r2
 800eb7a:	bd10      	pop	{r4, pc}
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d1f3      	bne.n	800eb68 <strncmp+0xa>
 800eb80:	e7fa      	b.n	800eb78 <strncmp+0x1a>
 800eb82:	4610      	mov	r0, r2
 800eb84:	e7f9      	b.n	800eb7a <strncmp+0x1c>
	...

0800eb88 <__swbuf_r>:
 800eb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb8a:	460e      	mov	r6, r1
 800eb8c:	4614      	mov	r4, r2
 800eb8e:	4605      	mov	r5, r0
 800eb90:	b118      	cbz	r0, 800eb9a <__swbuf_r+0x12>
 800eb92:	6983      	ldr	r3, [r0, #24]
 800eb94:	b90b      	cbnz	r3, 800eb9a <__swbuf_r+0x12>
 800eb96:	f7fe fad9 	bl	800d14c <__sinit>
 800eb9a:	4b21      	ldr	r3, [pc, #132]	; (800ec20 <__swbuf_r+0x98>)
 800eb9c:	429c      	cmp	r4, r3
 800eb9e:	d12b      	bne.n	800ebf8 <__swbuf_r+0x70>
 800eba0:	686c      	ldr	r4, [r5, #4]
 800eba2:	69a3      	ldr	r3, [r4, #24]
 800eba4:	60a3      	str	r3, [r4, #8]
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	071a      	lsls	r2, r3, #28
 800ebaa:	d52f      	bpl.n	800ec0c <__swbuf_r+0x84>
 800ebac:	6923      	ldr	r3, [r4, #16]
 800ebae:	b36b      	cbz	r3, 800ec0c <__swbuf_r+0x84>
 800ebb0:	6923      	ldr	r3, [r4, #16]
 800ebb2:	6820      	ldr	r0, [r4, #0]
 800ebb4:	1ac0      	subs	r0, r0, r3
 800ebb6:	6963      	ldr	r3, [r4, #20]
 800ebb8:	b2f6      	uxtb	r6, r6
 800ebba:	4283      	cmp	r3, r0
 800ebbc:	4637      	mov	r7, r6
 800ebbe:	dc04      	bgt.n	800ebca <__swbuf_r+0x42>
 800ebc0:	4621      	mov	r1, r4
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f000 f95e 	bl	800ee84 <_fflush_r>
 800ebc8:	bb30      	cbnz	r0, 800ec18 <__swbuf_r+0x90>
 800ebca:	68a3      	ldr	r3, [r4, #8]
 800ebcc:	3b01      	subs	r3, #1
 800ebce:	60a3      	str	r3, [r4, #8]
 800ebd0:	6823      	ldr	r3, [r4, #0]
 800ebd2:	1c5a      	adds	r2, r3, #1
 800ebd4:	6022      	str	r2, [r4, #0]
 800ebd6:	701e      	strb	r6, [r3, #0]
 800ebd8:	6963      	ldr	r3, [r4, #20]
 800ebda:	3001      	adds	r0, #1
 800ebdc:	4283      	cmp	r3, r0
 800ebde:	d004      	beq.n	800ebea <__swbuf_r+0x62>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	07db      	lsls	r3, r3, #31
 800ebe4:	d506      	bpl.n	800ebf4 <__swbuf_r+0x6c>
 800ebe6:	2e0a      	cmp	r6, #10
 800ebe8:	d104      	bne.n	800ebf4 <__swbuf_r+0x6c>
 800ebea:	4621      	mov	r1, r4
 800ebec:	4628      	mov	r0, r5
 800ebee:	f000 f949 	bl	800ee84 <_fflush_r>
 800ebf2:	b988      	cbnz	r0, 800ec18 <__swbuf_r+0x90>
 800ebf4:	4638      	mov	r0, r7
 800ebf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebf8:	4b0a      	ldr	r3, [pc, #40]	; (800ec24 <__swbuf_r+0x9c>)
 800ebfa:	429c      	cmp	r4, r3
 800ebfc:	d101      	bne.n	800ec02 <__swbuf_r+0x7a>
 800ebfe:	68ac      	ldr	r4, [r5, #8]
 800ec00:	e7cf      	b.n	800eba2 <__swbuf_r+0x1a>
 800ec02:	4b09      	ldr	r3, [pc, #36]	; (800ec28 <__swbuf_r+0xa0>)
 800ec04:	429c      	cmp	r4, r3
 800ec06:	bf08      	it	eq
 800ec08:	68ec      	ldreq	r4, [r5, #12]
 800ec0a:	e7ca      	b.n	800eba2 <__swbuf_r+0x1a>
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4628      	mov	r0, r5
 800ec10:	f000 f82c 	bl	800ec6c <__swsetup_r>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d0cb      	beq.n	800ebb0 <__swbuf_r+0x28>
 800ec18:	f04f 37ff 	mov.w	r7, #4294967295
 800ec1c:	e7ea      	b.n	800ebf4 <__swbuf_r+0x6c>
 800ec1e:	bf00      	nop
 800ec20:	0800f6e0 	.word	0x0800f6e0
 800ec24:	0800f700 	.word	0x0800f700
 800ec28:	0800f6c0 	.word	0x0800f6c0

0800ec2c <__ascii_wctomb>:
 800ec2c:	b149      	cbz	r1, 800ec42 <__ascii_wctomb+0x16>
 800ec2e:	2aff      	cmp	r2, #255	; 0xff
 800ec30:	bf85      	ittet	hi
 800ec32:	238a      	movhi	r3, #138	; 0x8a
 800ec34:	6003      	strhi	r3, [r0, #0]
 800ec36:	700a      	strbls	r2, [r1, #0]
 800ec38:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec3c:	bf98      	it	ls
 800ec3e:	2001      	movls	r0, #1
 800ec40:	4770      	bx	lr
 800ec42:	4608      	mov	r0, r1
 800ec44:	4770      	bx	lr
	...

0800ec48 <_write_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4d07      	ldr	r5, [pc, #28]	; (800ec68 <_write_r+0x20>)
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	4608      	mov	r0, r1
 800ec50:	4611      	mov	r1, r2
 800ec52:	2200      	movs	r2, #0
 800ec54:	602a      	str	r2, [r5, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	f7f4 fdc9 	bl	80037ee <_write>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	d102      	bne.n	800ec66 <_write_r+0x1e>
 800ec60:	682b      	ldr	r3, [r5, #0]
 800ec62:	b103      	cbz	r3, 800ec66 <_write_r+0x1e>
 800ec64:	6023      	str	r3, [r4, #0]
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	200050a8 	.word	0x200050a8

0800ec6c <__swsetup_r>:
 800ec6c:	4b32      	ldr	r3, [pc, #200]	; (800ed38 <__swsetup_r+0xcc>)
 800ec6e:	b570      	push	{r4, r5, r6, lr}
 800ec70:	681d      	ldr	r5, [r3, #0]
 800ec72:	4606      	mov	r6, r0
 800ec74:	460c      	mov	r4, r1
 800ec76:	b125      	cbz	r5, 800ec82 <__swsetup_r+0x16>
 800ec78:	69ab      	ldr	r3, [r5, #24]
 800ec7a:	b913      	cbnz	r3, 800ec82 <__swsetup_r+0x16>
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	f7fe fa65 	bl	800d14c <__sinit>
 800ec82:	4b2e      	ldr	r3, [pc, #184]	; (800ed3c <__swsetup_r+0xd0>)
 800ec84:	429c      	cmp	r4, r3
 800ec86:	d10f      	bne.n	800eca8 <__swsetup_r+0x3c>
 800ec88:	686c      	ldr	r4, [r5, #4]
 800ec8a:	89a3      	ldrh	r3, [r4, #12]
 800ec8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec90:	0719      	lsls	r1, r3, #28
 800ec92:	d42c      	bmi.n	800ecee <__swsetup_r+0x82>
 800ec94:	06dd      	lsls	r5, r3, #27
 800ec96:	d411      	bmi.n	800ecbc <__swsetup_r+0x50>
 800ec98:	2309      	movs	r3, #9
 800ec9a:	6033      	str	r3, [r6, #0]
 800ec9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	f04f 30ff 	mov.w	r0, #4294967295
 800eca6:	e03e      	b.n	800ed26 <__swsetup_r+0xba>
 800eca8:	4b25      	ldr	r3, [pc, #148]	; (800ed40 <__swsetup_r+0xd4>)
 800ecaa:	429c      	cmp	r4, r3
 800ecac:	d101      	bne.n	800ecb2 <__swsetup_r+0x46>
 800ecae:	68ac      	ldr	r4, [r5, #8]
 800ecb0:	e7eb      	b.n	800ec8a <__swsetup_r+0x1e>
 800ecb2:	4b24      	ldr	r3, [pc, #144]	; (800ed44 <__swsetup_r+0xd8>)
 800ecb4:	429c      	cmp	r4, r3
 800ecb6:	bf08      	it	eq
 800ecb8:	68ec      	ldreq	r4, [r5, #12]
 800ecba:	e7e6      	b.n	800ec8a <__swsetup_r+0x1e>
 800ecbc:	0758      	lsls	r0, r3, #29
 800ecbe:	d512      	bpl.n	800ece6 <__swsetup_r+0x7a>
 800ecc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecc2:	b141      	cbz	r1, 800ecd6 <__swsetup_r+0x6a>
 800ecc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecc8:	4299      	cmp	r1, r3
 800ecca:	d002      	beq.n	800ecd2 <__swsetup_r+0x66>
 800eccc:	4630      	mov	r0, r6
 800ecce:	f7ff fb55 	bl	800e37c <_free_r>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	6363      	str	r3, [r4, #52]	; 0x34
 800ecd6:	89a3      	ldrh	r3, [r4, #12]
 800ecd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ecdc:	81a3      	strh	r3, [r4, #12]
 800ecde:	2300      	movs	r3, #0
 800ece0:	6063      	str	r3, [r4, #4]
 800ece2:	6923      	ldr	r3, [r4, #16]
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	89a3      	ldrh	r3, [r4, #12]
 800ece8:	f043 0308 	orr.w	r3, r3, #8
 800ecec:	81a3      	strh	r3, [r4, #12]
 800ecee:	6923      	ldr	r3, [r4, #16]
 800ecf0:	b94b      	cbnz	r3, 800ed06 <__swsetup_r+0x9a>
 800ecf2:	89a3      	ldrh	r3, [r4, #12]
 800ecf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecfc:	d003      	beq.n	800ed06 <__swsetup_r+0x9a>
 800ecfe:	4621      	mov	r1, r4
 800ed00:	4630      	mov	r0, r6
 800ed02:	f000 f933 	bl	800ef6c <__smakebuf_r>
 800ed06:	89a0      	ldrh	r0, [r4, #12]
 800ed08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed0c:	f010 0301 	ands.w	r3, r0, #1
 800ed10:	d00a      	beq.n	800ed28 <__swsetup_r+0xbc>
 800ed12:	2300      	movs	r3, #0
 800ed14:	60a3      	str	r3, [r4, #8]
 800ed16:	6963      	ldr	r3, [r4, #20]
 800ed18:	425b      	negs	r3, r3
 800ed1a:	61a3      	str	r3, [r4, #24]
 800ed1c:	6923      	ldr	r3, [r4, #16]
 800ed1e:	b943      	cbnz	r3, 800ed32 <__swsetup_r+0xc6>
 800ed20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed24:	d1ba      	bne.n	800ec9c <__swsetup_r+0x30>
 800ed26:	bd70      	pop	{r4, r5, r6, pc}
 800ed28:	0781      	lsls	r1, r0, #30
 800ed2a:	bf58      	it	pl
 800ed2c:	6963      	ldrpl	r3, [r4, #20]
 800ed2e:	60a3      	str	r3, [r4, #8]
 800ed30:	e7f4      	b.n	800ed1c <__swsetup_r+0xb0>
 800ed32:	2000      	movs	r0, #0
 800ed34:	e7f7      	b.n	800ed26 <__swsetup_r+0xba>
 800ed36:	bf00      	nop
 800ed38:	20000010 	.word	0x20000010
 800ed3c:	0800f6e0 	.word	0x0800f6e0
 800ed40:	0800f700 	.word	0x0800f700
 800ed44:	0800f6c0 	.word	0x0800f6c0

0800ed48 <abort>:
 800ed48:	b508      	push	{r3, lr}
 800ed4a:	2006      	movs	r0, #6
 800ed4c:	f000 f9de 	bl	800f10c <raise>
 800ed50:	2001      	movs	r0, #1
 800ed52:	f7f4 fd25 	bl	80037a0 <_exit>
	...

0800ed58 <_close_r>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	4d06      	ldr	r5, [pc, #24]	; (800ed74 <_close_r+0x1c>)
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	4604      	mov	r4, r0
 800ed60:	4608      	mov	r0, r1
 800ed62:	602b      	str	r3, [r5, #0]
 800ed64:	f7f4 fd5f 	bl	8003826 <_close>
 800ed68:	1c43      	adds	r3, r0, #1
 800ed6a:	d102      	bne.n	800ed72 <_close_r+0x1a>
 800ed6c:	682b      	ldr	r3, [r5, #0]
 800ed6e:	b103      	cbz	r3, 800ed72 <_close_r+0x1a>
 800ed70:	6023      	str	r3, [r4, #0]
 800ed72:	bd38      	pop	{r3, r4, r5, pc}
 800ed74:	200050a8 	.word	0x200050a8

0800ed78 <__sflush_r>:
 800ed78:	898a      	ldrh	r2, [r1, #12]
 800ed7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed7e:	4605      	mov	r5, r0
 800ed80:	0710      	lsls	r0, r2, #28
 800ed82:	460c      	mov	r4, r1
 800ed84:	d458      	bmi.n	800ee38 <__sflush_r+0xc0>
 800ed86:	684b      	ldr	r3, [r1, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	dc05      	bgt.n	800ed98 <__sflush_r+0x20>
 800ed8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	dc02      	bgt.n	800ed98 <__sflush_r+0x20>
 800ed92:	2000      	movs	r0, #0
 800ed94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed9a:	2e00      	cmp	r6, #0
 800ed9c:	d0f9      	beq.n	800ed92 <__sflush_r+0x1a>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eda4:	682f      	ldr	r7, [r5, #0]
 800eda6:	602b      	str	r3, [r5, #0]
 800eda8:	d032      	beq.n	800ee10 <__sflush_r+0x98>
 800edaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800edac:	89a3      	ldrh	r3, [r4, #12]
 800edae:	075a      	lsls	r2, r3, #29
 800edb0:	d505      	bpl.n	800edbe <__sflush_r+0x46>
 800edb2:	6863      	ldr	r3, [r4, #4]
 800edb4:	1ac0      	subs	r0, r0, r3
 800edb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edb8:	b10b      	cbz	r3, 800edbe <__sflush_r+0x46>
 800edba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edbc:	1ac0      	subs	r0, r0, r3
 800edbe:	2300      	movs	r3, #0
 800edc0:	4602      	mov	r2, r0
 800edc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edc4:	6a21      	ldr	r1, [r4, #32]
 800edc6:	4628      	mov	r0, r5
 800edc8:	47b0      	blx	r6
 800edca:	1c43      	adds	r3, r0, #1
 800edcc:	89a3      	ldrh	r3, [r4, #12]
 800edce:	d106      	bne.n	800edde <__sflush_r+0x66>
 800edd0:	6829      	ldr	r1, [r5, #0]
 800edd2:	291d      	cmp	r1, #29
 800edd4:	d82c      	bhi.n	800ee30 <__sflush_r+0xb8>
 800edd6:	4a2a      	ldr	r2, [pc, #168]	; (800ee80 <__sflush_r+0x108>)
 800edd8:	40ca      	lsrs	r2, r1
 800edda:	07d6      	lsls	r6, r2, #31
 800eddc:	d528      	bpl.n	800ee30 <__sflush_r+0xb8>
 800edde:	2200      	movs	r2, #0
 800ede0:	6062      	str	r2, [r4, #4]
 800ede2:	04d9      	lsls	r1, r3, #19
 800ede4:	6922      	ldr	r2, [r4, #16]
 800ede6:	6022      	str	r2, [r4, #0]
 800ede8:	d504      	bpl.n	800edf4 <__sflush_r+0x7c>
 800edea:	1c42      	adds	r2, r0, #1
 800edec:	d101      	bne.n	800edf2 <__sflush_r+0x7a>
 800edee:	682b      	ldr	r3, [r5, #0]
 800edf0:	b903      	cbnz	r3, 800edf4 <__sflush_r+0x7c>
 800edf2:	6560      	str	r0, [r4, #84]	; 0x54
 800edf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edf6:	602f      	str	r7, [r5, #0]
 800edf8:	2900      	cmp	r1, #0
 800edfa:	d0ca      	beq.n	800ed92 <__sflush_r+0x1a>
 800edfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee00:	4299      	cmp	r1, r3
 800ee02:	d002      	beq.n	800ee0a <__sflush_r+0x92>
 800ee04:	4628      	mov	r0, r5
 800ee06:	f7ff fab9 	bl	800e37c <_free_r>
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ee0e:	e7c1      	b.n	800ed94 <__sflush_r+0x1c>
 800ee10:	6a21      	ldr	r1, [r4, #32]
 800ee12:	2301      	movs	r3, #1
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b0      	blx	r6
 800ee18:	1c41      	adds	r1, r0, #1
 800ee1a:	d1c7      	bne.n	800edac <__sflush_r+0x34>
 800ee1c:	682b      	ldr	r3, [r5, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d0c4      	beq.n	800edac <__sflush_r+0x34>
 800ee22:	2b1d      	cmp	r3, #29
 800ee24:	d001      	beq.n	800ee2a <__sflush_r+0xb2>
 800ee26:	2b16      	cmp	r3, #22
 800ee28:	d101      	bne.n	800ee2e <__sflush_r+0xb6>
 800ee2a:	602f      	str	r7, [r5, #0]
 800ee2c:	e7b1      	b.n	800ed92 <__sflush_r+0x1a>
 800ee2e:	89a3      	ldrh	r3, [r4, #12]
 800ee30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee34:	81a3      	strh	r3, [r4, #12]
 800ee36:	e7ad      	b.n	800ed94 <__sflush_r+0x1c>
 800ee38:	690f      	ldr	r7, [r1, #16]
 800ee3a:	2f00      	cmp	r7, #0
 800ee3c:	d0a9      	beq.n	800ed92 <__sflush_r+0x1a>
 800ee3e:	0793      	lsls	r3, r2, #30
 800ee40:	680e      	ldr	r6, [r1, #0]
 800ee42:	bf08      	it	eq
 800ee44:	694b      	ldreq	r3, [r1, #20]
 800ee46:	600f      	str	r7, [r1, #0]
 800ee48:	bf18      	it	ne
 800ee4a:	2300      	movne	r3, #0
 800ee4c:	eba6 0807 	sub.w	r8, r6, r7
 800ee50:	608b      	str	r3, [r1, #8]
 800ee52:	f1b8 0f00 	cmp.w	r8, #0
 800ee56:	dd9c      	ble.n	800ed92 <__sflush_r+0x1a>
 800ee58:	6a21      	ldr	r1, [r4, #32]
 800ee5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee5c:	4643      	mov	r3, r8
 800ee5e:	463a      	mov	r2, r7
 800ee60:	4628      	mov	r0, r5
 800ee62:	47b0      	blx	r6
 800ee64:	2800      	cmp	r0, #0
 800ee66:	dc06      	bgt.n	800ee76 <__sflush_r+0xfe>
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee6e:	81a3      	strh	r3, [r4, #12]
 800ee70:	f04f 30ff 	mov.w	r0, #4294967295
 800ee74:	e78e      	b.n	800ed94 <__sflush_r+0x1c>
 800ee76:	4407      	add	r7, r0
 800ee78:	eba8 0800 	sub.w	r8, r8, r0
 800ee7c:	e7e9      	b.n	800ee52 <__sflush_r+0xda>
 800ee7e:	bf00      	nop
 800ee80:	20400001 	.word	0x20400001

0800ee84 <_fflush_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	690b      	ldr	r3, [r1, #16]
 800ee88:	4605      	mov	r5, r0
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	b913      	cbnz	r3, 800ee94 <_fflush_r+0x10>
 800ee8e:	2500      	movs	r5, #0
 800ee90:	4628      	mov	r0, r5
 800ee92:	bd38      	pop	{r3, r4, r5, pc}
 800ee94:	b118      	cbz	r0, 800ee9e <_fflush_r+0x1a>
 800ee96:	6983      	ldr	r3, [r0, #24]
 800ee98:	b90b      	cbnz	r3, 800ee9e <_fflush_r+0x1a>
 800ee9a:	f7fe f957 	bl	800d14c <__sinit>
 800ee9e:	4b14      	ldr	r3, [pc, #80]	; (800eef0 <_fflush_r+0x6c>)
 800eea0:	429c      	cmp	r4, r3
 800eea2:	d11b      	bne.n	800eedc <_fflush_r+0x58>
 800eea4:	686c      	ldr	r4, [r5, #4]
 800eea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d0ef      	beq.n	800ee8e <_fflush_r+0xa>
 800eeae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eeb0:	07d0      	lsls	r0, r2, #31
 800eeb2:	d404      	bmi.n	800eebe <_fflush_r+0x3a>
 800eeb4:	0599      	lsls	r1, r3, #22
 800eeb6:	d402      	bmi.n	800eebe <_fflush_r+0x3a>
 800eeb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeba:	f7fe fd6a 	bl	800d992 <__retarget_lock_acquire_recursive>
 800eebe:	4628      	mov	r0, r5
 800eec0:	4621      	mov	r1, r4
 800eec2:	f7ff ff59 	bl	800ed78 <__sflush_r>
 800eec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eec8:	07da      	lsls	r2, r3, #31
 800eeca:	4605      	mov	r5, r0
 800eecc:	d4e0      	bmi.n	800ee90 <_fflush_r+0xc>
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	059b      	lsls	r3, r3, #22
 800eed2:	d4dd      	bmi.n	800ee90 <_fflush_r+0xc>
 800eed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eed6:	f7fe fd5d 	bl	800d994 <__retarget_lock_release_recursive>
 800eeda:	e7d9      	b.n	800ee90 <_fflush_r+0xc>
 800eedc:	4b05      	ldr	r3, [pc, #20]	; (800eef4 <_fflush_r+0x70>)
 800eede:	429c      	cmp	r4, r3
 800eee0:	d101      	bne.n	800eee6 <_fflush_r+0x62>
 800eee2:	68ac      	ldr	r4, [r5, #8]
 800eee4:	e7df      	b.n	800eea6 <_fflush_r+0x22>
 800eee6:	4b04      	ldr	r3, [pc, #16]	; (800eef8 <_fflush_r+0x74>)
 800eee8:	429c      	cmp	r4, r3
 800eeea:	bf08      	it	eq
 800eeec:	68ec      	ldreq	r4, [r5, #12]
 800eeee:	e7da      	b.n	800eea6 <_fflush_r+0x22>
 800eef0:	0800f6e0 	.word	0x0800f6e0
 800eef4:	0800f700 	.word	0x0800f700
 800eef8:	0800f6c0 	.word	0x0800f6c0

0800eefc <_lseek_r>:
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	4d07      	ldr	r5, [pc, #28]	; (800ef1c <_lseek_r+0x20>)
 800ef00:	4604      	mov	r4, r0
 800ef02:	4608      	mov	r0, r1
 800ef04:	4611      	mov	r1, r2
 800ef06:	2200      	movs	r2, #0
 800ef08:	602a      	str	r2, [r5, #0]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	f7f4 fcb2 	bl	8003874 <_lseek>
 800ef10:	1c43      	adds	r3, r0, #1
 800ef12:	d102      	bne.n	800ef1a <_lseek_r+0x1e>
 800ef14:	682b      	ldr	r3, [r5, #0]
 800ef16:	b103      	cbz	r3, 800ef1a <_lseek_r+0x1e>
 800ef18:	6023      	str	r3, [r4, #0]
 800ef1a:	bd38      	pop	{r3, r4, r5, pc}
 800ef1c:	200050a8 	.word	0x200050a8

0800ef20 <__swhatbuf_r>:
 800ef20:	b570      	push	{r4, r5, r6, lr}
 800ef22:	460e      	mov	r6, r1
 800ef24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef28:	2900      	cmp	r1, #0
 800ef2a:	b096      	sub	sp, #88	; 0x58
 800ef2c:	4614      	mov	r4, r2
 800ef2e:	461d      	mov	r5, r3
 800ef30:	da08      	bge.n	800ef44 <__swhatbuf_r+0x24>
 800ef32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef36:	2200      	movs	r2, #0
 800ef38:	602a      	str	r2, [r5, #0]
 800ef3a:	061a      	lsls	r2, r3, #24
 800ef3c:	d410      	bmi.n	800ef60 <__swhatbuf_r+0x40>
 800ef3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef42:	e00e      	b.n	800ef62 <__swhatbuf_r+0x42>
 800ef44:	466a      	mov	r2, sp
 800ef46:	f000 f8fd 	bl	800f144 <_fstat_r>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	dbf1      	blt.n	800ef32 <__swhatbuf_r+0x12>
 800ef4e:	9a01      	ldr	r2, [sp, #4]
 800ef50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef58:	425a      	negs	r2, r3
 800ef5a:	415a      	adcs	r2, r3
 800ef5c:	602a      	str	r2, [r5, #0]
 800ef5e:	e7ee      	b.n	800ef3e <__swhatbuf_r+0x1e>
 800ef60:	2340      	movs	r3, #64	; 0x40
 800ef62:	2000      	movs	r0, #0
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	b016      	add	sp, #88	; 0x58
 800ef68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef6c <__smakebuf_r>:
 800ef6c:	898b      	ldrh	r3, [r1, #12]
 800ef6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef70:	079d      	lsls	r5, r3, #30
 800ef72:	4606      	mov	r6, r0
 800ef74:	460c      	mov	r4, r1
 800ef76:	d507      	bpl.n	800ef88 <__smakebuf_r+0x1c>
 800ef78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	6123      	str	r3, [r4, #16]
 800ef80:	2301      	movs	r3, #1
 800ef82:	6163      	str	r3, [r4, #20]
 800ef84:	b002      	add	sp, #8
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
 800ef88:	ab01      	add	r3, sp, #4
 800ef8a:	466a      	mov	r2, sp
 800ef8c:	f7ff ffc8 	bl	800ef20 <__swhatbuf_r>
 800ef90:	9900      	ldr	r1, [sp, #0]
 800ef92:	4605      	mov	r5, r0
 800ef94:	4630      	mov	r0, r6
 800ef96:	f7ff fa5d 	bl	800e454 <_malloc_r>
 800ef9a:	b948      	cbnz	r0, 800efb0 <__smakebuf_r+0x44>
 800ef9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efa0:	059a      	lsls	r2, r3, #22
 800efa2:	d4ef      	bmi.n	800ef84 <__smakebuf_r+0x18>
 800efa4:	f023 0303 	bic.w	r3, r3, #3
 800efa8:	f043 0302 	orr.w	r3, r3, #2
 800efac:	81a3      	strh	r3, [r4, #12]
 800efae:	e7e3      	b.n	800ef78 <__smakebuf_r+0xc>
 800efb0:	4b0d      	ldr	r3, [pc, #52]	; (800efe8 <__smakebuf_r+0x7c>)
 800efb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	6020      	str	r0, [r4, #0]
 800efb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efbc:	81a3      	strh	r3, [r4, #12]
 800efbe:	9b00      	ldr	r3, [sp, #0]
 800efc0:	6163      	str	r3, [r4, #20]
 800efc2:	9b01      	ldr	r3, [sp, #4]
 800efc4:	6120      	str	r0, [r4, #16]
 800efc6:	b15b      	cbz	r3, 800efe0 <__smakebuf_r+0x74>
 800efc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efcc:	4630      	mov	r0, r6
 800efce:	f000 f8cb 	bl	800f168 <_isatty_r>
 800efd2:	b128      	cbz	r0, 800efe0 <__smakebuf_r+0x74>
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	f023 0303 	bic.w	r3, r3, #3
 800efda:	f043 0301 	orr.w	r3, r3, #1
 800efde:	81a3      	strh	r3, [r4, #12]
 800efe0:	89a0      	ldrh	r0, [r4, #12]
 800efe2:	4305      	orrs	r5, r0
 800efe4:	81a5      	strh	r5, [r4, #12]
 800efe6:	e7cd      	b.n	800ef84 <__smakebuf_r+0x18>
 800efe8:	0800d0e5 	.word	0x0800d0e5

0800efec <memmove>:
 800efec:	4288      	cmp	r0, r1
 800efee:	b510      	push	{r4, lr}
 800eff0:	eb01 0402 	add.w	r4, r1, r2
 800eff4:	d902      	bls.n	800effc <memmove+0x10>
 800eff6:	4284      	cmp	r4, r0
 800eff8:	4623      	mov	r3, r4
 800effa:	d807      	bhi.n	800f00c <memmove+0x20>
 800effc:	1e43      	subs	r3, r0, #1
 800effe:	42a1      	cmp	r1, r4
 800f000:	d008      	beq.n	800f014 <memmove+0x28>
 800f002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f00a:	e7f8      	b.n	800effe <memmove+0x12>
 800f00c:	4402      	add	r2, r0
 800f00e:	4601      	mov	r1, r0
 800f010:	428a      	cmp	r2, r1
 800f012:	d100      	bne.n	800f016 <memmove+0x2a>
 800f014:	bd10      	pop	{r4, pc}
 800f016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f01e:	e7f7      	b.n	800f010 <memmove+0x24>

0800f020 <__malloc_lock>:
 800f020:	4801      	ldr	r0, [pc, #4]	; (800f028 <__malloc_lock+0x8>)
 800f022:	f7fe bcb6 	b.w	800d992 <__retarget_lock_acquire_recursive>
 800f026:	bf00      	nop
 800f028:	2000509c 	.word	0x2000509c

0800f02c <__malloc_unlock>:
 800f02c:	4801      	ldr	r0, [pc, #4]	; (800f034 <__malloc_unlock+0x8>)
 800f02e:	f7fe bcb1 	b.w	800d994 <__retarget_lock_release_recursive>
 800f032:	bf00      	nop
 800f034:	2000509c 	.word	0x2000509c

0800f038 <_realloc_r>:
 800f038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f03c:	4680      	mov	r8, r0
 800f03e:	4614      	mov	r4, r2
 800f040:	460e      	mov	r6, r1
 800f042:	b921      	cbnz	r1, 800f04e <_realloc_r+0x16>
 800f044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f048:	4611      	mov	r1, r2
 800f04a:	f7ff ba03 	b.w	800e454 <_malloc_r>
 800f04e:	b92a      	cbnz	r2, 800f05c <_realloc_r+0x24>
 800f050:	f7ff f994 	bl	800e37c <_free_r>
 800f054:	4625      	mov	r5, r4
 800f056:	4628      	mov	r0, r5
 800f058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f05c:	f000 f894 	bl	800f188 <_malloc_usable_size_r>
 800f060:	4284      	cmp	r4, r0
 800f062:	4607      	mov	r7, r0
 800f064:	d802      	bhi.n	800f06c <_realloc_r+0x34>
 800f066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f06a:	d812      	bhi.n	800f092 <_realloc_r+0x5a>
 800f06c:	4621      	mov	r1, r4
 800f06e:	4640      	mov	r0, r8
 800f070:	f7ff f9f0 	bl	800e454 <_malloc_r>
 800f074:	4605      	mov	r5, r0
 800f076:	2800      	cmp	r0, #0
 800f078:	d0ed      	beq.n	800f056 <_realloc_r+0x1e>
 800f07a:	42bc      	cmp	r4, r7
 800f07c:	4622      	mov	r2, r4
 800f07e:	4631      	mov	r1, r6
 800f080:	bf28      	it	cs
 800f082:	463a      	movcs	r2, r7
 800f084:	f7fb fbfc 	bl	800a880 <memcpy>
 800f088:	4631      	mov	r1, r6
 800f08a:	4640      	mov	r0, r8
 800f08c:	f7ff f976 	bl	800e37c <_free_r>
 800f090:	e7e1      	b.n	800f056 <_realloc_r+0x1e>
 800f092:	4635      	mov	r5, r6
 800f094:	e7df      	b.n	800f056 <_realloc_r+0x1e>
	...

0800f098 <_read_r>:
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	4d07      	ldr	r5, [pc, #28]	; (800f0b8 <_read_r+0x20>)
 800f09c:	4604      	mov	r4, r0
 800f09e:	4608      	mov	r0, r1
 800f0a0:	4611      	mov	r1, r2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	602a      	str	r2, [r5, #0]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	f7f4 fb84 	bl	80037b4 <_read>
 800f0ac:	1c43      	adds	r3, r0, #1
 800f0ae:	d102      	bne.n	800f0b6 <_read_r+0x1e>
 800f0b0:	682b      	ldr	r3, [r5, #0]
 800f0b2:	b103      	cbz	r3, 800f0b6 <_read_r+0x1e>
 800f0b4:	6023      	str	r3, [r4, #0]
 800f0b6:	bd38      	pop	{r3, r4, r5, pc}
 800f0b8:	200050a8 	.word	0x200050a8

0800f0bc <_raise_r>:
 800f0bc:	291f      	cmp	r1, #31
 800f0be:	b538      	push	{r3, r4, r5, lr}
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	460d      	mov	r5, r1
 800f0c4:	d904      	bls.n	800f0d0 <_raise_r+0x14>
 800f0c6:	2316      	movs	r3, #22
 800f0c8:	6003      	str	r3, [r0, #0]
 800f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f0d2:	b112      	cbz	r2, 800f0da <_raise_r+0x1e>
 800f0d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0d8:	b94b      	cbnz	r3, 800f0ee <_raise_r+0x32>
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f000 f830 	bl	800f140 <_getpid_r>
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	4601      	mov	r1, r0
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0ea:	f000 b817 	b.w	800f11c <_kill_r>
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d00a      	beq.n	800f108 <_raise_r+0x4c>
 800f0f2:	1c59      	adds	r1, r3, #1
 800f0f4:	d103      	bne.n	800f0fe <_raise_r+0x42>
 800f0f6:	2316      	movs	r3, #22
 800f0f8:	6003      	str	r3, [r0, #0]
 800f0fa:	2001      	movs	r0, #1
 800f0fc:	e7e7      	b.n	800f0ce <_raise_r+0x12>
 800f0fe:	2400      	movs	r4, #0
 800f100:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f104:	4628      	mov	r0, r5
 800f106:	4798      	blx	r3
 800f108:	2000      	movs	r0, #0
 800f10a:	e7e0      	b.n	800f0ce <_raise_r+0x12>

0800f10c <raise>:
 800f10c:	4b02      	ldr	r3, [pc, #8]	; (800f118 <raise+0xc>)
 800f10e:	4601      	mov	r1, r0
 800f110:	6818      	ldr	r0, [r3, #0]
 800f112:	f7ff bfd3 	b.w	800f0bc <_raise_r>
 800f116:	bf00      	nop
 800f118:	20000010 	.word	0x20000010

0800f11c <_kill_r>:
 800f11c:	b538      	push	{r3, r4, r5, lr}
 800f11e:	4d07      	ldr	r5, [pc, #28]	; (800f13c <_kill_r+0x20>)
 800f120:	2300      	movs	r3, #0
 800f122:	4604      	mov	r4, r0
 800f124:	4608      	mov	r0, r1
 800f126:	4611      	mov	r1, r2
 800f128:	602b      	str	r3, [r5, #0]
 800f12a:	f7f4 fb29 	bl	8003780 <_kill>
 800f12e:	1c43      	adds	r3, r0, #1
 800f130:	d102      	bne.n	800f138 <_kill_r+0x1c>
 800f132:	682b      	ldr	r3, [r5, #0]
 800f134:	b103      	cbz	r3, 800f138 <_kill_r+0x1c>
 800f136:	6023      	str	r3, [r4, #0]
 800f138:	bd38      	pop	{r3, r4, r5, pc}
 800f13a:	bf00      	nop
 800f13c:	200050a8 	.word	0x200050a8

0800f140 <_getpid_r>:
 800f140:	f7f4 bb16 	b.w	8003770 <_getpid>

0800f144 <_fstat_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	4d07      	ldr	r5, [pc, #28]	; (800f164 <_fstat_r+0x20>)
 800f148:	2300      	movs	r3, #0
 800f14a:	4604      	mov	r4, r0
 800f14c:	4608      	mov	r0, r1
 800f14e:	4611      	mov	r1, r2
 800f150:	602b      	str	r3, [r5, #0]
 800f152:	f7f4 fb74 	bl	800383e <_fstat>
 800f156:	1c43      	adds	r3, r0, #1
 800f158:	d102      	bne.n	800f160 <_fstat_r+0x1c>
 800f15a:	682b      	ldr	r3, [r5, #0]
 800f15c:	b103      	cbz	r3, 800f160 <_fstat_r+0x1c>
 800f15e:	6023      	str	r3, [r4, #0]
 800f160:	bd38      	pop	{r3, r4, r5, pc}
 800f162:	bf00      	nop
 800f164:	200050a8 	.word	0x200050a8

0800f168 <_isatty_r>:
 800f168:	b538      	push	{r3, r4, r5, lr}
 800f16a:	4d06      	ldr	r5, [pc, #24]	; (800f184 <_isatty_r+0x1c>)
 800f16c:	2300      	movs	r3, #0
 800f16e:	4604      	mov	r4, r0
 800f170:	4608      	mov	r0, r1
 800f172:	602b      	str	r3, [r5, #0]
 800f174:	f7f4 fb73 	bl	800385e <_isatty>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d102      	bne.n	800f182 <_isatty_r+0x1a>
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	b103      	cbz	r3, 800f182 <_isatty_r+0x1a>
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	bd38      	pop	{r3, r4, r5, pc}
 800f184:	200050a8 	.word	0x200050a8

0800f188 <_malloc_usable_size_r>:
 800f188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f18c:	1f18      	subs	r0, r3, #4
 800f18e:	2b00      	cmp	r3, #0
 800f190:	bfbc      	itt	lt
 800f192:	580b      	ldrlt	r3, [r1, r0]
 800f194:	18c0      	addlt	r0, r0, r3
 800f196:	4770      	bx	lr

0800f198 <_init>:
 800f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19a:	bf00      	nop
 800f19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f19e:	bc08      	pop	{r3}
 800f1a0:	469e      	mov	lr, r3
 800f1a2:	4770      	bx	lr

0800f1a4 <_fini>:
 800f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a6:	bf00      	nop
 800f1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1aa:	bc08      	pop	{r3}
 800f1ac:	469e      	mov	lr, r3
 800f1ae:	4770      	bx	lr
